<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BasicBit</title>
  
  <subtitle>Learning is an endless process.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.basicbit.cn/"/>
  <updated>2019-12-16T13:49:48.235Z</updated>
  <id>https://www.basicbit.cn/</id>
  
  <author>
    <name>Bi Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网易游戏的四种解密&amp;解包，附工具</title>
    <link href="https://www.basicbit.cn/2019/03/01/2019-03-01-%E7%BD%91%E6%98%93%E6%B8%B8%E6%88%8F%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%A7%A3%E5%AF%86&amp;%E8%A7%A3%E5%8C%85%EF%BC%8C%E9%99%84%E5%B7%A5%E5%85%B7/"/>
    <id>https://www.basicbit.cn/2019/03/01/2019-03-01-网易游戏的四种解密&amp;解包，附工具/</id>
    <published>2019-02-28T16:00:00.000Z</published>
    <updated>2019-12-16T13:49:48.235Z</updated>
    
    <content type="html"><![CDATA[<p>游戏中大概有3种文件，分别是pyc，nxs，npk，还有一些配置文件就不说了</p><p>这里的pyc是修改过opcode的，pyc文件加密后就是nxs文件，nxs文件会被打包到npk文件中</p><p>我们从里向外说吧，先放出GitHub链接</p><p><a href="https://github.com/yuanbi/NeteaseUnpackTools" target="_blank" rel="noopener">https://github.com/yuanbi/NeteaseUnpackTools</a></p><h2 id="Pyc文件"><a href="#Pyc文件" class="headerlink" title="Pyc文件"></a>Pyc文件</h2><p>NeteasePycObject，这个文件夹中的文件是用来还原pyc opcode的，使用方式如下：</p><p>netpyc 输入文件 输出文件 [是否加密]</p><p>第三个参数是可选的，默认为0，代表解密，如果为1代表加密，就是将正常的opcode修改为游戏中python的opcode</p><p>这个工具的部分pyobject的偏移有问题，大部分文件不会出现问题，懂这方面的大佬可以自行修改下，后面修改过后也会在GitHub更新的</p><p>用netpyc修改opcode过后，可以使用uncomply6，进行反编译</p><p>还有一个问题就是部分pyc文件会有一个或两个字节码不是python中的字节码，极少数的文件会出现这种问题，这个时候在反编译的时候就会报error，如果报了error可以观察解析失败的opcode附近的代码，可以自行修改、</p><p>如果被修改过的字节码不在opcode中，就要手动分析了，当然这种情况出现的很少</p><h2 id="Nxs文件"><a href="#Nxs文件" class="headerlink" title="Nxs文件"></a>Nxs文件</h2><p>接下来就是nxs文件了，nxs文件直接使用NeteaseNxsUnpack中的NeteaseNxsUnpack.py进行解密，使用方法如下</p><p>python2 NeteaseNxsUnpack.py 输入文件 输出文件 </p><p>之后使用netpyc解密opcode，然后反编译就行了</p><h2 id="Npk文件"><a href="#Npk文件" class="headerlink" title="Npk文件"></a>Npk文件</h2><p>直接使用NeteaseNpkUnpack中的NeteaseNpkUnpack.py，使用方法如下</p><p>python2 NeteaseNpkUnpack.py 输入文件 输出文件夹，解密后的文件无后缀，文件类型需要自己分析</p><h2 id="Script-Npk解包"><a href="#Script-Npk解包" class="headerlink" title="Script.Npk解包"></a>Script.Npk解包</h2><p>网易游戏基本上会有script.npk，解包方法如下</p><p>先解包npk，解包后文件夹中的所有文件都是nxs文件，在进行nxs文件解密的步骤就行了</p><p><img src="/img/1573207384695.png" alt="1573207384695"></p><h2 id="DecodeBuffer"><a href="#DecodeBuffer" class="headerlink" title="DecodeBuffer"></a>DecodeBuffer</h2><p>这些是三种文件，还有一种是这样的，这里说的是Windows的版本，在nxfilesystem.dll中会有一个decodebuffer函数，这个就是第四个，这个函数的上层是openwithloader</p><p>openwithloader作用是打开文件，文件校对，和部分初始化，在openwithloader中并不是所有的数据都要经过decodebuffer函数，部分数据需要解密，多数会是一些配置文件</p><p>在openwithloader中，捕获数据如下，在openwithloader的ret字节下断点，文件名，文件大小，会存储在[eax+4]的位置，如果我没记错的话</p><p>还有就是在Windows中并不是所有文件都存储在npk文件里，还有一部分存储在  C:\Users\用户名\AppData\Local\游戏名缩写 中，如果你在这里中找到了script文件夹，这个文件夹中会包含很多文件夹和一个文件</p><p>这些文件夹和文件的名字都是被加密过的，可以在nxfilesystem.dll中搜索导出的包含path的函数，具体名字忘记了，函数功能是这样的，传入正常路径，传出加密路径</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;游戏中大概有3种文件，分别是pyc，nxs，npk，还有一些配置文件就不说了&lt;/p&gt;
&lt;p&gt;这里的pyc是修改过opcode的，pyc文件加密后就是nxs文件，nxs文件会被打包到npk文件中&lt;/p&gt;
&lt;p&gt;我们从里向外说吧，先放出GitHub链接&lt;/p&gt;
&lt;p&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>vmp3.3.1 虚拟机分析</title>
    <link href="https://www.basicbit.cn/2019/01/01/2018-11-03-vmp3.3.1%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%86%E6%9E%90/"/>
    <id>https://www.basicbit.cn/2019/01/01/2018-11-03-vmp3.3.1 虚拟机分析/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-12-16T13:57:11.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟机概述"><a href="#虚拟机概述" class="headerlink" title="虚拟机概述"></a>虚拟机概述</h1><p><img src="/img/1564389415873.png" alt="1564389415873"></p><p>一个正常的二进制文件，假设为x，那么执行他的是Windows操作系统，也就是解释器，假设为A，</p><p>那么vmp加壳的时候，会根据加壳文件的代码，转化为自己的代码，但行为不变，假设push eax，的字节码为0x03，那么vmp就会修改这个值，假设为0x04，但实际执行的时候还是回执行push eax，现在出现了一个新的问题，push eax的字节码被修改了，解释器A，无法将0x04解释为push eax。在vmp将原字节码转换为vmp的字节码之后，vmp还会生成一个解释器，假设为B，解释器B就是来解释，经过vmp修改过后的代码，也就是上文中0x04这个字节码，实际的执行顺序如下</p><p><strong>解释器A – 执行 – 解释器B – 执行 – vmp修改过后的代码。</strong></p><p>当我们分析vmp代码的时候，实际上分析的是解释器B。</p><p>既然解释器B是在执行虚拟机的代码，而虚拟机代码是模拟的vmp加壳之前的代码，加壳之前的代码是需要寄存器来执行的，而我们在调试中看到的寄存器已经被解释器B使用了。</p><p>那么在堆栈中会出现一个结构体，我们称之为VMContext，下文会详细介绍。</p><p>还有就是vmcode有自己的堆栈地址，并不是保存在esp中。</p><h1 id="加密源码"><a href="#加密源码" class="headerlink" title="加密源码"></a>加密源码</h1><p><img src="/img/1564401836257.png" alt="1564401836257"></p><p>开启变态加密</p><p>未开启反调试</p><p>生成后文件</p><p><img src="/img/1564401897119.png" alt="1564401897119"></p><p>源文件3KB，加密后551KB，一个惊人的增长</p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><img src="/img/1564398341996.png" alt="1564398341996"><img src="/img/1564398356653.png" alt="1564398356653"><img src="/img/1564398371347.png" alt="1564398371347"><img src="/img/1564398418945.png" alt="1564398418945"></p><p>上图为vmp开始的代码，我们只关心push指令，它将所有的寄存器压入栈，最后将0压入堆栈，</p><p>此时堆栈保存的数据顺序如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">edx</span><br><span class="line">flags</span><br><span class="line">esi</span><br><span class="line">ecx</span><br><span class="line">ebp </span><br><span class="line">edi</span><br><span class="line">ebx</span><br><span class="line">eax</span><br><span class="line">key</span><br></pre></td></tr></table></figure><p>继续F7单步</p><p><img src="/img/1564398935939.png" alt="1564398935939"></p><p>上面这段代码，主要的作用，取出vmcontext中的key，进行计算，而这个key计算结束的值就是vmcode的代码位置。</p><p>还有两行代码我们需要注意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00429382    8BFC            mov edi,esp </span><br><span class="line">;将当前esp的值赋值给edi，这个edi就是vmcode的堆栈的栈顶</span><br><span class="line">;通过上文我们可以看出了栈顶的顺序就是上述堆栈的顺序</span><br><span class="line">;那么取出的值则为0</span><br><span class="line">00429384    8DA424 40FFFFFF lea esp,dword ptr ss:[esp-0xC0]</span><br><span class="line">;在堆栈开辟0xC0个字节的空间，这个空间就是vmcontext，它的首地址保存在esp中</span><br></pre></td></tr></table></figure><p>F7单步继续</p><p><img src="/img/1564399065949.png" alt="1564399065949"></p><p>上面这段代码中最重要的就是 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lea esi, dword ptr ds :[0x462ABD]</span><br></pre></td></tr></table></figure><p>这个地址是第一个handler的地址，这个handler指的是执行vmcode的代码，也就是在vmcode中取出代码，在handler中执行，在上图中jmp之前的代码就是在vmcode的地址中取出下一行要执行的代码。</p><p>继续单步</p><p><img src="/img/1564399507137.png" alt="1564399507137"></p><p>我们看到ebp进行了加4，可以看出虚拟机的代码是倒着走的。</p><p>单步一直走，走到带有ret的语句。</p><p><img src="/img/1564399608000.png" alt="1564399608000"></p><p>上图中的ecx是经过计算后的偏移，和esi相加就是第一个handler的地址。</p><p>在以前的版本中会有一个VMDispatcher，来决定下一次handler跳转的位置，而在新版本中，去掉了这个功能，很多脱壳神器也就都失效了，换而取代的是 push .. ret或者jmp esi 等等。</p><p>跳到第一个handler地址，继续单步。</p><p><img src="/img/1564400047871.png" alt="1564400047871"></p><p>上图为第一个handler的代码，执行到此，我们还需要说一下vmcode中的堆栈问题，vmcode的堆栈地址并不是固定保存在一个寄存器中的，vmcode的地址，和handler的地址也是一样，并不是固定在一个寄存器中的，它可能在某一个handler中就保存到其他的寄存器中了。</p><p>上图中的寄存器对应如下</p><ul><li><p>edi保存了vmcode的堆栈首地址</p></li><li><p>ebp保存了vmcode的首地址</p></li><li><p>handler的地址在esi中。</p></li><li>esp保存了vmcontext的首地址，vmcontext的地址将永远保存在esp中不会改变</li></ul><p>上图代码主要工作如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov edx,dword ptr ds:[edi]</span><br><span class="line">lea edi,dword ptr ds:[edi+0x4]</span><br><span class="line">;上面两行代码是一个标准的pop指令，将栈顶的值临时保存在edx中</span><br><span class="line">movzx ecx,byte ptr ss:[ebp]</span><br><span class="line">lea ebp,dword ptr ss:[ebp+0x1]</span><br><span class="line">;将vmcode的下一个指令取出来</span><br></pre></td></tr></table></figure><p>F7单步经过一个jmp之后的代码如下</p><p><img src="/img/1564401479169.png" alt="1564401479169"></p><p>上图中高亮代码，是将在栈顶取出来的值保存到vmcontext的偏移的位置中，我们刚有提过esp中保存的永远都是vmcontext的地址，上图中的ecx的值为0x10，edx为上一次在堆栈中取出的值为0。</p><p>而在这之后在ebp中取出4个字节的代码，并把ebp进行加4，然后edx解密得到偏移，加上esi就是下一个handler的地址。</p><p>在最后一行代码跳转过去的代码为jmp esi 跳转到下一个handler。</p><p><img src="/img/1564402444688.png" alt="1564402444688"><img src="/img/1564402703985.png" alt="1564402703985"></p><p>这个handler的代码作用与原理同上，在堆栈中取出内容保存到vmcontext，只是保存位置有变化，保存在0x4的偏移中，然后在ebp中取出代码经过计算通过jmp esi跳转到下一个handler。</p><p>后面的几个handler的都是在做这件事情(初始化vmcontext)，避免篇幅过大，就不贴出代码了。</p><p>初始化结束后的vmcontext如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[vmcontext + <span class="number">0x10</span>] = <span class="number">0</span></span><br><span class="line">[vmcontext + <span class="number">0x04</span>] = edx = <span class="number">00401000</span></span><br><span class="line">[vmcontext + <span class="number">0x28</span>] = FLAGS = <span class="number">00000246</span></span><br><span class="line">[vmcontext + <span class="number">0x38</span>] = esi = <span class="number">00401000</span></span><br><span class="line">[vmcontext + <span class="number">0x24</span>] = ecx = <span class="number">00401000</span></span><br><span class="line">[vmcontext + <span class="number">0x0C</span>] = ebp = <span class="number">0019F</span>F7B</span><br><span class="line">[vmcontext + <span class="number">0x20</span>] = edi = <span class="number">00401000</span></span><br><span class="line">[vmcontext + <span class="number">0x1C</span>] = ebx = <span class="number">0027</span>D000</span><br><span class="line">[vmcontext + <span class="number">0x2C</span>] = eax = <span class="number">0019F</span>FCC</span><br><span class="line">[vmcontext + <span class="number">0x08</span>] = 返回地址 = <span class="number">004650</span>CB</span><br><span class="line">[vmcontext + <span class="number">0x14</span>] = key = A6EC6D77</span><br></pre></td></tr></table></figure><p>至此 vmcontext初始化完毕。</p><h2 id="正式执行代码"><a href="#正式执行代码" class="headerlink" title="正式执行代码"></a>正式执行代码</h2><p><img src="/img/1564403874592.png" alt="1564403874592"></p><p>在上一行代码高亮的地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0044CAC5    8DBF FCFFFFFF   lea edi,dword ptr ds:[edi-0x4]</span><br><span class="line">;edi保存了vmcode堆栈的地址，进行减4，开辟4字节空间</span><br><span class="line">...</span><br><span class="line">0044CACF    8907            mov dword ptr ds:[edi],eax</span><br><span class="line">;eax的值为2019，将这个值放到edi中，也就是栈顶</span><br><span class="line">;上述代码可还原为 push 2019 也就是我们源代码的第一行代码</span><br></pre></td></tr></table></figure><p>继续F7单步走</p><p><img src="/img/1564404138745.png" alt="1564404138745"><img src="/img/1564404163486.png" alt="1564404163486"></p><p>每次压栈后，在跳转到下一个handler之前都会有一个当前vmcode栈空间的判断，如果当前栈顶超过了esp+60，就要进行栈空间分配。</p><p>分配的代码如下</p><p><img src="/img/1564404303275.png" alt="1564404303275"><img src="/img/1564404322967.png" alt="1564404322967"><img src="/img/1564404338065.png" alt="1564404338065"><img src="/img/1564404353276.png" alt="1564404353276"><img src="/img/1564404365073.png" alt="1564404365073"></p><p>混肴代码太多</p><p>上图代码总结</p><ul><li>开辟空间</li><li>edi esi eflags 寄存器保存</li><li>利用 esi 和 edi 寄存器，保存开辟空间之前，和开辟空间之后的位置</li><li>通过ecx 和 rep mosb 指令将vmcontext进行恢复</li><li>恢复 edi esi eglags寄存器</li><li>跳转到下一个handler</li></ul><p>到此基本上了解了虚拟机的执行流程。</p><p>接下来的代码就没那么幸运了，因为在vmcode中，包含了很多混肴代码，做一些无用的工作，大大浪费了分析的空间，我通过在栈地址中使用硬件断点跳过这些代码，直接看vmp调用call的过程。</p><p><img src="/img/1564407462138.png" alt="1564407462138"></p><p>将保存在vmcontext的值取出来赋值给原寄存器</p><p>此时的堆栈如下</p><p><img src="/img/1564407515176.png" alt="1564407515176"></p><p>执行完成API返回到401026继续虚拟机指令。</p><p>Good Job.</p><h1 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h1><ul><li>同样的应用程序生成进行两次vmp加壳，所生成的两个EXE，那么这两个EXE的代码不论是在初始化还是在其他地方代码都会有很多不同，但是他们的目的是一致的，假设在初始化部分之前的寄存器压栈，两个不同的exe的jmp指令的多少或者位置都会不同，但它们都是在做同一件事情，就是将key、寄存器、0压入栈。</li><li>在不同的handler中，除了vmcontext的地址是固定保存在esp中之外，其他的均不会固定保存在一个寄存器中，而是在不同的寄存器中进行轮询。</li><li>vmcontext的偏移位置在每次编译的时候也不同</li></ul><p><img src="/img/1571159879653.png" alt="1571159879653"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;虚拟机概述&quot;&gt;&lt;a href=&quot;#虚拟机概述&quot; class=&quot;headerlink&quot; title=&quot;虚拟机概述&quot;&gt;&lt;/a&gt;虚拟机概述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/1564389415873.png&quot; alt=&quot;1564389415873&quot;&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>vmp 过代码校验</title>
    <link href="https://www.basicbit.cn/2018/12/31/2018-12-30-vmp%20%E8%BF%87%E4%BB%A3%E7%A0%81%E6%A0%A1%E9%AA%8C/"/>
    <id>https://www.basicbit.cn/2018/12/31/2018-12-30-vmp 过代码校验/</id>
    <published>2018-12-30T16:00:00.000Z</published>
    <updated>2019-12-17T13:58:15.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码校验"><a href="#代码校验" class="headerlink" title="代码校验"></a>代码校验</h1><h1 id="代码校验-1"><a href="#代码校验-1" class="headerlink" title="代码校验"></a>代码校验</h1><p>简化后的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">START：</span><br><span class="line">mov edx,dword ptr ss:[ebp]</span><br><span class="line">add ebp,0x4</span><br><span class="line">LOOP：</span><br><span class="line">xor eax,eax</span><br><span class="line">mov ecx,eax</span><br><span class="line">shl eax,0x7</span><br><span class="line">shr ecx,0x19</span><br><span class="line">or eax,ecx</span><br><span class="line">xor al,byte ptr ds:[edx]</span><br><span class="line">inc edx</span><br><span class="line">dec dword ptr ss:[ebp]</span><br><span class="line">jnz LOOP</span><br><span class="line">mov dword ptr ss:[ebp],eax</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>这个handler需要两个参数，分别是代码校验的地址和大小，通过xor 指令生成校验码，最后将堆栈的两个参数弹出，将校验码压栈，执行下一个handler</p><h1 id="调用分析"><a href="#调用分析" class="headerlink" title="调用分析"></a>调用分析</h1><p>可以通过OD的条件断点，在校验handler下断，分别打印出 vmcode(ESI) - 1 、传入的两个参数进行分析</p><p><img src="/img/image-20191217205807576.png" alt="image-20191217205807576"></p><p>日志冗长，就不贴了，经分析后一共有4处调用了校验handler，校验的部分分别是文件校验，代码校验，内存校验，随机校验</p><p>这4处校验handler调用之后的校验码比对部分有一个共同点，就是它们都是对ZF标志位进行判断</p><p>还有一个点就是hash比较后的结果会存储在一个寄存器中的BL位，也就是低字节，由堆栈弹出1字节并赋值，这里说的寄存器指的是vm context中的数据，虽然没有在每个hash handler中验证，但我猜测是一致的</p><p>在前3次处理中，会在vm context中保存循环的次数：</p><p><img src="/img/image-20191217211148244.png" alt="image-20191217211148244"></p><p>上图中的堆栈33F608的位置保存了循环次数为4次</p><p>这个值的位置是不国定的，需要自己手动分析</p><p>通过这个循环次数，和ZF的标志位判断就可以跳过校验部分了</p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>校验码计算是使用刚刚计算的校验码与原校验码相减，然后判断ZF标志位</p><p>运算过程如下：</p><p><img src="/img/image-20191217212314663.png" alt="image-20191217212314663"></p><p>化简后是这样的：</p><p>a-b = ~(~a + b)</p><p>f1 = eflags of (~a + b)</p><p>f2 = eflags of ~(~a + b)</p><p>eflags = (f1 &amp; 0x815) + (f2 &amp; ~0x815)</p><p>M1 = eflags &amp; 40</p><p>通过对M1进行右移6位取出ZF标志位并保存到vR13BL(vm context)中</p><p>上图为以前分析的一个vmp 的 hash过程的记录，从初始化到一次循环的记录，文末有下载链接，由于每一次jmp都会对vmcontext进行打乱，阅读会有些不连贯，只能作为参考</p><h1 id="跳过校验部分"><a href="#跳过校验部分" class="headerlink" title="跳过校验部分"></a>跳过校验部分</h1><p>前三次很好跳过，直接在代码校验的handler上下断，修改循环次数为1，不要修改为0，因为在handler中还要进行减一操作，如果你不知道循环次数在vmcontext中的保存的位置，可以用条件断点相对esi的值来判断</p><p>第四次并没有保存循环次数，但是它用到了右移指令，通常情况下，vmp会使用右移四位来判断zf位，如果zf位为1，那么右移4位后结果为4，否则为0</p><p>那么在第4次处理时首先在校验handler下断，断下后在右移handler下断，一般来说，第一次的右移是对hash校验码的判断，第二次右移是对循环的判断，所以当右移handler第二次断下，这个handler的结束会将生成的数值压栈，我们要做的就是把这个值修改为0，就可以跳过代码校验了</p><p>如果还是被检查出来了，问题就出在了每次处理的第一次检查的数据对比中，可以参考第四次的处理，在shr的handler中处理这个问题</p><p>vmp分析记录：</p><p><a href="https://basicbit.cn/doc/Vmp%20hash%20init%20analysis.docx" target="_blank" rel="noopener">https://basicbit.cn/doc/Vmp%20hash%20init%20analysis.docx</a></p><p><a href="https://basicbit.cn/doc/Hash%20loop.docx" target="_blank" rel="noopener">https://basicbit.cn/doc/Hash%20loop.docx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码校验&quot;&gt;&lt;a href=&quot;#代码校验&quot; class=&quot;headerlink&quot; title=&quot;代码校验&quot;&gt;&lt;/a&gt;代码校验&lt;/h1&gt;&lt;h1 id=&quot;代码校验-1&quot;&gt;&lt;a href=&quot;#代码校验-1&quot; class=&quot;headerlink&quot; title=&quot;代码校验&quot;
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
      <category term="vmp" scheme="https://www.basicbit.cn/tags/vmp/"/>
    
  </entry>
  
  <entry>
    <title>python  pyc文件结构</title>
    <link href="https://www.basicbit.cn/2018/12/20/2018-12-20-Python%E5%8F%8D%E7%BC%96%E8%AF%91%EF%BC%9F%E5%85%88%E8%81%8A%E8%81%8Apyc%E7%BB%93%E6%9E%84%E5%90%A7/"/>
    <id>https://www.basicbit.cn/2018/12/20/2018-12-20-Python反编译？先聊聊pyc结构吧/</id>
    <published>2018-12-19T16:00:00.000Z</published>
    <updated>2019-12-16T14:35:06.455Z</updated>
    
    <content type="html"><![CDATA[<p>python反编译工具一抓一大把</p><p>为什么还要自己搞？</p><p>python混肴代码可以让部分工具反编译失败，这还不是最难受的，有的人直接修改了python字节码，自己编译了python，会有人这么无聊吗？没错我碰上了</p><p>碰上这种情况怎么办？搞一份python代码，在修改过的python里跑一遍，在原版的python里跑一遍，对比字节码在修改回来就可以反编译了</p><p>python编译后的字节码存储在pyc文件中，这个pyc文件实际上就是PyCodeObject对象的序列化文本，也就是说我们搞懂这个PyCodeObject结构就行了</p><p>这个结构体的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bytecode object */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    <span class="keyword">int</span> co_argcount;            <span class="comment">/*  Code Block的位置参数个数，比如说一个函数的位置参数个数*/</span></span><br><span class="line">    <span class="keyword">int</span> co_nlocals;             <span class="comment">/*  Code Block中局部变量的个数，包括其中位置参数的个数 */</span></span><br><span class="line">    <span class="keyword">int</span> co_stacksize;           <span class="comment">/* 执行该段Code Block需要的栈空间 */</span></span><br><span class="line">    <span class="keyword">int</span> co_flags;               <span class="comment">/* CO_..., see below */</span></span><br><span class="line">    PyObject *co_code;          <span class="comment">/* Code Block编译所得的字节码指令序列。以PyStingObjet的形式存在 */</span></span><br><span class="line">    PyObject *co_consts;        <span class="comment">/* PyTupleObject对象，保存CodeBlock中的所常量 */</span></span><br><span class="line">    PyObject *co_names;         <span class="comment">/* PyTupleObject对象，保存CodeBlock中的所有符号 */</span></span><br><span class="line">    PyObject *co_varnames;      <span class="comment">/* Code Block中的局部变量名集合 */</span></span><br><span class="line">    PyObject *co_freevars;      <span class="comment">/* Python实现闭包需要用的东西 */</span></span><br><span class="line">    PyObject *co_cellvars;      <span class="comment">/* Code Block中内部嵌套函数所引用的局部变量名集合 */</span></span><br><span class="line">    <span class="comment">/* The rest doesn't count for hash/cmp */</span></span><br><span class="line">    PyObject *co_filename;      <span class="comment">/* Code Block所对应的.py文件的完整路径 */</span></span><br><span class="line">    PyObject *co_name;          <span class="comment">/* Code Block的名字，通常是函数名或类名 */</span></span><br><span class="line">    <span class="keyword">int</span> co_firstlineno;         <span class="comment">/* Code Block在对应的.py文件中起始行 */</span></span><br><span class="line">    PyObject *co_lnotab;        <span class="comment">/* 字节码指令与.py文件中source code行号的对应关系，以PyStringObject的形式存在 */</span></span><br><span class="line">    <span class="keyword">void</span> *co_zombieframe;     <span class="comment">/* for optimization only (see frameobject.c) */</span></span><br><span class="line">&#125; PyCodeObject;</span><br></pre></td></tr></table></figure><p>每个PyCodeObject代表一个Code Block，也可以称之为一个作用域</p><p>一个pyc文件中不止一个Code Block，一个文件，函数，类，都会对应一个Code Block</p><p>对应文件的PyCodeObject的子作用域存储在co_consts中 </p><p>口嗨多无聊，来份代码玩一玩吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'string'</span></span><br><span class="line">i = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'pyc file format'</span></span><br><span class="line">    ss = <span class="string">'new string'</span></span><br><span class="line">    <span class="keyword">return</span> ss</span><br><span class="line">s2 = func()</span><br><span class="line"><span class="keyword">print</span> s2</span><br></pre></td></tr></table></figure><p>编译成pyc文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 -m compileall main.py</span><br></pre></td></tr></table></figure><p>hexdump先来看一眼16进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">00000000  03 f3 0d 0a 6b af be 5d  63 00 00 00 00 00 00 00  |....k..]c.......|</span><br><span class="line">00000010  00 01 00 00 00 40 00 00  00 73 27 00 00 00 64 00  |.....@...s&apos;...d.|</span><br><span class="line">00000020  00 5a 00 00 64 01 00 5a  01 00 64 02 00 84 00 00  |.Z..d..Z..d.....|</span><br><span class="line">00000030  5a 02 00 65 02 00 83 00  00 5a 03 00 65 03 00 47  |Z..e.....Z..e..G|</span><br><span class="line">00000040  48 64 03 00 53 28 04 00  00 00 74 06 00 00 00 73  |Hd..S(....t....s|</span><br><span class="line">00000050  74 72 69 6e 67 69 0a 00  00 00 63 00 00 00 00 01  |tringi....c.....|</span><br><span class="line">00000060  00 00 00 01 00 00 00 43  00 00 00 73 0f 00 00 00  |.......C...s....|</span><br><span class="line">00000070  64 01 00 47 48 64 02 00  7d 00 00 7c 00 00 53 28  |d..GHd..&#125;..|..S(|</span><br><span class="line">00000080  03 00 00 00 4e 73 0f 00  00 00 70 79 63 20 66 69  |....Ns....pyc fi|</span><br><span class="line">00000090  6c 65 20 66 6f 72 6d 61  74 73 0a 00 00 00 6e 65  |le formats....ne|</span><br><span class="line">000000a0  77 20 73 74 72 69 6e 67  28 00 00 00 00 28 01 00  |w string(....(..|</span><br><span class="line">000000b0  00 00 74 02 00 00 00 73  73 28 00 00 00 00 28 00  |..t....ss(....(.|</span><br><span class="line">000000c0  00 00 00 73 07 00 00 00  6d 61 69 6e 2e 70 79 74  |...s....main.pyt|</span><br><span class="line">000000d0  04 00 00 00 66 75 6e 63  05 00 00 00 73 06 00 00  |....func....s...|</span><br><span class="line">000000e0  00 00 01 05 01 06 01 4e  28 04 00 00 00 74 01 00  |.......N(....t..|</span><br><span class="line">000000f0  00 00 73 74 01 00 00 00  69 52 02 00 00 00 74 02  |..st....iR....t.|</span><br><span class="line">00000100  00 00 00 73 32 28 00 00  00 00 28 00 00 00 00 28  |...s2(....(....(|</span><br><span class="line">00000110  00 00 00 00 73 07 00 00  00 6d 61 69 6e 2e 70 79  |....s....main.py|</span><br><span class="line">00000120  74 08 00 00 00 3c 6d 6f  64 75 6c 65 3e 02 00 00  |t....&lt;module&gt;...|</span><br><span class="line">00000130  00 73 08 00 00 00 06 01  06 02 09 04 09 01        |.s............|</span><br></pre></td></tr></table></figure><p>前4个字节magic number对应不同的python版本，低字节的0d0a就是\r\n</p><p>紧接着的4个字节 6b af be 5d 是时间戳，代表着修改的时间</p><p>一段一段来看吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00000000  .. .. .. .. .. .. .. ..  63 00 00 00 00 00 00 00  |....k..]c.......|</span><br><span class="line">00000010  00 01 00 00 00 40 00 00  00 73 27 00 00 00 64 00  |.....@...s&apos;...d.|</span><br><span class="line">00000020  00 5a 00 00 64 01 00 5a  01 00 64 02 00 84 00 00  |.Z..d..Z..d.....|</span><br><span class="line">00000030  5a 02 00 65 02 00 83 00  00 5a 03 00 65 03 00 47  |Z..e.....Z..e..G|</span><br><span class="line">00000040  48 64 03 00 53</span><br></pre></td></tr></table></figure><ul><li><p>紧跟着的是0x63，字符‘c’，这是一个标识（TYPE_CODE）</p></li><li><p>跟着这个标识的4个字节是全局 code block的位置的参数数量（co_argument），上述代码为0</p></li><li><p>在后面的4个字节是code block的局部变量参数个数（co_nlocals），上述代码同样为0</p></li><li><p>在后面的4个字节就是栈空间了，针对当前的code block，上述代码栈值为1</p></li><li><p>在后面的4个字节为co_flags，上述代码为0x40</p></li></ul><p>到了重要的环节了，看到紧跟着的0x73了吗，在这之后就是字节码了，0x73代表的是TYPE_STRING，也就是PyStringObject的标识，PyCodeObject的字节码序列是用PyStringObject对象来保存的</p><p>0x73后4个字节是字节码的大小    ，上述代码为0x27，也就是说在0x64（包括）后的0x27个字节都是python的字节码</p><p>用python的dis模块来验证下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'main.pyc'</span>) <span class="comment">#读取pyc文件</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">8</span>)</span><br><span class="line"><span class="string">'\x03\xf3\r\nk\xaf\xbe]'</span> <span class="comment">#跳过python版本标识和时间戳</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = marshal.load(f)  <span class="comment">#反序列化</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.co_consts </span><br><span class="line">(<span class="string">'string'</span>, <span class="number">10</span>, &lt;code object func at <span class="number">0x7f392fbbbc30</span>, file <span class="string">"main.py"</span>, line <span class="number">5</span>&gt;, <span class="literal">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.co_names</span><br><span class="line">(<span class="string">'s'</span>, <span class="string">'i'</span>, <span class="string">'func'</span>, <span class="string">'s2'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis.dis(c)  <span class="comment">#字节码</span></span><br><span class="line">  <span class="number">2</span>           <span class="number">0</span> LOAD_CONST               <span class="number">0</span> (<span class="string">'string'</span>)</span><br><span class="line">              <span class="number">3</span> STORE_NAME               <span class="number">0</span> (s)</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>           <span class="number">6</span> LOAD_CONST               <span class="number">1</span> (<span class="number">10</span>)</span><br><span class="line">              <span class="number">9</span> STORE_NAME               <span class="number">1</span> (i)</span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>          <span class="number">12</span> LOAD_CONST               <span class="number">2</span> (&lt;code object func at <span class="number">0x7f392fbbbc30</span>, file <span class="string">"main.py"</span>, line <span class="number">5</span>&gt;)</span><br><span class="line">             <span class="number">15</span> MAKE_FUNCTION            <span class="number">0</span></span><br><span class="line">             <span class="number">18</span> STORE_NAME               <span class="number">2</span> (func)</span><br><span class="line"></span><br><span class="line">  <span class="number">9</span>          <span class="number">21</span> LOAD_NAME                <span class="number">2</span> (func)</span><br><span class="line">             <span class="number">24</span> CALL_FUNCTION            <span class="number">0</span></span><br><span class="line">             <span class="number">27</span> STORE_NAME               <span class="number">3</span> (s2)</span><br><span class="line"></span><br><span class="line"> <span class="number">10</span>          <span class="number">30</span> LOAD_NAME                <span class="number">3</span> (s2)</span><br><span class="line">             <span class="number">33</span> PRINT_ITEM          </span><br><span class="line">             <span class="number">34</span> PRINT_NEWLINE       </span><br><span class="line">             <span class="number">35</span> LOAD_CONST               <span class="number">3</span> (<span class="literal">None</span>)</span><br><span class="line">             <span class="number">38</span> RETURN_VALUE        </span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>刚好39个字节（0x27），dis输出代表值：</p><table><thead><tr><th>所在列</th><th>说明</th></tr></thead><tbody><tr><td>第 1 列</td><td>在源代码中的行数</td></tr><tr><td>第 2 列</td><td>该指令在co_code中的偏移</td></tr><tr><td>第 3 列</td><td>opcode，分为有操作数和无操作数两种，是一个字节的整数</td></tr><tr><td>第 4 列</td><td>操作数，占两个字节</td></tr></tbody></table><p>python opcode对应字节码就不说了，自行查看吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00000040  .. .. .. .. .. 28 04 00  00 00 74 06 00 00 00 73  |Hd..S(....t....s|</span><br><span class="line">00000050  74 72 69 6e 67 69 0a 00  00 00 63 00 00 00 00 01  |tringi....c.....|</span><br><span class="line">00000060  00 00 00 01 00 00 00 43  00 00 00 73 0f 00 00 00  |.......C...s....|</span><br><span class="line">00000070  64 01 00 47 48 64 02 00  7d 00 00 7c 00 00 53 00</span><br></pre></td></tr></table></figure><ul><li><p>opcode结束了，在0x28开始就是co_consts的内容了，这里保存了code block的常量</p></li><li><p>紧跟着的4个字节是元素数量，本例中为0x4，有4个元素</p></li><li><p>第一个数据类型是PyStringObject，TYPE_CODE为0x74，0x74后面的4个字节为字符串长度，后面为字符串内容</p></li><li><p>第二个数据类型为int，对应TYPE_CODE为0x69，后面的4个字节为内容，0xA</p></li><li><p>第三个数据类型为PyCodeObject，TYPE_CODE为0x63，和上面一样重新分析，在这不赘述了</p></li></ul><p>跳过上段的code block之后，就是文件信息了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">000000c0  .. .. .. 73 07 00 00 00  6d 61 69 6e 2e 70 79 74  |...s....main.pyt|</span><br><span class="line">000000d0  04 00 00 00 66 75 6e 63  05 00 00 00 73 06 00 00  |....func....s...|</span><br><span class="line">000000e0  00 00 01 05 01 06 01 4e  28 04 00 00 00 74 01 00  |.......N(....t..|</span><br></pre></td></tr></table></figure><p>0x73，字符类型，0x07，字符长度，后面是字符串</p><p>紧跟着的是co_name，标识为0x74，然后是长度0x4，跟着就是4个字节的函数名，func，后面还有4个字节，代表的是在文件中的行数，上例中为5</p><p>然后是字节码指令与源文件行号对应的co_lnotab，以PyStringObject对象存储，先是标识0x73(‘s’)，然后是4字节的长度0x00000006，然后是内容0x010601050100</p><p>剩下的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">000000f0 00 00 73 74 01 00 00 00 69 52 02 00 00 00 74 02 |..st....iR....t.|</span><br><span class="line">00000100 00 00 00 73 32 28 00 00 00 00 28 00 00 00 00 28 |...s2(....(....(|</span><br><span class="line">00000110 00 00 00 00 73 07 00 00 00 6d 61 69 6e 2e 70 79 |....s....main.py|</span><br><span class="line">00000120 74 08 00 00 00 3c 6d 6f 64 75 6c 65 3e 02 00 00 |t....&lt;module&gt;...|</span><br><span class="line">00000130 00 73 08 00 00 00 06 01 06 02 09 04 09 01       |.s............|</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python反编译工具一抓一大把&lt;/p&gt;
&lt;p&gt;为什么还要自己搞？&lt;/p&gt;
&lt;p&gt;python混肴代码可以让部分工具反编译失败，这还不是最难受的，有的人直接修改了python字节码，自己编译了python，会有人这么无聊吗？没错我碰上了&lt;/p&gt;
&lt;p&gt;碰上这种情况怎么办？搞
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
      <category term="Python" scheme="https://www.basicbit.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>x64dbg python API</title>
    <link href="https://www.basicbit.cn/2018/12/20/2018-11-29-x64dbg%20python%20API/"/>
    <id>https://www.basicbit.cn/2018/12/20/2018-11-29-x64dbg python API/</id>
    <published>2018-12-19T16:00:00.000Z</published>
    <updated>2019-12-16T13:56:35.992Z</updated>
    
    <content type="html"><![CDATA[<p>1</p><p><a href="https://github.com/x64dbg/x64dbgpy" target="_blank" rel="noopener">https://github.com/x64dbg/x64dbgpy</a></p><p>asdfasfd</p><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi"><a href="#x64dbgpy-pluginsdk-scriptapi" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi"></a>x64dbgpy.pluginsdk._scriptapi</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi__init__.py</p><p>PACKAGE CONTENTS<br>​    argument<br>​    assembler<br>​    bookmark<br>​    comment<br>​    debug<br>​    flag<br>​    function<br>​    gui<br>​    label<br>​    memory<br>​    misc<br>​    module<br>​    pattern<br>​    register<br>​    stack<br>​    symbol</p><p>DATA<br>​    GUI_MAX_LINE_SIZE = 65536<br>​    MAX_COMMENT_SIZE = 512<br>​    MAX_ERROR_SIZE = 512<br>​    MAX_LABEL_SIZE = 256<br>​    MAX_MODULE_SIZE = 256<br>​    MAX_PATH = 260<br>​    MAX_STRING = 512</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-argument"><a href="#x64dbgpy-pluginsdk-scriptapi-argument" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.argument"></a>x64dbgpy.pluginsdk._scriptapi.argument</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\argument.py</p><p>FUNCTIONS<br>​    Add(start, end, manual, instructionCount=0)<br>​<br>​    AddInfo(info)<br>​<br>​    Clear()<br>​<br>​    Delete(addr)<br>​<br>​    DeleteRange(start, end, deleteManual=False)<br>​<br>​    Get(addr)<br>​<br>​    GetInfo(addr)<br>​<br>​    GetList()<br>​<br>​    Overlaps(start, end)</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-assembler"><a href="#x64dbgpy-pluginsdk-scriptapi-assembler" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.assembler"></a>x64dbgpy.pluginsdk._scriptapi.assembler</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\assembler.py</p><p>FUNCTIONS<br>​    Assemble(addr, instruction)<br>​<br>​    AssembleEx(addr, instruction)<br>​<br>​    AssembleMem(addr, instruction)<br>​<br>​    AssembleMemEx(addr, instruction, fillnop)</p><p>DATA<br>​    MAX_ERROR_SIZE = 512<br>​    MAX_STRING = 512</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-bookmark"><a href="#x64dbgpy-pluginsdk-scriptapi-bookmark" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.bookmark"></a>x64dbgpy.pluginsdk._scriptapi.bookmark</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\bookmark.py</p><p>FUNCTIONS<br>​    Clear()<br>​<br>​    Delete(addr)<br>​<br>​    DeleteRange(start, end)<br>​<br>​    Get(addr)<br>​<br>​    GetInfo(addr)<br>​<br>​    GetList()<br>​<br>​    Set(addr, manual=False)<br>​<br>​    SetInfo(info)</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-comment"><a href="#x64dbgpy-pluginsdk-scriptapi-comment" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.comment"></a>x64dbgpy.pluginsdk._scriptapi.comment</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\comment.py</p><p>FUNCTIONS<br>​    Clear()<br>​<br>​    Delete(addr)<br>​<br>​    DeleteRange(start, end)<br>​<br>​    Get(addr)<br>​<br>​    GetInfo(addr)<br>​<br>​    GetList()<br>​<br>​    Set(addr, text, manual=False)<br>​<br>​    SetInfo(info)</p><p>DATA<br>​    MAX_COMMENT_SIZE = 512</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-debug"><a href="#x64dbgpy-pluginsdk-scriptapi-debug" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.debug"></a>x64dbgpy.pluginsdk._scriptapi.debug</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\debug.py</p><p>CLASSES<br>​    HardwareType<br>​<br>​    class HardwareType<br>​     |  Data and other attributes defined here:<br>​     |<br>​     |  HardwareAccess = 0<br>​     |<br>​     |  HardwareExecute = 2<br>​     |<br>​     |  HardwareWrite = 1</p><p>FUNCTIONS<br>​    DeleteBreakpoint(address)<br>​<br>​    DeleteHardwareBreakpoint(address)<br>​<br>​    Run()<br>​<br>​    SetBreakpoint(address)<br>​<br>​    SetHardwareBreakpoint(address, type=2)<br>​<br>​    StepIn()<br>​<br>​    StepOut()<br>​<br>​    StepOver()<br>​<br>​    Stop()<br>​<br>​    Wait()</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-flag"><a href="#x64dbgpy-pluginsdk-scriptapi-flag" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.flag"></a>x64dbgpy.pluginsdk._scriptapi.flag</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\flag.py</p><p>CLASSES<br>​    FlagEnum<br>​<br>​    class FlagEnum<br>​     |  Data and other attributes defined here:<br>​     |<br>​     |  AF = 6<br>​     |<br>​     |  CF = 2<br>​     |<br>​     |  DF = 7<br>​     |<br>​     |  IF = 8<br>​     |<br>​     |  OF = 1<br>​     |<br>​     |  PF = 3<br>​     |<br>​     |  SF = 4<br>​     |<br>​     |  TF = 5<br>​     |<br>​     |  ZF = 0</p><p>FUNCTIONS<br>​    Flag_Get(flag)<br>​<br>​    Flag_Set(flag, value)<br>​<br>​    GetAF()<br>​<br>​    GetCF()<br>​<br>​    GetDF()<br>​<br>​    GetIF()<br>​<br>​    GetOF()<br>​<br>​    GetPF()<br>​<br>​    GetSF()<br>​<br>​    GetTF()<br>​<br>​    GetZF()<br>​<br>​    SetAF(value)<br>​<br>​    SetCF(value)<br>​<br>​    SetDF(value)<br>​<br>​    SetIF(value)<br>​<br>​    SetOF(value)<br>​<br>​    SetPF(value)<br>​<br>​    SetSF(value)<br>​<br>​    SetTF(value)<br>​<br>​    SetZF(value)</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-function"><a href="#x64dbgpy-pluginsdk-scriptapi-function" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.function"></a>x64dbgpy.pluginsdk._scriptapi.function</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\function.py</p><p>FUNCTIONS<br>​    Add(start, end, manual, instructionCount=0)<br>​<br>​    AddInfo(info)<br>​<br>​    Clear()<br>​<br>​    Delete(addr)<br>​<br>​    DeleteRange(start, end, deleteManual=False)<br>​<br>​    Get(addr)<br>​<br>​    GetInfo(addr)<br>​<br>​    GetList()<br>​<br>​    Overlaps(start, end)</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-gui"><a href="#x64dbgpy-pluginsdk-scriptapi-gui" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.gui"></a>x64dbgpy.pluginsdk._scriptapi.gui</h1><p>FILE<br>    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\gui.py</p><p>FUNCTIONS<br>    Disassembly_SelectionGet()<br>    Script::Gui::Disassembly</p><pre><code>Disassembly_SelectionGetEnd()Disassembly_SelectionGetStart()Disassembly_SelectionSet(start, end)Dump_SelectionGet()Script::Gui::DumpDump_SelectionGetEnd()Dump_SelectionGetStart()Dump_SelectionSet(start, end)Gui_SelectionGet(window)</code></pre><p>   Script::Gui</p><pre><code>Gui_SelectionGetEnd(window)Gui_SelectionGetStart(window)Gui_SelectionSet(window, start, end)InputLine(title)InputValue(title)Message(message)MessageYesNo(message)Refresh()Stack_SelectionGet()Script::Gui::StackStack_SelectionGetEnd()Stack_SelectionGetStart()Stack_SelectionSet(start, end)</code></pre><p>DATA<br>    GUI_MAX_LINE_SIZE = 65536</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-label"><a href="#x64dbgpy-pluginsdk-scriptapi-label" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.label"></a>x64dbgpy.pluginsdk._scriptapi.label</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\label.py</p><p>FUNCTIONS<br>​    Clear()<br>​<br>​    Delete(addr)<br>​<br>​    DeleteRange(start, end)<br>​<br>​    FromString(label)<br>​<br>​    Get(addr)<br>​<br>​    GetInfo(addr)<br>​<br>​    GetList()<br>​<br>​    Set(addr, text, manual=False)<br>​<br>​    SetInfo(info)</p><p>DATA<br>​    MAX_LABEL_SIZE = 256</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-memory"><a href="#x64dbgpy-pluginsdk-scriptapi-memory" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.memory"></a>x64dbgpy.pluginsdk._scriptapi.memory</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\memory.py</p><p>FUNCTIONS<br>​    IsValidPtr(addr)<br>​<br>​    Read(addr, size)<br>​<br>​    ReadByte(addr)<br>​<br>​    ReadDword(addr)<br>​<br>​    ReadPtr(addr)<br>​<br>​    ReadWord(addr)<br>​<br>​    RemoteAlloc(size, addr=0)<br>​<br>​    RemoteFree(addr)<br>​<br>​    Write(addr, data)<br>​<br>​    WriteByte(addr, data)<br>​<br>​    WriteDword(addr, data)<br>​<br>​    WritePtr(addr, data)<br>​<br>​    WriteWord(addr, data)</p><hr><h1 id="x64dbgpy-pluginsdk-scriptapi-misc"><a href="#x64dbgpy-pluginsdk-scriptapi-misc" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.misc"></a>x64dbgpy.pluginsdk._scriptapi.misc</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\misc.py</p><p>FUNCTIONS<br>​    Alloc(size)<br>​<br>​    Free(ptr)<br>​<br>​    ParseExpression(expression)<br>​<br>​    RemoteGetProcAddress(module, api)<br>​<br>​    ResolveLabel(label)</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-module"><a href="#x64dbgpy-pluginsdk-scriptapi-module" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.module"></a>x64dbgpy.pluginsdk._scriptapi.module</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\module.py</p><p>FUNCTIONS<br>​    BaseFromAddr(addr)<br>​<br>​    BaseFromName(name)<br>​<br>​    EntryFromAddr(addr)<br>​<br>​    EntryFromName(name)<br>​<br>​    GetList()<br>​<br>​    GetMainModuleBase()<br>​<br>​    GetMainModuleEntry()<br>​<br>​    GetMainModuleInfo()<br>​<br>​    GetMainModuleName()<br>​<br>​    GetMainModulePath()<br>​<br>​    GetMainModuleSectionCount()<br>​<br>​    GetMainModuleSectionList()<br>​<br>​    GetMainModuleSize()<br>​<br>​    InfoFromAddr(addr)<br>​<br>​    InfoFromName(name)<br>​<br>​    NameFromAddr(addr)<br>​<br>​    PathFromAddr(addr)<br>​<br>​    PathFromName(name)<br>​<br>​    SectionCountFromAddr(addr)<br>​<br>​    SectionCountFromName(name)<br>​<br>​    SectionFromAddr(addr, number)<br>​<br>​    SectionFromName(name, number)<br>​<br>​    SectionListFromAddr(addr)<br>​<br>​    SectionListFromName(name)<br>​<br>​    SizeFromAddr(addr)<br>​<br>​    SizeFromName(name)</p><p>DATA<br>​    MAX_MODULE_SIZE = 256<br>​    MAX_PATH = 260</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-pattern"><a href="#x64dbgpy-pluginsdk-scriptapi-pattern" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.pattern"></a>x64dbgpy.pluginsdk._scriptapi.pattern</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\pattern.py</p><p>FUNCTIONS<br>​    Find(data, pattern)<br>​<br>​    FindMem(start, size, pattern)<br>​<br>​    SearchAndReplace(data, searchpattern, replacepattern)<br>​<br>​    SearchAndReplaceMem(start, size, searchpattern, replacepattern)<br>​<br>​    Write(data, pattern)<br>​<br>​    WriteMem(start, size, pattern)</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-register"><a href="#x64dbgpy-pluginsdk-scriptapi-register" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.register"></a>x64dbgpy.pluginsdk._scriptapi.register</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\register.py</p><p>FUNCTIONS​    GetAH()<br>​<br>​    GetAL()<br>​<br>​    GetAX()<br>​<br>​    GetBH()<br>​<br>​    GetBL()<br>​<br>​    GetBP()<br>​<br>​    GetBX()<br>​<br>​    GetCH()<br>​<br>​    GetCIP()<br>​        # Generic Registers<br>​<br>​    GetCL()<br>​<br>​    GetCSP()<br>​<br>​    GetCX()<br>​<br>​    GetDH()<br>​<br>​    GetDI()<br>​<br>​    GetDL()<br>​<br>​    GetDR0()<br>​        # x86 Debug Registers<br>​<br>​    GetDR1()<br>​<br>​    GetDR2()<br>​<br>​    GetDR3()<br>​<br>​    GetDR6()<br>​<br>​    GetDR7()<br>​<br>​    GetDX()<br>​<br>​    GetEAX()<br>​        # x86 Registers<br>​<br>​    GetEBP()<br>​<br>​    GetEBX()<br>​<br>​    GetECX()<br>​<br>​    GetEDI()<br>​<br>​    GetEDX()<br>​<br>​    GetEIP()<br>​<br>​    GetESI()<br>​<br>​    GetESP()<br>​<br>​    GetSI()<br>​<br>​    GetSP()<br>​<br>​    SetAH(value)<br>​<br>​    SetAL(value)<br>​<br>​    SetAX(value)<br>​<br>​    SetBH(value)<br>​<br>​    SetBL(value)<br>​<br>​    SetBP(value)<br>​<br>​    SetBX(value)<br>​<br>​    SetCH(value)<br>​<br>​    SetCIP(value)<br>​<br>​    SetCL(value)<br>​<br>​    SetCSP(value)<br>​<br>​    SetCX(value)<br>​<br>​    SetDH(value)<br>​<br>​    SetDI(value)<br>​<br>​    SetDL(value)<br>​<br>​    SetDR0(value)<br>​<br>​    SetDR1(value)<br>​<br>​    SetDR2(value)<br>​<br>​    SetDR3(value)<br>​<br>​    SetDR6(value)<br>​<br>​    SetDR7(value)<br>​<br>​    SetDX(value)<br>​<br>​    SetEAX(value)<br>​<br>​    SetEBP(value)<br>​<br>​    SetEBX(value)<br>​<br>​    SetECX(value)<br>​<br>​    SetEDI(value)<br>​<br>​    SetEDX(value)<br>​<br>​    SetEIP(value)<br>​<br>​    SetESI(value)<br>​<br>​    SetESP(value)<br>​<br>​    SetSI(value)<br>​<br>​    SetSP(value)<br>​<br>​    Size()</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-stack"><a href="#x64dbgpy-pluginsdk-scriptapi-stack" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.stack"></a>x64dbgpy.pluginsdk._scriptapi.stack</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\stack.py</p><p>FUNCTIONS<br>​    Peek(offset=0)<br>​<br>​    Pop()<br>​<br>​    Push(value)</p><hr><p>NAME</p><h1 id="x64dbgpy-pluginsdk-scriptapi-symbol"><a href="#x64dbgpy-pluginsdk-scriptapi-symbol" class="headerlink" title="x64dbgpy.pluginsdk._scriptapi.symbol"></a>x64dbgpy.pluginsdk._scriptapi.symbol</h1><p>FILE<br>​    c:\softfo~1\release\x32\plugins\x64dbgpy\x64dbgpy\pluginsdk_scriptapi\symbol.py</p><p>CLASSES<br>​    SymbolType<br>​<br>​    class SymbolType<br>​     |  Data and other attributes defined here:<br>​     |<br>​     |  Export = 2<br>​     |<br>​     |  Function = 0<br>​     |<br>​     |  Import = 1</p><p>FUNCTIONS<br>​    GetList()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/x64dbg/x64dbgpy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/x64dbg/x64dbgpy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;asdfas
      
    
    </summary>
    
      <category term="Note" scheme="https://www.basicbit.cn/categories/Note/"/>
    
    
      <category term="x64dbg" scheme="https://www.basicbit.cn/tags/x64dbg/"/>
    
  </entry>
  
  <entry>
    <title>网易xx游戏辅助的心路历程</title>
    <link href="https://www.basicbit.cn/2018/11/20/2018-11-19-%E7%BD%91%E6%98%93%E6%B8%B8%E6%88%8F%E8%BE%85%E5%8A%A9%E7%9A%84%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    <id>https://www.basicbit.cn/2018/11/20/2018-11-19-网易游戏辅助的心路历程/</id>
    <published>2018-11-19T16:00:00.000Z</published>
    <updated>2019-12-16T13:56:50.637Z</updated>
    
    <content type="html"><![CDATA[<p>喜欢上了网易的一款游戏，但是太肝了，开新区要连续肝6、7个小时，这太难受了，萌生了写辅助的想法，开始分析找到了几个Hook点，辅助这个东西难度不大，用dll注入的方式很快就写完了，随便贴个图</p><p><img src="/img/1572183105475.png" alt="1572183105475"></p><p>刚刚写完，到了晚上游戏更新，dll注入后游戏就退出，网易的效率还真是高[微笑]</p><p>换成代码注入吧，换汤不换药，改完了之后，跑起来没问题了</p><p>emmm  一段时间过去了，，，，，，</p><p>猜的没错，游戏更新后有几个Hook点失效了，重新分析了下，就是偏移变了，可是后面在更新我还要改，顺道把收包和发包解决了下</p><p>有些发包数据没分析，因为太多了，Hook点也能用，发包分析就搁置了</p><p><img src="/img/1572184653951.png" alt="1572184653951"></p><p>几天过后，来了一波大更新，发包分析和一些其他的Hook点失效了，收包还能用，这就够了？调试器不能下断点，猜测是某个线程进行代码校验，可我只是想写一款辅助啊</p><p>唉，python图片转换文字，模拟点击，是很low，可是长久啊</p><p><img src="/img/1572184852450.png" alt="1572184852450"></p><p>用了几天的时间，搞定了之后，也没去玩，辅助给朋友用了，过了一阵子，朋友说辅助打开后游戏就关闭</p><p>我只是想写一款辅助啊，我影响你们盈利了？我因此受益了？</p><p>记得刚开始分析的时候，log信息会记录鼠标点击的位置和时间，想都不要想问题一定在Log信息这</p><p>些（这）许（是）生（仇）气（恨）</p><p>脱壳，干就完事了</p><p>脱壳后，断点虽然能下了，保险起见，把Log、SEH异常、dump模块统统干掉</p><p><img src="/img/1572185119275.png" alt="1572185119275"></p><p>网易用的自己的游戏引擎，查不到过多的资料，分析起来或许不是那么顺畅</p><p>不过还有两个比较好的点，就是二进制文件中的调试信息没有删除，核心调度用python写的，pyc或者pyo是可以像java一样反编译的哦，更令人开心的是，部分python代码还添加了中文注释，爱了爱了</p><p>根据调试信息和x64dbg进行分析，很快就找到了部分资源加密的部分，来两张图吧，剩下的就是时间的问题了</p><p><img src="/img/1572185458932.png" alt="1572185458932"></p><p><img src="/img/1572185470971.png" alt="1572185470971"></p><p>这些是文件路径的解密</p><p>emmm，准备把它搞个底掉</p><p>就说到这吧，其实也没什么就是有点些（这）许（是）生（仇）气（恨）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;喜欢上了网易的一款游戏，但是太肝了，开新区要连续肝6、7个小时，这太难受了，萌生了写辅助的想法，开始分析找到了几个Hook点，辅助这个东西难度不大，用dll注入的方式很快就写完了，随便贴个图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/1572183105475.png&quot; 
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>打补丁？怎么少得了dll注入</title>
    <link href="https://www.basicbit.cn/2018/11/16/2018-11-17-DLL%E6%B3%A8%E5%85%A5/"/>
    <id>https://www.basicbit.cn/2018/11/16/2018-11-17-DLL注入/</id>
    <published>2018-11-15T16:00:00.000Z</published>
    <updated>2019-12-16T13:56:00.667Z</updated>
    
    <content type="html"><![CDATA[<p>dll注入的方法还是挺多的，dll替换，注册表等等，来说说比较常用的一种吧</p><p>这个方法不仅适用dll注入，inline Hook同样适用</p><p>既然是DLL注入，就需要写一个DLL，这个DLL的代码会在被注入的进程中运行，我的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="function"><span class="params">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="function"><span class="params">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="function"><span class="params">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">&#123;</span><br><span class="line">MessageBoxA(<span class="literal">NULL</span>, <span class="string">"I am dll."</span>, <span class="string">"I am dll"</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当DLL被加载时，会进行弹窗，仅此而已</p><p>在开始之前需要先了解一下，关于窗口和进程的知识</p><ul><li><p>每个进程都有一个标识，这个我们都知道，特点是每次启动的值都不一样</p></li><li><p>每个窗口也会有一个标识，和进程一样每次启动的值都不一样</p></li></ul><p>那么所谓的DLL注入，就是在目标进程上开辟一个线程，并调用LoadLibrary</p><p>想在别的进程上创建一个线程，就需要这个进程的句柄</p><p>获取这个句柄就需要它的PID</p><p>而PID每次启动的值都不一样，那么每次注入都要看一眼PID？有些麻烦</p><p>这个时候窗口标识就需要用到了，可以通过窗口句柄获取到进程的PID</p><p>而获取窗口句柄需要窗口的标题和类名，这两个内容，可以通过spy++来找到</p><p><img src="/img/1572008641838.png" alt="1572008641838"></p><p>如上图，只需要拖动<img src="/img/1572008662314.png" alt="1572008662314">到目标窗口上去就好了</p><p>来看代码把，把窗口句柄转换为进程ID：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然你也可以使用遍历所有窗口的方式进行筛选，实现的方式可不止这一个</p><p>获取到窗口句柄，就可以创建远程线程了</p><p>在创建线程的时候，需要一个函数地址，和一个函数参数</p><p>只需要一个参数？有没有想到LoadLibrary函数，这个函数只需要一个参数</p><p>也就是说我们完全可以使用LoadLibrary的地址来作为线程地址</p><p>那么LoadLibrary函数还需要一个参数，既然是在别的进程上创建线程，那么参数的内容也要在目标进程中，我们要在目标进程上开辟内存空间并写入参数值:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在目标进程分配内存，内存大小为参数的大小</span></span><br><span class="line">VOID *pRemoteBuf = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"><span class="comment">//将参数值写入到目标进程中</span></span><br><span class="line">WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)pFilePath, dwBufSize, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>参数写进去了，还需要LoadLibrary的地址，就可以创建远程线程了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>函数的地址有了，参数的地址有了，可以创建远程线程了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>来看看效果：</p><p><img src="/img/1572009493193.png" alt="1572009493193"></p><p><img src="/img/1572009373345.png" alt="1572009373345"></p><p>注入成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dll注入的方法还是挺多的，dll替换，注册表等等，来说说比较常用的一种吧&lt;/p&gt;
&lt;p&gt;这个方法不仅适用dll注入，inline Hook同样适用&lt;/p&gt;
&lt;p&gt;既然是DLL注入，就需要写一个DLL，这个DLL的代码会在被注入的进程中运行，我的代码如下：&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
      <category term="Develop" scheme="https://www.basicbit.cn/categories/Develop/"/>
    
    
  </entry>
  
  <entry>
    <title>微信 - 撤回分析 &amp; patch</title>
    <link href="https://www.basicbit.cn/2018/11/16/2018-11-16-%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E6%92%A4%E5%9B%9E%E5%88%86%E6%9E%90/"/>
    <id>https://www.basicbit.cn/2018/11/16/2018-11-16-微信消息撤回分析/</id>
    <published>2018-11-15T16:00:00.000Z</published>
    <updated>2019-12-16T13:55:44.462Z</updated>
    
    <content type="html"><![CDATA[<p>1</p><p>emmm   进入正题吧</p><p>在微信撤回的时候，会提示xxxx撤回了一条消息，类似下图这样，就以它为入手点吧</p><p><img src="/img/1571916194546.png" alt="1571916194546"></p><p>打开CE搜索这个字符串，</p><p><img src="/img/1571916287471.png" alt="1571916287471"></p><p>9个结果，筛选后找到了一个可用的</p><p>然后栈回溯分析了几个可疑断点</p><p>后来，，，，，，无果</p><p>但是在分析的过程中，发现了一个字符串revoke，在wechatwin.dll中</p><p>对这个模块进行字符串扫描吧：</p><p><img src="/img/1571916502370.png" alt="1571916502370"></p><p><img src="/img/1571916764067.png" alt="1571916764067"></p><p>和我们猜测的一样，只在撤回的时候断下</p><p>此地址附近的代码：</p><p><img src="/img/1571917012715.png" alt="1571917012715"></p><p>猜测：撤回消息和接收消息应该在前几个函数调用是相同的，会在其中一个函数中堆栈开始变化，因为执行的函数不同，这样撤回断下的堆栈和消息接受的堆栈一对比，就可以找到关键点了（不知怎么解决接收消息请看《微信 - 消息结构分析与调用》）</p><p>实践？不浪费时间了，失败了</p><p>怎么办？去刚刚找到的字符串使用的位置下断点，进行栈回溯，老老实实的一步一步分析。</p><p>经分析，上图中标注为撤回点所在的函数，在撤回消息和接收消息中都调用了，这就很明朗了，问题就在这，简单的浏览一下代码，发现在字符串使用的位置上方有一个跳转</p><p><img src="/img/1571917246718.png" alt="1571917246718"></p><p>跳转的位置刚刚好跳出了撤回消息调用的函数，这个跳转的判断源于一个函数的返回值，先不去看，直接patch掉，把jz修改为jmp</p><p>打开微信测试下，已经没什么问题了，撤回消息的微信正常显示，而电脑端并未显示撤回消息也没有消失</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1&lt;/p&gt;
&lt;p&gt;emmm   进入正题吧&lt;/p&gt;
&lt;p&gt;在微信撤回的时候，会提示xxxx撤回了一条消息，类似下图这样，就以它为入手点吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/1571916194546.png&quot; alt=&quot;1571916194546&quot;&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>微信 消息结构分析</title>
    <link href="https://www.basicbit.cn/2018/11/16/2018-11-16-%E5%BE%AE%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%88%86%E6%9E%90/"/>
    <id>https://www.basicbit.cn/2018/11/16/2018-11-16-微信接口分析/</id>
    <published>2018-11-15T16:00:00.000Z</published>
    <updated>2019-12-16T13:55:36.270Z</updated>
    
    <content type="html"><![CDATA[<p>微信接口分析</p><p>之前搞过一次微信结构分析，想做一次记录，微信最近更新了，那就重新分析下吧。</p><p>微信版本号：</p><p><img src="/img/1571745519002.png" alt="1571745519002"></p><p>主要分析发送和接收消息。</p><p>用到的工具CE、x64dbg。</p><p>文中主要解决的点：</p><p>找到接收消息的关键点，实现可拦截，修改。</p><p>找到发送消息的关键点，实现可拦截，可外部调用。</p><p>先来分析接收消息吧，分析前先猜测下微信的消息处理流程。</p><p>我的过程查找如下：</p><ul><li>启动微信，并登录。</li><li>x64dbg附加进来(Alt + a)。</li><li>启动CE，并选择微信应用。</li></ul><p>做完上述内容后，用其他账号给当前账号发送消息，用CE搜索发送的消息内容（123）。</p><p>搜索结果如下：</p><p><img src="/img/1571745340960.png" alt="1571745340960"></p><p>336条太多了。</p><p>再次发送消息（2563），进行过滤：</p><p>最终出现两条结果：</p><p><img src="/img/1571745476665.png" alt="1571745476665"></p><p>经筛选最终选用05CA9185。</p><p>在x64dbg中下硬件写入断点。</p><p><img src="/img/1571745953091.png" alt="1571745953091"></p><p>为什么下写入而不是读取？因为出现新消息会写入这个地址呀。</p><p>在向电脑登陆的微信发送一条消息，由于x64dbg对中文支持不是很友好，建议发送字母或数字（567891234）。</p><p>发送消息后，程序断下，此时我们来看看调用堆栈。</p><p><img src="/img/1571746238446.png" alt="1571746238446"></p><p>函数调用还挺多的，当然这里的不一定全。</p><p>再来看看堆栈。</p><p><img src="/img/1571746278324.png" alt="1571746278324"></p><p>一直向下拉，看看有没有什么可用的信息。</p><p><img src="/img/1571746335556.png" alt="1571746335556"></p><p>看到上图中的我们发送的消息内容了吗？那么这附近的函数调用一定要着重观察。</p><p>各个call的分析我们就不说的，主要看call传递的参数信息是否有我们所需要的，最终找到的的call如下，地址：wechatwin:base + 0x2650F4，可能除了这个call还有其他call可以用，文中就用这个吧：</p><p><img src="/img/1571746692912.png" alt="1571746692912"></p><p>这个函数只压入了一个参数，消息内容就在  [[esp]] 的位置：</p><p><img src="/img/1571746763957.png" alt="1571746763957"></p><p>这里分别列出了微信ID和消息内容，这里的微信ID和我们在微信里看到的微信ID并不一样，具体我也不知道为什么。</p><p>这两个字符串后面跟随的4个字节就是字符串的长度，因此如修改内容需要将字符串长度一并修改。</p><p>这里实际上是一个结构体，包含的信息不止这两个内容，具体分析看文末。</p><p>接收消息搞定了，来看看发送消息吧，并且要进行。</p><p>在电脑端的微信中向文件传输助手中发送消息，发送结束后，在CE中搜索filehelper，这个就是文件传输助手的微信ID。</p><p><img src="/img/1571747328061.png" alt="1571747328061"></p><p>搜索出23条结果。</p><p>在向其他账号发送消息，观察CE变动的的数据。</p><p><img src="/img/1571747393910.png" alt="1571747393910"></p><p>变动的不多，经分析可以看出05CA814D保存的就是刚刚发送的消息的接收者的ID。</p><p>老规矩，对这个地址进行硬件写入断点：</p><p><img src="/img/1571747709507.png" alt="1571747709507"></p><p>再次向文件传输助手发送一条消息，断点断下。</p><p>向上文一样，找call，主要看传递的参数，再次不在赘述了。</p><p>最终找到了两个call，两个call描述如下：</p><ul><li>第一个call，传递了this指针，和其他参数，数量未知，看到this指针就把它pass了</li><li>第二个call，只压入了一个参数，并且未用到寄存器传参数。</li></ul><p>果断用第二个call，为什么？，难道会有人喜欢分析 类的结构吗？</p><p>call的地址：wechatwin:base + 0x4805FC</p><p>在此call的地址下断</p><p>再次发送消息，程序在这个call中断下。</p><p>来看看我们选中的call吧：</p><p><img src="/img/1571748204692.png" alt="1571748204692"></p><p>这个call传递的重要参数在[[esp] + c]中：</p><p><img src="/img/1571748871478.png" alt="1571748871478"></p><p>这里的参数并不是所有的都有用，有些是上层函数需要用到的。</p><p>我们自己调用这个call的话，就需要对内容进行分析，可以先将一些参数置0，然后运行，把无用的参数过滤掉，再来分析有用的参数分别代表了什么。</p><p>这个call和我上次分析的低版本用到的非常相似，我上次针对这两个接口写了个辅助工具，上次分析忘记参数位置了，好像和这次的差不多，改改还能用。</p><p>链接：<a href="https://pan.baidu.com/s/1NKz_IZqqQLy5OkUzWlEG7A" target="_blank" rel="noopener">https://pan.baidu.com/s/1NKz_IZqqQLy5OkUzWlEG7A</a><br>提取码：j0t4 </p><p>具体功能如下：</p><ul><li>接收消息拦截，消息类型分析，发送和接收分离。</li><li>发送消息</li></ul><p><strong>辅助编写步骤如下，未接触过win32编程的可以看下：</strong></p><p>可以使用dll注入技术，我没有使用dll注入。</p><p>技术栈：远程代码写入（WriteProcessMemory），进程间共享内存，远程函数调用（CreateRemoteProcess）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微信接口分析&lt;/p&gt;
&lt;p&gt;之前搞过一次微信结构分析，想做一次记录，微信最近更新了，那就重新分析下吧。&lt;/p&gt;
&lt;p&gt;微信版本号：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/1571745519002.png&quot; alt=&quot;1571745519002&quot;&gt;&lt;/p&gt;
&lt;p&gt;主要
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>Themida &amp; WinLicense 2.0 - 2.4.6 脱壳</title>
    <link href="https://www.basicbit.cn/2018/11/16/2018-11-16-Themida%20&amp;%20WinLicense%202.0%20-%202.4.6%20%E8%84%B1%E5%A3%B3/"/>
    <id>https://www.basicbit.cn/2018/11/16/2018-11-16-Themida &amp; WinLicense 2.0 - 2.4.6 脱壳/</id>
    <published>2018-11-15T16:00:00.000Z</published>
    <updated>2019-12-16T13:56:08.243Z</updated>
    
    <content type="html"><![CDATA[<p>碰上了这个壳，具体文件就不说了</p><p>百度查了一圈找不到相关文章？难道要手脱？</p><p>濒临绝望之前，看到了国外某大佬的文章，链接：<a href="https://zenhax.com/viewtopic.php?f=4&amp;t=1051Hello" target="_blank" rel="noopener">https://zenhax.com/viewtopic.php?f=4&amp;t=1051Hello</a></p><p>来看过程吧</p><p>PEID查壳</p><p><img src="/img/1571830112209.png" alt="1571830112209"></p><p>脱壳需要的文件如下：</p><p>OD</p><p>插件：</p><p>ODBGScript v1.82.6<br>StrongOD 0.4.8.892<br>PhantOm 1.79<br>ARImpRec.dll</p><p>脱壳脚本（Themida - Winlicense Ultra Unpacker 1.4）</p><p>文件会在文末留下链接</p><p>在使用脱壳脚本之前，需要修改一下ARImpRec.dll的路径。</p><p>打开脚本文件搜索HERE_ENTER_YOUR_DLL_PATH_TO_ARIMPREC_DLL:</p><p><img src="/img/1571830437147.png" alt="1571830437147"></p><p>在324行中修改为你存储此dll的绝对路径。</p><p>还有一点需要注意的就是，要使用英文版本的OD，下图中的OllyDBG.exe，然后备份OllyDBG.ini文件。</p><p>并创建一个新的OllyDBG.ini，使其文件内容为空</p><p><img src="/img/1571830775825.png" alt="1571830775825"></p><p>打开OllDBG.exe，加载待脱壳文件，然后加载脚本</p><p><img src="/img/1571831000405.png" alt="1571831000405"></p><p>运行脚本</p><p><img src="/img/1571831031397.png" alt="1571831031397"></p><p>点击是</p><p><img src="/img/1571831063517.png" alt="1571831063517"></p><p>点击否</p><p><img src="/img/1571831111781.png" alt="1571831111781"></p><p>脚本已经开始工作了</p><p><img src="/img/1571831144245.png" alt="1571831144245"></p><p>在运行几秒后，脚本暂停在了上图的位置，继续运行脚本即可</p><p><img src="/img/1571831251717.png" alt="1571831251717"></p><p>随后我们获得了如下图的弹窗，需要在OllyDBG.ini文件中，根据提示修改文件，并重新运行脚本，我在文末的打包文件中已经修改好了</p><p><img src="/img/1571831293135.png" alt="1571831293135"></p><p>关掉弹窗，继续运行</p><p><img src="/img/1571831409264.png" alt="1571831409264"></p><p>点击是，进行更多的检查</p><p><img src="/img/1571831485640.png" alt="1571831485640"></p><p>在这一步，点击否</p><p><img src="/img/1571832082751.png" alt="1571832082751"></p><p>如果你在虚拟机中运行点击时，真机的话点击否就好了</p><p><img src="/img/1571832196873.png" alt="1571832196873"></p><p>搞定了，现在可以进行dump了，点击是</p><p><img src="/img/1571832266301.png" alt="1571832266301"></p><p>按照上图说的去做，第一次看到这个弹窗，点击否，不是第一次点击是</p><p><img src="/img/1571832353478.png" alt="1571832353478"></p><p>文件大小可以接受，不需要压缩，点击是</p><p><img src="/img/1571832437892.png" alt="1571832437892">、</p><p>一些文件信息，点击是</p><p>OK，脱壳结束，脱壳的文件被命名为&lt;原文件名&gt;_DP。</p><p>再来查一下壳</p><p><img src="/img/1571832578604.png" alt="1571832578604"></p><p>搞定。</p><p>Themida &amp; WinLicense 2.0 - 2.4.6 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;碰上了这个壳，具体文件就不说了&lt;/p&gt;
&lt;p&gt;百度查了一圈找不到相关文章？难道要手脱？&lt;/p&gt;
&lt;p&gt;濒临绝望之前，看到了国外某大佬的文章，链接：&lt;a href=&quot;https://zenhax.com/viewtopic.php?f=4&amp;amp;t=1051Hello&quot; t
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>局部静态变量只能初始化一次实现原理</title>
    <link href="https://www.basicbit.cn/2018/11/12/2018-11-14-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/"/>
    <id>https://www.basicbit.cn/2018/11/12/2018-11-14-静态变量/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-12-16T13:55:26.501Z</updated>
    
    <content type="html"><![CDATA[<p>静态变量可以分为全局静态变量，和局部静态变量，先来说说全局的吧</p><p>全局静态变量和全局变量的区别并不大，只是全局静态变量只能在当前文件中使用，而在反汇编中二者并无区别，只可以在当前文件中使用，不过是编译器做出的限制。</p><p>局部静态变量，会有些特殊，它不会随着作用域结束而消失，在未进入作用于之前就已经存在。</p><p>局部静态变量和全局变量都保存在二进制文件的数据区，而在代码中的限制，不过是编译器限制而已。</p><p>那么当某个函数频繁调用局部静态变量时，C++的语法规定局部静态变量只能初始化一次，那么编译器是怎么做到的呢。</p><p>来看代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowStatic</span><span class="params">(<span class="keyword">int</span> nNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> gnNumber = nNum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, gnNumber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00E51738  mov         eax,dword ptr ds:[00E5A148h]  </span><br><span class="line">00E5173D  and         eax,1  </span><br><span class="line">00E51740  jne         ShowStatic+47h (0E51757h)  </span><br><span class="line">00E51742  mov         eax,dword ptr ds:[00E5A148h]  </span><br><span class="line">00E51747  or          eax,1  </span><br><span class="line">00E5174A  mov         dword ptr ds:[00E5A148h],eax  </span><br><span class="line">00E5174F  mov         eax,dword ptr [nNum]  </span><br><span class="line">00E51752  mov         dword ptr [gnNumber (0E5A144h)],eax</span><br></pre></td></tr></table></figure><p>可以看出，静态变量的赋值比普通变量赋值多了很多步骤，我们来分析下。</p><p>首先在地址00E5A148h中保存了局部静态变量的标志，这个标志占1个字节。通过位运算，将标志中的一位数据置1，来判断局部静态变量是否初始化过。而这个标志可以同时保存8个局部静态变量的初始状态。</p><p>通常这个标志出现在最先定义的局部静态变量的附近，例如此例局部变量应出现在 00E5A144h 或 00E5A14Ch中。当同一个作用域内超过了8个静态局部变量，下一个标记将会除了现在第9个定义的局部静态变量地址的附近。</p><p>现在再来看上面的汇编代码就很清晰了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00E51738  mov         eax,dword ptr ds:[00E5A148h]  </span><br><span class="line">00E5173D  and         eax,1  </span><br><span class="line">00E51740  jne         ShowStatic+47h (0E51757h)</span><br></pre></td></tr></table></figure><p>判断是否已经初始化，如果已经初始化就跳转到printf输出内容，否则不跳转继续执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00E51742  mov         eax,dword ptr ds:[00E5A148h]  </span><br><span class="line">00E51747  or          eax,1  </span><br><span class="line">00E5174A  mov         dword ptr ds:[00E5A148h],eax  </span><br><span class="line">00E5174F  mov         eax,dword ptr [nNum]  </span><br><span class="line">00E51752  mov         dword ptr [gnNumber (0E5A144h)],eax</span><br></pre></td></tr></table></figure><p>未初始化的情况，将标志位置位为1，并初始化gnNumber。</p><p>结束了？并没有</p><p>还有这样一个问题，编译器让其他作用域对局部静态变量不可见，这是怎么做到的？</p><p>在编译的过程中，编译器会对变量，函数等进行名称粉碎，也就是静态变量被重新命名了。</p><p>读者可将上面的代码编译链接，然后找到编译期结束后生成的obj文件，在这个文件中搜索静态变量的名字(本文用HxD软件打开obj文件)，搜索结果如下图：</p><p><img src="/img/1571316371117.png" alt="1571316371117"></p><p>名称粉碎后，在原有名称中加加入了一些额外信息，入作用域，类型等。</p><p>像C++重载也是名称粉碎的原理。</p><p>下面的汇编是在C++11中编译的结果，显然和上文的有些差距：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">static int gnNumber = nNum;</span><br><span class="line">00C11818  mov         eax,dword ptr [_tls_index (0C1B190h)]  </span><br><span class="line">00C1181D  mov         ecx,dword ptr fs:[2Ch]  </span><br><span class="line">00C11824  mov         edx,dword ptr [ecx+eax*4]  </span><br><span class="line">00C11827  mov         eax,dword ptr ds:[00C1B150h]  </span><br><span class="line">00C1182C  cmp         eax,dword ptr [edx+104h]  </span><br><span class="line">00C11832  jle         ShowStatic+6Fh (0C1185Fh)  </span><br><span class="line">00C11834  push        0C1B150h  </span><br><span class="line">00C11839  call        __Init_thread_header (0C110DCh)  </span><br><span class="line">00C1183E  add         esp,4  </span><br><span class="line">00C11841  cmp         dword ptr ds:[0C1B150h],0FFFFFFFFh  </span><br><span class="line">00C11848  jne         ShowStatic+6Fh (0C1185Fh)  </span><br><span class="line">00C1184A  mov         eax,dword ptr [nNum]  </span><br><span class="line">00C1184D  mov         dword ptr [gnNumber (0C1B14Ch)],eax  </span><br><span class="line">00C11852  push        0C1B150h  </span><br><span class="line">00C11857  call        __Init_thread_footer (0C11177h)  </span><br><span class="line">00C1185C  add         esp,4</span><br></pre></td></tr></table></figure><p>前三行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00C11818  mov         eax,dword ptr [_tls_index (0C1B190h)]  </span><br><span class="line">00C1181D  mov         ecx,dword ptr fs:[2Ch]  </span><br><span class="line">00C11824  mov         edx,dword ptr [ecx+eax*4]</span><br></pre></td></tr></table></figure><p>TLS？怎么还多了两个函数？<code>__Init_thread_header</code>和<code>_Init_thread_footer</code>   </p><p>这两个函数是用来保证局部的静态对象的初始化线程安全。</p><p>但局部变量的互斥还是老样子，只不过被封装进上述的两个函数之中了。</p><p>有兴趣的读者可以自己上机调试一番。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;静态变量可以分为全局静态变量，和局部静态变量，先来说说全局的吧&lt;/p&gt;
&lt;p&gt;全局静态变量和全局变量的区别并不大，只是全局静态变量只能在当前文件中使用，而在反汇编中二者并无区别，只可以在当前文件中使用，不过是编译器做出的限制。&lt;/p&gt;
&lt;p&gt;局部静态变量，会有些特殊，它不会
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>10分钟破解一款收银软件</title>
    <link href="https://www.basicbit.cn/2018/11/12/2018-11-14-10%E5%88%86%E9%92%9F%E7%A0%B4%E8%A7%A3%E6%94%B6%E9%93%B6%E8%BD%AF%E4%BB%B6/"/>
    <id>https://www.basicbit.cn/2018/11/12/2018-11-14-10分钟破解收银软件/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-12-16T14:27:09.714Z</updated>
    
    <content type="html"><![CDATA[<p>一个朋友在理发店工作，需要一款收银软件，这种东西还用想？百度一大堆，我去百度Down了两个，在云沙箱上跑，都有恶意代码。</p><p>后来就有了这篇文章。</p><p>我在xxxx官网下载了一款试用版的，有限制，进入正文。</p><p>软件是这个样子的</p><p><img src="/img/1571567963572.png" alt="1571567963572"></p><p>我简单运行了一下，添加会员会有人数限制，一会再来说这些吧。</p><p>PEID查壳：</p><p><img src="/img/1571568122093.png" alt="1571568122093"></p><p>.Net ??  记得dnspy这款神器吗？ 没了解过没关系，2分钟后你就会见识到它的强大。</p><p> IntelliLock v.1.5.x.0 直接用d4dot来搞定，你可能不认识这款工具百度down下来就好了。</p><p>下载好之后，打开cmd，并进入这款软件的目录，d4dot的使用非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们采用第二种方法，d4dot -r “目录” 输出如下：</p><p><img src="/img/1571568768381.png" alt="1571568768381"></p><p>这款软件会将解密的文件，做一个备份，名字就是源文件名后面加一个clean，类似这样：</p><p><img src="/img/1571568831859.png" alt="1571568831859"></p><p>如果文件不需要解密，将不会产生这个文件。</p><p>现在我们把解密后的文件，和无需解密的文件复制出来，放在一个新的文件夹中，并将解密的文件名中多余的-cleaned删除掉，就把这个文件夹命名为Unpacked01吧。</p><p>现在我们针对Unpacked01文件夹，再次执行一遍上面的步骤，生成Unpacked02文件夹。</p><p>脱壳结束了？对就是这么easy。</p><p>轮到神器dnspy登场了，使用dnspy软件打开Unpacked02文件夹中的主程序文件，也就是INTMS.exe，如下图。</p><p><img src="/img/1571569395715.png" alt="1571569395715"></p><p>C#大佬可以关闭这个页面了。</p><p>这是什么？源码，没错，还支持源码调试呢。</p><p>还记得文首说的软件限制吗，先来看看限制的提示吧。</p><p><img src="/img/1571569764482.png" alt="1571569764482"></p><p>关键点怎么找？直接搜索添加会员Button的名字就行了，源码摆在那，随你怎么玩。</p><p><img src="/img/1571569880657.png" alt="1571569880657"></p><p>上图就是关键点，代码我已经修改过了，SoftType支持两个参数，一个是加密狗模式，一个是测试模式，运行的时候根据这个参数来进行不同的限制，如果不在二者其一，就会跳过限制代码。</p><p>只要将SoftType改为不在这两个模式中就可以了，我就随便改了个数字。</p><p>现在再去添加会员就看不到温馨提示了。</p><p>搞定。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个朋友在理发店工作，需要一款收银软件，这种东西还用想？百度一大堆，我去百度Down了两个，在云沙箱上跑，都有恶意代码。&lt;/p&gt;
&lt;p&gt;后来就有了这篇文章。&lt;/p&gt;
&lt;p&gt;我在xxxx官网下载了一款试用版的，有限制，进入正文。&lt;/p&gt;
&lt;p&gt;软件是这个样子的&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>多重继承？抽象类？C++的内存布局并不复杂</title>
    <link href="https://www.basicbit.cn/2018/11/12/2018-11-13-%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%EF%BC%8C%E6%8A%BD%E8%B1%A1%EF%BC%8C%E7%BB%88%E7%BB%93%E7%AF%87/"/>
    <id>https://www.basicbit.cn/2018/11/12/2018-11-13-多重继承，抽象，终结篇/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-12-16T13:57:28.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h1><p>先来看看多重继承吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cFa</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cFa() &#123;&#125;;</span><br><span class="line"><span class="keyword">virtual</span> ~cFa() &#123;  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cMo</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cMo() &#123;&#125;;</span><br><span class="line"><span class="keyword">virtual</span> ~cMo() &#123; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cChild</span> :</span> <span class="keyword">public</span> cFa, <span class="keyword">public</span> cMo &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cChild() &#123;&#125;;</span><br><span class="line"><span class="keyword">virtual</span> ~cChild() &#123; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cChild cCh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">001917DD  pop         ecx  </span><br><span class="line">001917FC  mov         ecx,dword ptr [this]  ;取出this指针</span><br><span class="line">001917FF  call        cFa::cFa (01913B1h)  ;调用cFa构造函数</span><br><span class="line">00191804  mov         dword ptr [ebp-4],0  ;异常计数 可以忽略</span><br><span class="line">0019180B  mov         ecx,dword ptr [this]  ;获取this指针</span><br><span class="line">0019180E  add         ecx,4  ;this指针偏移</span><br><span class="line">00191811  call        cMo::cMo (0191302h) ;调用cMo的构造函数  </span><br><span class="line">00191816  mov         eax,dword ptr [this]  ;获取this指针</span><br><span class="line">00191819  mov         dword ptr [eax],offset cChild::`vftable&apos; (0198B4Ch)  ;设置虚函数表</span><br><span class="line">0019181F  mov         eax,dword ptr [this]  ;获取this指针</span><br><span class="line">00191822  mov         dword ptr [eax+4],offset cChild::`vftable&apos; (0198B58h)  ;设置第二个虚函数表</span><br><span class="line">00191829  mov         dword ptr [ebp-4],0FFFFFFFFh  </span><br><span class="line">00191830  mov         eax,dword ptr [this]  ;返回this指针</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>在上面的代码，我们看出构造函数的调用顺序是根据，从左到右的继承顺序来依次调用父类函数的</p><p>在调用cFa的构造函数时，直接传递了this指针，也就是cCh的地址，而在调用cMo的时候，传递的是this指针加4个字节的地址，也就是跳过了cFa所占的空间。</p><p>那么也就是说，父类对象在子类的内存布局的顺序和构造函数的调用顺序是一样的，那么现在cCh对象的内存结构如下图：</p><p><img src="/img/1571226517696.png" alt="1571226517696"></p><p>来看看这两个父类的构造函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">CFa:</span><br><span class="line">......</span><br><span class="line">001918AD  mov         eax,dword ptr [this]  </span><br><span class="line">001918B0  mov         dword ptr [eax],offset cFa::`vftable&apos; (0198B34h)  </span><br><span class="line">001918B6  mov         eax,dword ptr [this]  </span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cMo:</span><br><span class="line">......</span><br><span class="line">0019190D  mov         eax,dword ptr [this]  </span><br><span class="line">00191910  mov         dword ptr [eax],offset cMo::`vftable&apos; (0198B40h)  </span><br><span class="line">00191916  mov         eax,dword ptr [this]  </span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>过滤掉了一些无用的代码，构造函数和非多重继承无任何区别，只是将传进来的对象的虚表换成自己的虚表。</p><p> <strong>有营养的部分来了：</strong></p><p>两个构造函数结束后，出现了两个虚表赋值，为什么是两个虚表？</p><p>因为有两个父类，当调用父类函数的时候，需要通过偏移取得父类对象，传递指针，并调用函数。</p><p>这两个虚表在本例中意义不大，因为子类没有覆盖父类的虚函数，如果有覆盖的情况出现，这两个虚表中会保存子类覆盖的虚函数，和父类未覆盖的虚函数。那么调用就很简单了，虚表偏移。</p><p>析构函数就不上代码了，和构造函数的顺序恰巧相反。</p><p>如果在main函数中添加一行如下代码会发生什么？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cMo *pMo = (cMo*)&amp;cCh;</span><br></pre></td></tr></table></figure><p>编译器会找到cCh的地址，根据cCh父类中的cMo对象的偏移位置，获取到cCh父类中的cMo的地址，并返回赋值给pMo。</p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>上代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CAbstractBase</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CAbstractChild</span> :</span> <span class="keyword">public</span> CAbstractBase&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"show"</span>); &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CAbstractChild cAb;</span><br><span class="line">cAb.Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不说废话，直接进入子类的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">;CAbstractChild 构造函数</span><br><span class="line">......</span><br><span class="line">00A1198F  pop         ecx  </span><br><span class="line">00A11990  mov         dword ptr [this],ecx  </span><br><span class="line">00A11993  mov         ecx,dword ptr [this]  </span><br><span class="line">00A11996  call        CAbstractBase::CAbstractBase (0A11474h)  </span><br><span class="line">00A1199B  mov         eax,dword ptr [this]  ;获取this指针</span><br><span class="line">00A1199E  mov         dword ptr [eax],offset CAbstractChild::`vftable&apos; (0A18B40h)  ;虚函数表初始化</span><br><span class="line">00A119A4  mov         eax,dword ptr [this] ;返回this指针</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">;CAbstractBase 构造函数</span><br><span class="line">......</span><br><span class="line">00A118BF  pop         ecx  </span><br><span class="line">00A118C0  mov         dword ptr [this],ecx  </span><br><span class="line">00A118C3  mov         eax,dword ptr [this]  ;获取this指针</span><br><span class="line">00A118C6  mov         dword ptr [eax],offset CAbstractBase::`vftable&apos; (0A18B34h)  ;虚函数表初始化</span><br><span class="line">00A118CC  mov         eax,dword ptr [this]  ;返回this指针</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>看起来似乎和普通的继承没什么不同？</p><p>我们来看看CAbstractBase中的虚函数表（0A18B34h）指向的Show函数吧。</p><p><img src="/img/1571230318091.png" alt="1571230318091"></p><p>它的调用约定是__purecall （IDA会识别出来） ，这个函数实际上并不是CAbstractBase的Show函数，而是编译器生成一个函数，这个函数的主要作用就是调用 _amsg_exit函数来结束程序，并返回错误码 0x19。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里包含上篇文章的总结《我们聊聊继承吧，从继承的角度出发再来聊聊多态》</p><p><strong>单类继承：</strong></p><ul><li>在类对象占用的内存空间，只保留一份虚表指针，也就只有一个虚表</li><li>虚表中各项保存了类中各虚函数的首地址</li><li>构造函数先构造父类，在构造自身</li><li>析构函数先析构自身，在析构父类</li></ul><p><strong>多重继承：</strong></p><ul><li>在类对象所占用的内存空间中，根据继承父类的个数保存对应的虚表指针</li><li>根据所保存的虚表指针的个数，对应产生相应个数的虚表</li><li>转换父类指针时，需要调整到对象的首地址</li><li>构造时需要调用多个父类构造函数</li><li>构造时先构造继承列表中第一个父类，然后依次调用到最后一个继承的父类构造函数。</li><li>析构与构造顺序相反</li><li>当对象作为成员时，整个类对象的内存结构和多重继承很相似。当类中无虚函数时，整个类对象内存结构和多重继承完全一样，可按实际情况进行还原，当父类或成员对象存在虚函数，通过观察虚表指针的位置和构造函数、析构函数中填写虚表指针的数量及目标地址，来还原继承或成员关系。</li></ul><p><img src="/img/1571159873270.png" alt="1571159873270"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多重继承&quot;&gt;&lt;a href=&quot;#多重继承&quot; class=&quot;headerlink&quot; title=&quot;多重继承&quot;&gt;&lt;/a&gt;多重继承&lt;/h1&gt;&lt;p&gt;先来看看多重继承吧&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基于SEH二次封装的异常处理 - 之数据结构篇</title>
    <link href="https://www.basicbit.cn/2018/11/12/2018-11-14-C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/"/>
    <id>https://www.basicbit.cn/2018/11/12/2018-11-14-C++异常处理的二次封装/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-12-16T13:57:33.298Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/1571397583862.png" alt="1571397583862"></p><p>本文将围绕上图来介绍C++异常的数据结构。</p><p>在C++中如果函数中包含异常处理，将会在此函数中的开始部分注册一个异常回调函数，当函数中有异常抛出的时候，便会调用这个回调函数，也就是在SEH中注册一个函数（异常回调函数）。</p><p>这个异常回调函数指向的地址的汇编码通常是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00D963A4  mov         eax,0D9A064h  </span><br><span class="line">00D963A9  jmp         ___CxxFrameHandler3 (0D910FFh)</span><br></pre></td></tr></table></figure><p>很明显代码中的eax的值保存了关键信息。</p><p>这个0D9A064h所指向的地址就是上图中的FuncInfo结构体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FuncInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD magicNumber; <span class="comment">//编译器生成的固定数字</span></span><br><span class="line">    DWORD maxState; <span class="comment">//最大栈展开数的下标值</span></span><br><span class="line">    DWORD pUnwindMap; <span class="comment">//指向栈展开函数表的指针，指向UnwindMapEntry表结构</span></span><br><span class="line">    DWORD dwTryCount; <span class="comment">//try块的数量</span></span><br><span class="line">    DWORD pTryBlockMap; <span class="comment">//try块列表，指向TryBlockMapEntry结构体</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个struct包含了两个struct，分别为UnwindMapEntry和TryBlockMapEntry。</p><p>先来看看UnwindMapEntry，UnwindMapEntry表配合maxState项来使用。</p><p>maxState记录了异常发生时try块展开的次数，展开时执行的函数由UnwindMapEntry表结构记录，结构体信息如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在try块展开的过程中，可能存在多个对象，每个对象的析构信息会以数组的形式记录。</p><p>toState用来判断结构是否位于数组中，lpFuncAction保存析构函数所在的地址。</p><p>TryBlockMapEntry结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TryBlockMapEntry</span>&#123;</span></span><br><span class="line">    DWORD tryLow  ;<span class="comment">//try块的最小状态索引，用于范围检查</span></span><br><span class="line">    DWORD tryHigh ;<span class="comment">//try块的最大状态索引，用于范围检查</span></span><br><span class="line">    DWORD catchHigh ;<span class="comment">//catch块的最高状态索引，用域范围检查</span></span><br><span class="line">    DWORD dwCatchCount; <span class="comment">//catch块个数</span></span><br><span class="line">    DWORD pCatchHandlerArray ; <span class="comment">//catch块的描述，指向_msRttiDscr表结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个struct用于判断异常产生在哪个try块中。t</p><p>ryLow和tryHigh用于检查长生的异常是否来源于try块中。</p><p>catchHigh用于匹配catch块时的检查项。</p><p>每个catch块都会对应一个_msRttiDscr表结构，保存在pCatchHandlerArray指向的地址中（数组方式存放）。</p><p>再来看看_msRttiDscr吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">msRttiDscr</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD nFlag ;<span class="comment">//用域catch块的匹配检查</span></span><br><span class="line">    DWORD pType ;<span class="comment">//catch块要捕捉的类型，指向TypeDescriptor表结构</span></span><br><span class="line">    DWORD dispCatchObjOffset; <span class="comment">//同于定位异常对象在当前EBP中的偏移位置</span></span><br><span class="line">    DWORD CatchProc; <span class="comment">//catch块的首地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nFlag同来检查catch块匹配的类型，含义值如下：</p><ul><li>1：常量</li><li>2：变量</li><li>4：未知</li><li>8：引用</li></ul><p>此结构中的pType和CatchProc为关键数据，当抛出异常对象时，需要赋值抛出的异常对象信息，dispCatchObjOffset用于定位异常对象在当前EBP中的偏移位置。</p><p>CatchProc项中保存了异常处理catch块的首地址，这样在匹配异常后，就可以正确的执行catch语句块，异常的匹配信息记录在pType所指向的结构中，结构信息如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当异常发生时，就可以通过以上信息于抛出异常时的信息进行对比，得到对应表的结构，最后通过_msRttiDscr表中的CatchProc项得到catch块的首地址。从而走到正确的catch块中。</p><p>现在我们再来说说throw吧，抛出异常时的代码通常如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00D918BC  push        offset __TI1H (0D9A094h)  </span><br><span class="line">00D918C1  lea         eax,[ebp-0F0h]  </span><br><span class="line">00D918C7  push        eax  </span><br><span class="line">00D918C8  call        __CxxThrowException@8 (0D913A7h)</span><br></pre></td></tr></table></figure><p>在抛出一场函数时传递了一个全局参数__TI1H。</p><p>这个地址中指向就是抛出异常时需要的结构信息ThrowInfo：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述结构体包含了类型信息，用于匹配抛出的异常类型。</p><p>nFlag = 1= 常量类型异常</p><p>nFlag = 2 = 变量类型异常</p><p>由于在try块中发生异常后不会再反汇try块中，pDestructor的作用就是记录try块中的异常对象的析构函数地址，在异常处理完成后调用。</p><p>抛出异常所对应的catch块的类型信息就被记录在pCatchTableTypeArray所指向的结构中。</p><p>结构体CatchTableTypeArray如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ppCatchTableType指向指针数组，里面保存了CatchTableType的地址列表。</p><p>dwCount来描述数组中有多少个元素。</p><p>来看看CatchTableType里面有什么：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还记得上文中的TypeDescriptor结构吗，在异常处理的时候，可以与上述结构中的pTypeInfo进行对比，并找到正确的catch块。</p><p>flag标记用于判断异常对象属于那种类型，类如，指针、引用等。</p><p>标记值含义如下：</p><ul><li>0x1：简单类型复制</li><li>0x2：已被捕获</li><li>0x4：有虚表基类复制</li><li>0x8：指针和引用类型复制</li></ul><p>如果异常类型是对象，那么就会把他们的结构信息存储下来，存储在thisDisPlacement中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上就是C++异常处理所用到的所有的数据结构，建议读者阅读结束后，再看下文首中的图片加深记忆。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/1571397583862.png&quot; alt=&quot;1571397583862&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文将围绕上图来介绍C++异常的数据结构。&lt;/p&gt;
&lt;p&gt;在C++中如果函数中包含异常处理，将会在此函数中的开始部分注册一个异常回调函数，当函数中有异
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>从继承的角度出发再探多态</title>
    <link href="https://www.basicbit.cn/2018/11/12/2018-11-12-%E4%BB%8E%E7%BB%A7%E6%89%BF%E7%9A%84%E8%A7%92%E5%BA%A6%E5%86%8D%E6%9D%A5%E8%81%8A%E8%81%8A%E5%A4%9A%E6%80%81%E5%90%A7/"/>
    <id>https://www.basicbit.cn/2018/11/12/2018-11-12-从继承的角度再来聊聊多态吧/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-12-16T13:59:01.710Z</updated>
    
    <content type="html"><![CDATA[<p>我们先通过一段代码来理解继承的底层实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBase</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CBase() &#123;&#125;;</span><br><span class="line">~CBase() &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetNumber</span><span class="params">(<span class="keyword">int</span> nNum)</span> </span>&#123; nNumber = nNum; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> nNumber;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CChild</span> :</span> CBase &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowNumber</span><span class="params">(<span class="keyword">int</span> nNum)</span> </span>&#123;</span><br><span class="line">SetNumber(nNum);</span><br><span class="line">nNumberChild = nNum + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, nNumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> nNumberChild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CChild cChild;</span><br><span class="line">cChild.ShowNumber(<span class="number">23</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中子类虽然没有写构造函数和析构函数，但是编译器还是自动生成了它们，子类构造函数、析构函数和父类的构造函数、析构函数调用顺序如下：</p><p>父类构造函数 -&gt; 子类构造函数 -&gt; 子类析构函数 -&gt; 父类析构函数</p><p>我们关注的重点并不在这里，而是子类对象和父类对象的关系。</p><p>走进ShowNumber函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">0099198D  mov         eax,dword ptr [ebp+8]  ;参数nNum</span><br><span class="line">00991990  push        eax  ;参数压栈</span><br><span class="line">00991991  mov         ecx,dword ptr [ebp-8]  ;获取this指针</span><br><span class="line">00991994  call        0099102D  ;调用父类的SetNumber</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>在子类调用父类函数时，直接传递了子类的this指针，我们走进这个SetNumber ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">0099192D  mov         eax,dword ptr [ebp-8]  ;获取this指针</span><br><span class="line">00991930  mov         ecx,dword ptr [ebp+8]  ;取出nNum的值</span><br><span class="line">00991933  mov         dword ptr [eax],ecx  ;将nNum赋值到this指针的前4个字节也就是代码中的nNumber变量</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>执行结束回到ShowNumber继续执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">00991994  call        0099102D  ;调用父类的SetNumber</span><br><span class="line"></span><br><span class="line">00991999  mov         eax,dword ptr [ebp+8]  ;取出参数nNum</span><br><span class="line">0099199C  add         eax,1  ;临时nNum + 1</span><br><span class="line">0099199F  mov         ecx,dword ptr [ebp-8]  ;获取this指针</span><br><span class="line">009919A2  mov         dword ptr [ecx+4],eax  ;赋值到nNumberChild</span><br><span class="line"></span><br><span class="line">009919A5  mov         eax,dword ptr [ebp-8]  ;取出this指针</span><br><span class="line">009919A8  mov         ecx,dword ptr [eax]  ;取出nNumber</span><br><span class="line">009919AA  push        ecx  ;压栈nNumber</span><br><span class="line">009919AB  push        998B30h  ;压栈字符串</span><br><span class="line">009919B0  call        00991050  ;调用printf</span><br><span class="line">009919B5  add         esp,8</span><br></pre></td></tr></table></figure><p>由此我们看出父类的nNumber赋值到this的前4个字节，而子类的nNumberChild赋值到this的第四个字节开始的后面四个字节。</p><p>那么此时this的内存结构如下图：</p><p><img src="/img/1571140201271.png" alt="1571140201271"></p><p>由此，我们可以总结出，父类对象在子类对象开始处，那么将上例中的CChild的类修改为下面的样子，则他们的内存结构时完全一样的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CChild</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowNumber</span><span class="params">(<span class="keyword">int</span> nNum)</span> </span>&#123;</span><br><span class="line">SetNumber(nNum);</span><br><span class="line">nNumberChild = nNum + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, nNumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CBase cBase;</span><br><span class="line"><span class="keyword">int</span> nNumberChild;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种内存结构的优势是什么？</p><p>很明显，子类对象调用父类的函数，直接传递子类的对象地址就可以了，那么子类对象指针可以强制转换为父类对象指针来使用，反之则不行。</p><p><strong>——————-&gt;分割线</strong></p><p>再来聊聊多态，上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cBase</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cBase() &#123;&#125;;</span><br><span class="line"><span class="keyword">virtual</span> ~cBase() &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"I am cBase\n"</span>); &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cChild0</span> :</span> cBase&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cChild0() &#123;&#125;;</span><br><span class="line"><span class="keyword">virtual</span> ~cChild0() &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"I am cChild0\n"</span>); &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cChild1</span> :</span> cBase&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cChild1() &#123;&#125;;</span><br><span class="line"><span class="keyword">virtual</span> ~cChild1() &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"I am cChild1\n"</span>); &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoPrint</span><span class="params">(cBase* pBase)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pBase-&gt;Print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cChild0 cCCHild0;</span><br><span class="line">cChild1 cCCHild1;</span><br><span class="line"></span><br><span class="line">GoPrint((cBase*)&amp;cCCHild0);</span><br><span class="line">GoPrint((cBase*)&amp;cCCHild1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看看输出：</p><p><img src="/img/1571141767552.png" alt="1571141767552"></p><p>是不是意料之中的结果？</p><p>来看看内部实现吧，先从cChild0的构造函数开始吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">00D7183F  pop         ecx  </span><br><span class="line">00D71840  mov         dword ptr [this],ecx  </span><br><span class="line">00D7184D  mov         ecx,dword ptr [this]  ;以上为this指针操作</span><br><span class="line">00D71850  call        cBase::cBase (0D713EDh)  ;调用父类构造函数</span><br><span class="line">00D71855  mov         eax,dword ptr [this]  ;取出this指针</span><br><span class="line">00D71858  mov         dword ptr [eax],offset cChild0::`vftable&apos; (0D78B54h) ;虚表赋值 </span><br><span class="line">00D7185E  mov         eax,dword ptr [this] ;返回this指针</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>首先调用了父类的构造函数，然后赋值虚表为本类（cChild0）的虚表。</p><p>走进cBase的构造函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">00D717DF  pop         ecx  </span><br><span class="line">00D717E0  mov         dword ptr [this],ecx  </span><br><span class="line">00D717ED  mov         eax,dword ptr [this]  ;以上为this指针操作</span><br><span class="line">00D717F0  mov         dword ptr [eax],offset cBase::`vftable&apos; (0D78B34h)  ;初始化虚表</span><br><span class="line">00D717F6  mov         eax,dword ptr [this] ;返回this指针</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>在构造函数中只做一件事，就是赋值虚表为本类（cBase）的虚表。</p><p>总结下，在cChild0的构造函数中做了以下的事情：</p><p>调用父类构造函数 -&gt; 在父类的构造函数中设置虚表为本类(cBase)的虚表 -&gt; 设置虚表为本类的（cChild0）虚表 </p><p><strong>需要注意的是，在上文中设置两次虚表都是cChild0 this指针的前四个字节。</strong></p><p>在cChild1中做了同样的事情，就不再次赘述了。</p><p>那么现在已经很清晰了，这两个子类对象在构造函数调用之后会将虚表都设成自己的虚表。</p><p>现在我们来看看GoPrint函数吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">00D725E8  mov         eax,dword ptr [pBase]  ;取出参数，传递进来的对象</span><br><span class="line">00D725EB  mov         edx,dword ptr [eax]  ;取出虚表</span><br><span class="line">00D725ED  mov         esi,esp  </span><br><span class="line">00D725EF  mov         ecx,dword ptr [pBase]  ;设置this指针</span><br><span class="line">00D725F2  mov         eax,dword ptr [edx+4]  ;根据虚表偏移取出虚函数</span><br><span class="line">00D725F5  call        eax  ;调用虚函数</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>GoPrint函数就很清晰了，直接取出虚表根据偏移调用虚函数，也就理解了程序上面的输出。</p><p>现在我们在说说在《我们来聊聊C++多态吧，理解它，并找到它》中我们没有说到的内容，为什么在虚构函数中，要对多态表重新赋值。</p><p>在上例中，析构函数的执行顺序如下：</p><p>子类析构函数 -&gt; 父类析构函数               </p><p>那么问题出现了，假设在这两个析构函数中同时调用虚函数，如果在析构函数中没有对虚函数表重新赋值，那么在父类的析构函数中就会调用子类的析构函数，而这个时候子类也许有一些资源已经释放了，那么问题就已经很清晰了，内存泄漏！</p><p><img src="/img/1571159873270.png" alt="1571159873270"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们先通过一段代码来理解继承的底层实现。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基于SEH二次封装的异常流程与识别</title>
    <link href="https://www.basicbit.cn/2018/11/12/2018-11-14-C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E6%B5%81%E7%A8%8B%E4%B8%8E%E8%AF%86%E5%88%AB/"/>
    <id>https://www.basicbit.cn/2018/11/12/2018-11-14-C++异常处理的流程与识别/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-12-16T13:54:28.399Z</updated>
    
    <content type="html"><![CDATA[<p>在茫茫的汇编中，怎么来识别try结构呢？</p><p>在看代码之前我们先连简单的看下try的处理流程吧</p><ul><li>函数入口设置回调函数</li><li>函数的异常抛出使用了__CxxThrowException函数，此函数包含了两个参数，分别是抛出一场关键字的throw的参数的指针，另一个抛出信息类型的指针（ThrowInfo *）。</li><li>在异常回调函数中，可以得到异常对象的地址和对应ThrowInfo数据的地址以及FunInfo表结构的地址。根据记录的异常类型，进行try块的匹配工作</li><li>没找到try块怎么办？先调用异常对象的析构函数，然后反汇ExcetionContinueSearch，继续反回到SEH继续执行。</li><li>找到了try块？通过TryBlockMapEntry结构中的pCatch指向catch信息，用ThrowInfo结构中的异常类型遍历查找相匹配的catch块，比较关键字名称，找到有效的catch块。</li><li>然后进行栈展开。</li><li>析构try块中的对象</li><li>跳转到catch块中执行</li><li>调用_JumpToContinuation函数，返回catch语句块的结束地址。</li></ul><p>上面的步骤，就是典型的异常处理的顺序。</p><p>光看文字多无趣，上代码 - 实例分析，我们来跑一遍：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CExcepctionBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CExcepctionBase()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"CExcepctionBase() \r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~CExcepctionBase()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"~CExcepctionBase()\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CExcepctionDiv0</span> :</span> <span class="keyword">public</span> CExcepctionBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CExcepctionDiv0()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"CExcepctionDiv0()\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~CExcepctionDiv0()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"~CExcepctionDiv0()\r\n"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取错误码</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> * <span class="title">GetErrorInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"CExcepctionDiv0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_nErrorId ;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CExcepctionAccess</span> :</span> <span class="keyword">public</span> CExcepctionBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CExcepctionAccess()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"CExcepctionAccess()\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">virtual</span> ~CExcepctionAccess()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"~CExcepctionAccess()\r\n"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取错误码</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> * <span class="title">GetErrorInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"CExcepctionAccess"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestException</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="number">3.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">'3'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="number">3.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> CExcepctionDiv0();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> CExcepctionAccess();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">CExcepctionBase cExceptBase;</span><br><span class="line"><span class="keyword">throw</span> cExceptBase;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch int \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">float</span> f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch float \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">char</span> c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch char \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">double</span> d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch double \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(CExcepctionBase cBase)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch CExcepctionBase \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(CExcepctionAccess cAccess)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch int \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(...)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch ... \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">TestException(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看看函数开始的代码吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text:004011A5                 push    offset SEH_4011A0</span><br><span class="line">.text:004011AA                 mov     eax, large fs:0</span><br><span class="line">.text:004011B0                 push    eax</span><br><span class="line">.text:004011B1                 sub     esp, 40h</span><br><span class="line">.text:004011B4                 push    ebx</span><br><span class="line">.text:004011B5                 push    esi</span><br><span class="line">.text:004011B6                 push    edi</span><br><span class="line">.text:004011B7                 mov     eax, ___security_cookie</span><br><span class="line">.text:004011BC                 xor     eax, ebp</span><br><span class="line">.text:004011BE                 push    eax</span><br><span class="line">.text:004011BF                 lea     eax, [ebp+var_C]</span><br><span class="line">.text:004011C2                 mov     large fs:0, eax</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>函数开始将异常回调函数压栈，在上文结尾的部分将此函数加入SEH中，这里并不讲解SEH相关信息，除了设置异常回调函数，和参数压栈还设置了security_cookie，防止栈溢出的检查数据，在此同样不予讲述。</p><p>我们走进SEH_4011A0看下实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">.text:0040CAB1                 mov     eax, offset stru_40F53C</span><br><span class="line">.text:0040CAB6                 jmp     ___CxxFrameHandler3</span><br></pre></td></tr></table></figure><p>无疑此项就是编译器产生的异常回调函数。</p><p>继续看异常抛出的部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">.text:004011CE                 mov     [ebp+var_4], 0</span><br><span class="line">.text:004011D5                 cmp     eax, 1</span><br><span class="line">.text:004011D8                 jnz     short loc_4011EB</span><br><span class="line">.text:004011DA                 mov     [ebp+var_18], eax</span><br><span class="line">.text:004011DD                 push    offset __TI1H  ;ThrowInfo</span><br><span class="line">.text:004011E2                 lea     eax, [ebp+var_18];获取参数</span><br><span class="line">.text:004011E5                 push    eax;压栈参数</span><br><span class="line">.text:004011E6                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>熟悉的__CxxThrowException？没错他就是用来抛出异常的函数。</p><p>这里的__TI1H就是ThrowInfo结构，那么var_18也就是throw关键字后面跟随的数据。</p><p>后面连续的几个throw语句也差不多。</p><p>直到抛出对象的时候，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">......</span><br><span class="line">.text:0040123A loc_40123A:                             ; CODE XREF: sub_4011A0+81↑j</span><br><span class="line">.text:0040123A                 cmp     eax, 5</span><br><span class="line">.text:0040123D                 jnz     short loc_401255</span><br><span class="line">.text:0040123F                 lea     ecx, [ebp+var_34]</span><br><span class="line">.text:00401242                 call    sub_401030</span><br><span class="line">.text:00401247                 push    offset __TI2?AVCExcepctionDiv0@@ ;</span><br><span class="line">.text:0040124C                 lea     ecx, [ebp+var_34]</span><br><span class="line">.text:0040124F                 push    ecx</span><br><span class="line">.text:00401250                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>这里很在抛出异常之前调用了一个函数sub_401030，这个函数的作用就是设置var_34的值，后面与前面的基本相同。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">.text:00401048                 mov     dword ptr [esi], offset ??_7CExcepctionDiv0@@6B@ ; const CExcepctionDiv0::`vftable&apos;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>IDA友情提示，这是一个虚表。</p><p>这两个函数代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.text:004010A0 ; int __thiscall sub_4010A0(void *, char)</span><br><span class="line">.text:004010A0 sub_4010A0      proc near               ; DATA XREF: .rdata:const CExcepctionDiv0::`vftable&apos;↓o</span><br><span class="line">.text:004010A0</span><br><span class="line">.text:004010A0 arg_0           = byte ptr  8</span><br><span class="line">.text:004010A0</span><br><span class="line">.text:004010A0                 push    ebp</span><br><span class="line">.text:004010A1                 mov     ebp, esp</span><br><span class="line">.text:004010A3                 push    esi</span><br><span class="line">.text:004010A4                 mov     esi, ecx</span><br><span class="line">.text:004010A6                 push    offset aCexcepctiondiv ; &quot;~CExcepctionDiv0()\r\n&quot;</span><br><span class="line">.text:004010AB                 mov     dword ptr [esi], offset ??_7CExcepctionDiv0@@6B@ ; const CExcepctionDiv0::`vftable&apos;</span><br><span class="line">.text:004010B1                 call    _printf</span><br><span class="line">.text:004010B6                 push    offset aCexcepctionbas ; &quot;~CExcepctionBase()\r\n&quot;</span><br><span class="line">.text:004010BB                 mov     dword ptr [esi], offset ??_7CExcepctionBase@@6B@ ; const CExcepctionBase::`vftable&apos;</span><br><span class="line">.text:004010C1                 call    _printf</span><br><span class="line">.text:004010C6                 add     esp, 8</span><br><span class="line">.text:004010C9                 test    [ebp+arg_0], 1</span><br><span class="line">.text:004010CD                 jz      short loc_4010D8</span><br><span class="line">.text:004010CF                 push    esi             ; void *</span><br><span class="line">.text:004010D0                 call    ??3@YAXPAX@Z    ; operator delete(void *)</span><br><span class="line">.text:004010D5                 add     esp, 4</span><br><span class="line">.text:004010D8</span><br><span class="line">.text:004010D8 loc_4010D8:                             ; CODE XREF: sub_4010A0+2D↑j</span><br><span class="line">.text:004010D8                 mov     eax, esi</span><br><span class="line">.text:004010DA                 pop     esi</span><br><span class="line">.text:004010DB                 pop     ebp</span><br><span class="line">.text:004010DC                 retn    4</span><br><span class="line">.text:004010DC sub_4010A0      endp</span><br></pre></td></tr></table></figure><p>在004010C9地址处做了一个判断，根据传入参数来决定是否释放空间(标准的虚析构函数)，因为IDA载入了pdb文件，所以通过IDA的注释可以很清晰的理解这个函数是CExcepctionDiv0的析构函数。</p><p>另一个函数代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:00401090</span><br><span class="line">.text:00401090 sub_401090      proc near               ; DATA XREF: .rdata:0040D180↓o</span><br><span class="line">.text:00401090                 mov     eax, offset aCexcepctiondiv_1 ; &quot;CExcepctionDiv0&quot;</span><br><span class="line">.text:00401095                 retn</span><br><span class="line">.text:00401095 sub_401090      endp</span><br></pre></td></tr></table></figure><p>这个函数就很简单了直接返回字符串“CExcepctionDiv0”。</p><p>在以上的代码来看识别throw语句并不困难，只要找到__CxxThrowException函数就可以找到throw语句了，并根据throw传递的参数，可以断定抛出的数据类型。</p><p>来看看catch吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:00401295 loc_401295:                             ; DATA XREF: .rdata:0040F570↓o</span><br><span class="line">.text:00401295 ;   catch(float) // owned by 4011CE</span><br><span class="line">.text:00401295                 push   offset aCatchFloat ; &quot;catch float \n&quot;</span><br><span class="line">.text:0040129A                 call    _printf</span><br><span class="line">.text:0040129F                 add     esp, 4</span><br><span class="line">.text:004012A2                 mov     eax, offset loc_4012A8</span><br><span class="line">.text:004012A7                 retn</span><br><span class="line">.text:004012A7 ;   &#125; // starts at 4011CE</span><br><span class="line">.text:004012A7 ; &#125; // starts at 4011A0</span><br></pre></td></tr></table></figure><p>同样IDA通过pdb文件为我们做出了友好的注释，但是所有的catch语句都会具有以下特点：</p><ul><li>没有平衡函数开始的堆栈</li><li>返回时将eax赋值为一个地址</li></ul><p>通过这两个特点来找到catch语句块是不是很轻松呢，毕竟不平衡堆栈就返回的情况可以说是极少数了吧。</p><p>其他的catch我们就不看了，代码都是类似的，那么赋值给eax的地址里面保存了何方神圣？</p><p>来看一看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.text:004012A8 loc_4012A8:                             ; CODE XREF: sub_4011A0+107↑j</span><br><span class="line">.text:004012A8                                         ; DATA XREF: sub_4011A0+102↑o</span><br><span class="line">.text:004012A8                 mov     ecx, [ebp+var_C]</span><br><span class="line">.text:004012AB                 mov     large fs:0, ecx</span><br><span class="line">.text:004012B2                 pop     ecx</span><br><span class="line">.text:004012B3                 pop     edi</span><br><span class="line">.text:004012B4                 pop     esi</span><br><span class="line">.text:004012B5                 pop     ebx</span><br><span class="line">.text:004012B6                 mov     esp, ebp</span><br><span class="line">.text:004012B8                 pop     ebp</span><br><span class="line">.text:004012B9                 retn</span><br></pre></td></tr></table></figure><p>这样看起来是不是合理多了，没错这个地址的代码就是用来恢复函数开始压入到堆栈的数据（平衡堆栈）。</p><p>我们也可以通过以下的规则来找出catch语句块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CATCH0_BEGIN: //IDA中的地址标号</span><br><span class="line">....  //CATCH实现代码</span><br><span class="line">mov eax, CATCH_END ; 函数平衡堆栈的代码</span><br><span class="line">retn</span><br><span class="line"></span><br><span class="line">PS:如果同一个函数包含多个catch语句块，那么后面他们一定时挨着的。</span><br></pre></td></tr></table></figure><p>避免篇幅庞大，将不在列出后续catch代码。</p><p><strong>结构体一揽？从ThrowInfo开始看起吧：</strong></p><p>还记得上文中提过的__TI1H吗，这是IDA为我们生成的名字，他就是我们要找的ThrowInfo，双击进去看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__TI1H          ThrowInfo &lt;0, 0, 0, 40F5D0h&gt;</span><br></pre></td></tr></table></figure><p>这个结构体是我自己创建的，为了方便观察。</p><p>根据ThrowInfo的定义（具体请看我的上一篇文章），第四个参数也就是40F5D0h便是CatchTableTypeArray。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.rdata:0040F5D0 __CTA1H         dd 1                    ; count of catchable type addresses following</span><br><span class="line">.rdata:0040F5D4                 dd offset __CT??_R0H@8 ; catchable type &apos;int&apos;</span><br></pre></td></tr></table></figure><p>这个结构体的第二项是pTypeInfo，指向异常类型结构TypeDescriptor，双击进去看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.rdata:0040F5D8 __CT??_R0H@8    dd CT_IsSimpleType      ; DATA XREF: .rdata:0040F5D4↑o</span><br><span class="line">.rdata:0040F5D8                                         ; attributes</span><br><span class="line">.rdata:0040F5DC                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor&apos;</span><br></pre></td></tr></table></figure><p>上面代码的第二个dd是识别错误，它实际上是.H代表的是int类型，IDA为ThrowInfo命名的最后一个字母对应的就是这个类型，当然除了.H还有其他字母例如：</p><ul><li>.M = float</li><li>.D = char</li><li>.N = double</li><li>……</li></ul><p><strong>从catch块入手，得到catch语句的信息</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:00401295 loc_401295:                             ; DATA XREF: .rdata:0040F570↓o</span><br><span class="line">.text:00401295                 push    offset aCatchFloat ; &quot;catch float \n&quot;</span><br><span class="line">.text:0040129A                 call    _printf</span><br><span class="line">.text:0040129F                 add     esp, 4</span><br><span class="line">.text:004012A2                 mov     eax, offset loc_4012A8</span><br><span class="line">.text:004012A7                 retn</span><br></pre></td></tr></table></figure><p>在loc_401295的右侧我们看到IDA给我们标出来的注释，这个注释代表此地址的引用位置，双击进去看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.rdata:0040F570                 HandlerType &lt;0, offset ??_R0M@8, -60, offset loc_401295&gt; ; float `RTTI Type Descriptor&apos;</span><br></pre></td></tr></table></figure><p>这个HandlerType实际就是_msRttiDscr，根据结构定义，最后一项就是CatchProc，也就是catch语句块起始处的地址。</p><p>实际上在0040F570附近定义了此函数中所有的catch块，可以通过这一个_msRttiDscr找到此函数中所有_msRttiDscr的信息，也就可以找到所有的catch语句块了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在茫茫的汇编中，怎么来识别try结构呢？&lt;/p&gt;
&lt;p&gt;在看代码之前我们先连简单的看下try的处理流程吧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数入口设置回调函数&lt;/li&gt;
&lt;li&gt;函数的异常抛出使用了__CxxThrowException函数，此函数包含了两个参数，分别是抛出一场关
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 多态的实现</title>
    <link href="https://www.basicbit.cn/2018/11/11/2018-11-11-%E6%88%91%E4%BB%AC%E6%9D%A5%E8%81%8A%E8%81%8AC++%E5%A4%9A%E6%80%81%E5%90%A7%EF%BC%8C%E7%90%86%E8%A7%A3%E5%AE%83%EF%BC%8C%E5%B9%B6%E6%89%BE%E5%88%B0%E5%AE%83/"/>
    <id>https://www.basicbit.cn/2018/11/11/2018-11-11-我们来聊聊C++多态吧，理解它，并找到它/</id>
    <published>2018-11-10T16:00:00.000Z</published>
    <updated>2019-12-16T13:54:18.795Z</updated>
    
    <content type="html"><![CDATA[<p>我们通过一段代码，先来了解多态的底层实现 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cVirtual</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func0</span><span class="params">()</span> </span>&#123;&#125;;  </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    cVirtual cv;  </span><br><span class="line">    cv.func0();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常简单的类，如果这里没有多态函数的话这个类对象实际只占1个字节（占位字节），有了多态函数后类对象里会保存一张多态函数的地址表，那么这个对象就会占4个字节。</p><p>来看反汇编。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cVirtual cv;</span><br><span class="line">005719B3  lea         ecx,[ebp-0Ch];分配对象占用内存</span><br><span class="line">005719B6  call        005713C5;调用构造函数</span><br></pre></td></tr></table></figure><p>​             </p><p>CALL指令调用的就是编译器为这个类生成的构造函数，这么简单的类也要有构造函数？？，猜的没错，就是用来初始化多态表的，走进去看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......  </span><br><span class="line">0057179F  pop         ecx  ;恢复this指针</span><br><span class="line">005717A0  mov         dword ptr [ebp-8],ecx ;保存this指针</span><br><span class="line">005717A3  mov         eax,dword ptr [ebp-8]  ;取出this指针</span><br><span class="line">005717A6  mov         dword ptr [eax],577BF8h  ;多态表初始化</span><br><span class="line">005717AC  mov         eax,dword ptr [ebp-8]  ;返回this指针</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>我把多余的代码删掉了，构造函数只做了这一件事情，就是把多态表的指针赋值到对象地址中，也就是文中的this指针。</p><p>由上面的代码可以看出，此类对象的内存应该如下图：</p><p><img src="/img/1571234058141.png" alt="1571234058141"></p><p>我们看下 0x577BF8 中保存的内容：</p><p><img src="/img/1571234067497.png" alt="1571234067497"></p><p>整理一下是这样的，0x005713C0，0x005713BB，0x0000000。</p><p>那么这两个有效地址就是我们代码中的两个多态函数，我们来验证下。</p><p><img src="/img/640.png" alt="img"></p><p>so，我们可以总结出，<strong>对象的虚表指针在以对象为基址的前4个字节中，虚表指针指向的是一个地址表，地址表中的每一个地址对应这个类中的每一个虚函数。</strong></p><p>在上例中，析构函数中做了和构造函数一模一样的事情，因为在构造函数中已经对虚表赋值了，在析构函数中是不是有点多此一举？并不是，析构函数中重新赋值是防止读取的虚表不是自己的虚表，读者可以从继承的角度出发，来思考这个问题。</p><p>搞不懂去看我写的继承的文章吧，可能还没更。</p><p><strong>重点来了：</strong></p><ul><li><strong>虚表信息是在编译后会被链接到二进制文件中，so 虚表是一个固定地址。</strong></li><li><strong>虚表中的虚函数地址排序顺序依据虚函数在类中的声明顺序而定。</strong></li><li><strong>当虚函数被访问时，会根据对象的首地址，取出虚表地址，在取出虚表元素，需要多次寻址才能完成。</strong></li><li><strong>通过间接寻址访问虚表，只发生在使用对象的指针或者引用调用虚函数的时候才会发生，当使用对象调用虚函数，不需要查表访问。（调用自身的函数，未构成多态，查虚表只会降低效率）</strong></li></ul><p><strong>——————————-&gt;找到它</strong></p><p>在茫茫汇编代码中找到多态需要关注以下几点：</p><ul><li>类中隐式定义了一个数据成员</li><li>该数据成员在首地址处，并占4个字节</li><li>构造函数会将此数据成员初始化为某个数组的首地址</li><li>这个地址属于数据区，是固定地址</li><li>在这个数组内，每个元素都是函数指针</li><li>这些函数它们被调用时，第一个参数一定是this指针，注意调用约定</li><li>在这些函数内部，很有可能会对this指针使用相对间接的访问方式</li></ul><p>虚表初始化特征码（在构造或析构函数中出现）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;下面这段代码出现的函数，需要具有成员函数特征，传递对象首地址作为this指针</span><br><span class="line">lea ecx,[ebp - 8];获取对象首地址</span><br><span class="line">call xxxxxxxxh ;函数调用</span><br><span class="line">mov reg,this ;某寄存器得到对象首地址</span><br><span class="line">mov dword ptr[eax], xxxxxxxxh</span><br><span class="line">; 向对象首地址写入4字节数据，查看并确认这4字节是否为函数地址表的首地址</span><br></pre></td></tr></table></figure><p>如果上述代码出现，应该高度怀疑此函数是一个构造或析构函数。</p><p>Good job.</p><p><img src="/img/1571160018433.png" alt="1571160018433"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们通过一段代码，先来了解多态的底层实现 &lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Window PE -- 输入表</title>
    <link href="https://www.basicbit.cn/2018/11/01/2018-11-01-Windows%20PE%20%E8%BE%93%E5%85%A5%E8%A1%A8/"/>
    <id>https://www.basicbit.cn/2018/11/01/2018-11-01-Windows PE 输入表/</id>
    <published>2018-10-31T16:00:00.000Z</published>
    <updated>2019-12-16T13:52:59.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Window-PE-–-输入表"><a href="#Window-PE-–-输入表" class="headerlink" title="Window PE – 输入表"></a>Window PE – 输入表</h1><h2 id="输入表"><a href="#输入表" class="headerlink" title="输入表"></a>输入表</h2><p>可执行文件使用来自其他DLL的代码或数据的动作称为输入。当PE文件被载入时，Windows加载器的工作之一就是定位所有被输入的函数和数据，并让正在入的文件可以使用那些地址。这个过程是通过PE文件的输入表（Impo1tTable，简称“IT”，也称导人表）完成的。输入表中保存的是函数名和其驻留的DLL名等动态链接所需的信息。输入表在软件外亮技术中的地位非常重要，读者在研究与外壳相关的技术时一定要彻底掌握这部分知识。</p><h2 id="输入表的调用"><a href="#输入表的调用" class="headerlink" title="输入表的调用"></a>输入表的调用</h2><p>在代码分析或编程中经常会遇到输入函数（ImportFunctions，或称导人函数）。输入函数就是被程序调用但其执行代码不在程序中的函数，这些函数的代码位于相关的DLL文件中，在调用者程序中只保留相关的函数信息，例如函数名、DLL文件名等。对磁盘上的PE文件来说，它无法得知这些输入函数在内存中的地址。只有当PE文件载入内存后，Windows加载器才将相关DLL载人，并将调用输入函数的指令和函数实际所处的地址联系起来。</p><p>当应用程序调用一个DLL的代码和数据时，它正在被隐式地链接到DLL，这个过程完全由Windows加载器完成。另一种链接是运行期的显式链接，这意味着必须确定目标DLL已经被加载，然后寻找API的地址，这几乎总是通过调用LoadLibra巧和GetProcAddress完成的。</p><p>当隐含地链接一个API时，类似LoadLibrary和GetProcAddress的代码始终在执行，只不过这是由Windows加载器自动完成的。Windows加载器还保证了PE文件所需的任何附加的DLL都巳载入例如，Windows2000/XP上每个由VisualC＋＋创建的正常程序都要链接KERNEL32.DLL，而它又从NTDLL.DLL中输入函数。同样，如果链接了GDI32.DLL，它又依赖USER32、ADVAPI32、NTDLL和KERNEL32等DLL的函数，那么都要由Windows加载器来保证载入并解决输入问题。</p><p>在PE文件内有一组数据结构，它们分别对应于被输入的DLL。每一个这样的结构都给出了被输入的DLL的名井指向一组函数指针。这组函数指针称为输入地址表（ImportAddressTable,IAT）。每一个被引人的API在IAT里都有保留的位置，在那里它将被Windows加载器写人输入函数的地址。最后一点特别重要：一旦模块被载入，IAT中将包含所要调用输入函数的地址。</p><p>把所有输入函数放在IAT中的同一个地方是很有意义的。这样，无论在代码中调用一个输入函数多少次，都会通过IAT中的同一个函数指针来完成。</p><p>现在看看怎样调用一个输入函数。需要考虑两种情况，即高效和低效。最好的情况是像下面这样，直接调用00402010h处的函数，00402010h位于IAT中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL  DWORD  PTR  [00402010]</span><br></pre></td></tr></table></figure><p>而实际上，对一个被输入的API的低效调用像下面这样（实例PE.exe中调用LoadlconA函数的代码）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Call  00401164</span><br><span class="line">...</span><br><span class="line">:00401164</span><br><span class="line">Jmp  dword  ptr  [00402010]</span><br></pre></td></tr></table></figure><p>这种情况下，CALL令把控制权转交给一个子程序，子程序中的JMP指令跳转到IAT中的00402010h。简单地说就是：使用5字节的额外代码；由于使用了额外的JMP指令，将花费更多的执行时间。</p><p>有人可能会问：为什么要采用此种低效的方法？对这个问题有一很好的解释：编译器元法区分输入函数调用和普通函数调用。对每个函数调用，编译器使用同样形式的CALL指令，示例如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL  XXXXXXXX</span><br></pre></td></tr></table></figure><p>“xxxxxxxx”是一个由链接器填充的实际地址。注意，这条指令不是从函数指针来的，而是从代码中的实际地址来的。为了实现因果平衡，链接器必须产生一块代码来取代“xxxxxxxx”，简单的方法就是像上面一样调用一个JMPstub。</p><p>JMP指令来自为输入函数准备的输入库。如果读者检查过输入库，在输入函数名字的关联处就会发现与上面的JMPstub相似的指令，即在默认情况下，对被输入API的调用将使用低效的形式。</p><p>如何得到优化的形式？答案来自一个给编译器的提示形式。可以使用修饰函数的＿declspec(dllimport）来告诉编译器，这个函数来自另一个DLL，这样编译器就会产生指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL  DWORD  PTR  [XXXXXXXX]</span><br></pre></td></tr></table></figure><p>而不是指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL  XXXXXXXX</span><br></pre></td></tr></table></figure><p>此外，编译器将给函数加上“＿imp＿＂前缀，然后将函数送给链接器，这样就可以直接把一imp_xxx送到IAT中，而不需要调用JMPstub了。</p><p>如果要编写一个输出函数，井为它们提供一个头文件，不要忘了在函数的前面加上修饰符“_declspec(dllimport）”，在winnt.h等系统头文件中就是这样做的，示例如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_declspec(dllimport) void Foo(void)</span><br></pre></td></tr></table></figure><h3 id="输入表结构"><a href="#输入表结构" class="headerlink" title="输入表结构"></a>输入表结构</h3><p>PE文件头的可选映像头中，数据目录表的第2个成员指向输入表。入表以一个IMAGE_IMPORT_DESCRI凹、OR(IID）数组开始。每个被PE文件隐式链接的DLL都有一个IID。在这个数组中，没有字段指出该结构数组的项数，但它的最后一个单元是“NULL”，由此可以计算出该数组的项数。如，某个PE文件从两个DLL文件中引人函数，因此存在两个IID结构来描述这些DLL文件，并在两个IID结构的最后由一个内容全为0的IID结构作为结束。IID的结构如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _IMAGE_IMPORT_DESCRIPTOR &#123;</span><br><span class="line">union &#123;</span><br><span class="line">DWORD Characteristics;</span><br><span class="line">DWORD OriginalFirstThunk;//INT(Import Name Table) address (RVA)</span><br><span class="line">&#125;;</span><br><span class="line">DWORD TimeDateStamp;</span><br><span class="line">DWORD ForwarderChain;</span><br><span class="line">DWORD Name;//library name string address (RVA)</span><br><span class="line">DWORD FirstThunk;//IAT(Import Address Table) address (RVA)</span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure><ul><li>OriginalFirstThunk(Characte1istics）：包含指向输入名称表（INT）的RVA。INT是一个IMAGETHUNK_DATA结构的数组，数组中的每个MAGE_THUNK_DATA结构都指向IMAGEIMPORT_BY_NAME构，数组以一个内容为0的IMAGE_THUNK_DATA结构结束。</li><li>TimeDateStamp：一个32位的时间标志，可以忽略。</li><li>ForwarderChain：这是第l个被转向的A凹的索引，一般为0，在程序引用一个DLL中的API,而这个API又在引用其他DLL的API时使用（但这样的情况很少出现）。</li><li>Name:DLL名字的指针。它是一个以“00”结尾的ASCII字符的RVA地址该字符串包含输入的DLL名，例如“KERNEL32.DLL”USER32.DLL”。</li><li>FirstThunk：包含指向输入地址表（IAT）的RVA。IAT是一个IMAGE_THUNK_DATA结构的数、</li></ul><p>OriginalFirst 和 FirstThunk结构类似。他们分别指向两个本质上相同的数组IMAGE_THUNK_DATA，这些数组有好几种叫法，最常见的是输入名称表（ImportNameTable,INT）和输入地址表（lmpot Address Table,IAT）。如下图所示为一个可执行文件正在从USER32DLL里输入一些API。</p><p><img src="/img/1554866976205.png" alt="1554866976205"></p><p>两个数组中都有IMAGE_THUNK_DATA结构类型的元素，它是一个指针大小的联合（union）。每个IMAGE_THUNK_DATA元素对应于一个从可执行文件输入的函数。两个数组的结束都是由一个值为0的IMAGE_THUNK_DATA元素表示的。IMAGE_THUNK_DATA结构实际上是一个双字，该结构在不同时刻有不同的含义，具体如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _IMAGE_THUNK_DATA32 &#123;</span><br><span class="line">    union &#123;</span><br><span class="line">        DWORD ForwarderString;      // PBYTE  指向一个转向者字符串的RVA</span><br><span class="line">        DWORD Function;             // PDWORD 被输入的函数的内存地址</span><br><span class="line">         DWORD Ordinal;              // 被输入的 API 的序数值</span><br><span class="line">         DWORD AddressOfData;        // PIMAGE_IMPORT_BY_NAME   指向 IMAGE_IMPORT_BY_NAME</span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br><span class="line">typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</span><br></pre></td></tr></table></figure><p>IMAGE_THUNK_DATA值的最高位为1时，表示函数以序号方式输入，这时低31位（或者一个64位可执行文件的低63位）被看成一个函数序号。当双字的最高位为0时，表示函数以字符串类型的函数名方式输入，这时双字的值是一个RVA，指向一个IMAGE_lMPORT_BY_NAME结构。</p><p>IMAGE_IMPORT_BY_NAME结构仅有1个字大小，存储了一个输入函数的相关信息，结构如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　IMAGE_IMPORT_BY_NAME STRUCT</span><br><span class="line">　　Hint WORD ?</span><br><span class="line">　　Name BYTE ?</span><br><span class="line">　　IMAGE_IMPORT_BY_NAME ENDS</span><br></pre></td></tr></table></figure><ul><li>Hint：本函数在其所驻留DLL的输出表中的序号。该域被PE装载器用来在DLL的输出表里快速查询函数。该值不是必需的，一些链接器将它设为0。</li><li>Name：含有输入函数的函数名。函数名是一个ASCII字符串，以“NULL”结尾。注意，这里虽然将Name的大小以字节为单位进行定义，但其实它是一个可变尺寸域，由于没有更好的表示方法，只好在上面的定义中写成“BYTE”。</li></ul><h2 id="输入地址表"><a href="#输入地址表" class="headerlink" title="输入地址表"></a>输入地址表</h2><p>为什么会有两个并行的指针数组指向IMAGE_IMPORT_BY_NAME结构呢？第1个数组（由OriginalFirstThunk所指向）是单独的一项，不可改写，称为INT，有时也称为提示名表（Hint-nameTable）。第2个数组（由FirstThunk所指向）是由PE装载器重写的。PE装载器先搜索OriginalFirstThunk，如果找到，加载程序就迭代搜索数组中的每个指针，找出每个IMAGE_IMPORT_BY_NAME结构所指向的输入函数的地址。然后，加载器用函数真正的人口地址来替代由FirstThunk指向的IMAGE_THUNK_DATA数组里元素的值。“Jmpdwordptr[xxxxxxxx］”语句中的“［口xxxxxx］”是指FirstThunk数组中的一个人口，因此称为输入地址表（Import Address Table,IAT）。所以，当PE文件装载内存后准备执行时，图11.13己转换成如图11.14所示的状态，所有函数人口地址排列在一起。此时，输入表中的其他部分就不重要了，程序依靠IAT提供的函数地址就可以正常运行。</p><p><img src="/img/1554867171146.png" alt="1554867171146"></p><p>在某些情况下，一些函数仅由序号引出。也就是说，不能用函数名来调用它们，只能用它们的位置来调用它们。此时，IMAGE_THUNK_DATA值的低位字指示函数序数，最高有效位（MSB）设为1。微软提供了一个方便的常量IMAGE_ORDINAL_FLAG32来测试DWORD值的M钮，其值为80000000h（在PE32＋中是IMAGE_ORDINAL_FLAG64，其值为8000000000000000h）。</p><p>另一种情况是程序OrignalFirstThunk的值为0。在初始化时，系统根据FirstThunk的值找到指向函数名的地址串，根据地址串找到函数名，再根据函数名得到人口地址，然后用入口地址取代FirstThunk指向的地址串中的原值。</p><p><img src="/img/1571159894317.png" alt="1571159894317"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Window-PE-–-输入表&quot;&gt;&lt;a href=&quot;#Window-PE-–-输入表&quot; class=&quot;headerlink&quot; title=&quot;Window PE – 输入表&quot;&gt;&lt;/a&gt;Window PE – 输入表&lt;/h1&gt;&lt;h2 id=&quot;输入表&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
      <category term="PE" scheme="https://www.basicbit.cn/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的CTF小DEMO</title>
    <link href="https://www.basicbit.cn/2018/11/01/2018-11-02%20%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84CTF%E5%B0%8Fdemo/"/>
    <id>https://www.basicbit.cn/2018/11/01/2018-11-02 一个简单的CTF小demo/</id>
    <published>2018-10-31T16:00:00.000Z</published>
    <updated>2019-12-16T13:53:42.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个简单的CTF小DEMO"><a href="#一个简单的CTF小DEMO" class="headerlink" title="一个简单的CTF小DEMO"></a>一个简单的CTF小DEMO</h1><p>不说废话 ，开始看代码</p><p><img src="/img/1563290467065.png" alt="1563290467065"></p><p>main函数的开始提示输入FLAG</p><p><img src="/img/1563290577373.png" alt="1563290577373"></p><p>输入完FLAG之后进行长度判断 上图中的jnb跳转到跳转到失败输出代码，也就是说FLAG的长度小于0x1E，下面ja跳转到FLAG判断代码。</p><p>这两个cmp转换为c代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">4</span> &lt; flag &lt; <span class="number">0x1E</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/1563290874171.png" alt="1563290874171"></p><p>上图为jnb跳转的位置，输出Sorry，keep trying!，跳转到return</p><p><img src="/img/1563291020325.png" alt="1563291020325"></p><p>上图为ja跳转的位置loc_401093。</p><p>for循环判断输入的 FLAG的前四个字节是否为EIS{，上图中的变量register_header保存的ASSCII码“EIS{”，循环跳出条件为register_header的长度。</p><p><img src="/img/1563291253721.png" alt="1563291253721"></p><p>​    for循环结束又是一个判断，判断FLAG的第0x1C字节处的ASCII码是否为‘}’，如果不是输出Sorry ，keep trying !并跳转到return，那么0x1C + 1就是FLAG的长度，去掉EIS{}，真正参与计算的代码的长度为24。</p><p><img src="/img/1563291427190.png" alt="1563291427190"></p><p>上图为ja跳转的位置，传入FLAG，调用calc_register_code，判断其返回值，calc_register_code也就是真正的计算函数。</p><p><img src="/img/1563291512011.png" alt="1563291512011"></p><p>进入calc_register_code</p><p>首先判断FLAG是否大于4，如果小于等于4跳转到return。</p><p><img src="/img/1563291610231.png" alt="1563291610231"></p><p>紧接着又是一个for循环，把FLAG+4之后的数据拷贝一份拷贝到back_str</p><p><img src="/img/1563291796614.png" alt="1563291796614"></p><p>上图中黄色部分把拷贝出来的back_str最后一个字节赋值为0，也就是将 ‘}’ 修改为0，此时的back_str保存了EIS{….}，括号里的内容长度为24字节。</p><h2 id="计算部分"><a href="#计算部分" class="headerlink" title="计算部分"></a>计算部分</h2><p><img src="/img/1563292006037.png" alt="1563292006037"></p><p>for循环部分，如果循环次数大于back_str的长度跳出循环</p><p><img src="/img/1563292026464.png" alt="1563292026464"></p><p>if判断，在两个cmp中看到如果back_str[i]不是小写字母，则跳到loc_4012FF处，如果是小写字母，将这个字节进行减掉0x20转换为大写字母。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C伪代码</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">'a'</span> &lt;= back_str[i] &lt;= <span class="string">'z'</span>)</span><br><span class="line">back_str[i] -= <span class="number">0x20</span></span><br></pre></td></tr></table></figure><p>字母转换结束后，在上图的最后一行代码，将var_B0赋值为（var_B0为DWORD类型）1。</p><p><img src="/img/1563292351121.png" alt="1563292351121"></p><p>紧接着又是一个if判断，这个if判断，首先判断var_B0是否为0，不为0跳转到loc_401340处，然后判断back_str[i]是否为大写字母，如果是大写字母进行加0x20，转换为小写字母。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C伪代码</span></span><br><span class="line"><span class="keyword">if</span>(var_B0 != <span class="number">0</span> &amp;&amp; <span class="string">'A'</span> &lt;= back_str[i] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">back_str[i] += <span class="number">0x20</span></span><br></pre></td></tr></table></figure><p><img src="/img/1563292555155.png" alt="1563292555155"></p><p>字母转换之后将转换之后的字节传入到char_calc进行计算。</p><p><img src="/img/1563292601289.png" alt="1563292601289"></p><p>char_calc将传入的字节进行异或0x55，后在加上0x48返回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//c伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">char_calc</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ch |= <span class="number">0x55</span>;</span><br><span class="line">ch += <span class="number">0x48</span></span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/1563292724261.png" alt="1563292724261"></p><p>char_calc计算之后，将计算的结果和calc_code[i]进行异或计算，最后结果保存到var_AC[i]中。</p><p>calc_code 的内容如下</p><p><img src="/img/1563292853691.png" alt="1563292853691"></p><p>保存完成之后进行第二次for循环。</p><p><img src="/img/1563292932569.png" alt="1563292932569"></p><p>for循环结束后，将计算出来的结果和<img src="/img/1563295477991.png" alt="1563295477991">进行比较，如果一样返回1，否则返回0。</p><p>Good Job.</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p><img src="/img/1563293861722.png" alt="1563293861722"></p><p><img src="/img/1563293876622.png" alt="1563293876622"></p><h3 id="最终的注册码"><a href="#最终的注册码" class="headerlink" title="最终的注册码"></a>最终的注册码</h3><p><img src="/img/1563293808998.png" alt="1563293808998"></p><p>上图中的done_code为注册码。</p><p><img src="/img/1571159884917.png" alt="1571159884917"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一个简单的CTF小DEMO&quot;&gt;&lt;a href=&quot;#一个简单的CTF小DEMO&quot; class=&quot;headerlink&quot; title=&quot;一个简单的CTF小DEMO&quot;&gt;&lt;/a&gt;一个简单的CTF小DEMO&lt;/h1&gt;&lt;p&gt;不说废话 ，开始看代码&lt;/p&gt;
&lt;p&gt;&lt;img sr
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>Window PE -- 资源</title>
    <link href="https://www.basicbit.cn/2018/11/01/2018-11-01-Windows%20PE%20%E8%B5%84%E6%BA%90/"/>
    <id>https://www.basicbit.cn/2018/11/01/2018-11-01-Windows PE 资源/</id>
    <published>2018-10-31T16:00:00.000Z</published>
    <updated>2019-12-16T13:53:21.040Z</updated>
    
    <content type="html"><![CDATA[<p>Window PE – 资源</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>Windows程序的各种界面称为资源，包括加速键（Accelerator）、位图（Bitmap）、光标（Cursor）、对话框（DialogBox）、图标（Icon）、菜单（Menu）、串表（StringTable）、工具栏（Toolbar）和版本信息（VersionInformation）等。在PE文件的所有结构中，资源部分是最复杂的。</p><h2 id="资源结构"><a href="#资源结构" class="headerlink" title="资源结构"></a>资源结构</h2><p>资源用类似于磁盘目录结构的方式保存，目录通常包含3层。第l层目录类似于一个文件系统的根目录，每个根目录下的条目总是在它自己权限下的一个目录。第2层目录中的每一个都对应于一个资源类型（字符串表、菜单、对话框、菜单等）。每个第2层资源类型目录下是第3层目录。</p><p><img src="/img/1554868326942.png" alt="1554868326942"></p><h2 id="资源目录结构"><a href="#资源目录结构" class="headerlink" title="资源目录结构"></a>资源目录结构</h2><p>数据目录表中的IMAGEDIRECTORY_ENTRY_RESOURCE条目包含资源的RVA和大小。资源目录结构中的每一个节点都是由IMAGE_RESOURCE_DIRECTORY结构和紧随其后的数个IMAGE_RESOURCE_DIRECTORY_ENTRY结构组成的，这两种结构组成了一个目录块。</p><p>IMAGE_RESOURCE_DIRECTORY结构长度为16字节，共有6个字段，其定义如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _IMAGE_RESOURCE_DIRECTORY &#123;</span><br><span class="line">    ULONG   Characteristics;</span><br><span class="line">    ULONG   TimeDateStamp;</span><br><span class="line">    USHORT  MajorVersion;</span><br><span class="line">    USHORT  MinorVersion;</span><br><span class="line">    USHORT  NumberOfNamedEntries;</span><br><span class="line">    USHORT  NumberOfIdEntries;</span><br><span class="line">&#125; IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;</span><br></pre></td></tr></table></figure><p>这个结构中让人感兴趣的字段是NumberOfNamedEntries和NumberOfldEntries，它们说明了本目录中目录项的数量。umberOfNamedEntries字段是以字符串命名的资源数量，NumberOfldEntries字段是以整型数字命名的资源数量，两者加起来是本目录中的目录项总和，即紧随其后的IMAGE_RESOURCE_DIRECTORY_ENTRY结构的数量。</p><h2 id="资源目录入口结构"><a href="#资源目录入口结构" class="headerlink" title="资源目录入口结构"></a>资源目录入口结构</h2><p>紧跟资源目录结构的就是资源目录入口（ResourceDirEntries）结构，此结构长度为8字节，包含2个字段。IMAGE_RESOURCE_DIRECTORY_ENTRY结构定义如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY</span><br><span class="line">&#123;</span><br><span class="line">Name  DWORD  ?</span><br><span class="line">OffsetToData  DWORD  ?</span><br><span class="line">&#125;IMAGE_RESOURCE_DIRECTORY_ENTRY,*PIMAGE_RESOURCE_DIRECTORY_ENTRY;</span><br></pre></td></tr></table></figure><p>根据不同的情况，这2个字段的含义有所不同。</p><ul><li><p>Name字段：定义目录项的名称或ID。当结构用于第1层目录时，定义的是资源类型；当结构用于第2层目录时，定义的是资源的名称；当结用于第3层目录时，定义的是代码页编号。当最高位为0时，表示字段的值作为ID使用；当最高位为1时，表示字段的低位作为指针使用，资源名称字符串使用Unicode编码，这个指针不直接指向字符串，而指向一个IMAGE_RESOURCE_DIR_STRING_U结构。Name字段定义如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IMAGE RESOURCE  DIR  STRING  U STRUCT</span><br><span class="line">Length</span><br><span class="line">NameStr in g</span><br><span class="line">WORD  ?</span><br><span class="line">WCHAR  ?</span><br><span class="line">IMAGE RESOURCE  DIR  STRING  U ENDS</span><br></pre></td></tr></table></figure></li><li><p>OffsetToData字段：一个指针当最高位（位31）为1时，低位数据指向下一层目录块的起始地址；当最高位为0时，指针指向IMAGE_RESOURCE_DATA_ENTRY结构。在将Name和OffsetToData作为指针时需要注意，该指针从资源区块开始处计算偏移量，并非从RVA（根目录的起始位置）开始处计算偏移量。</p></li></ul><p>有一点要说明的是，当IMAGE_RESOURCE_DIRECTORY_ENTRY在第1层目录中，它的Name字段作为资源类型使用。当资源类型以ID定义且数值在1到16之间时，表示是系统预定义的类型，具体如下表所示。</p><p><img src="/img/1554868630997.png" alt="1554868630997"></p><h2 id="资源数据入口"><a href="#资源数据入口" class="headerlink" title="资源数据入口"></a>资源数据入口</h2><p>经过3层IMAGE_RESOURCE_DIRECTORY_ENTRY（一般是3层，也有可能更少，第1层是资源类型，第2层是资源名，第3层是资源的Language），第3层录结构中的OffsetToData将指向IMAGE_RESOURCE_DATA_ENTRY结构。该结构描述了资、源数据的位置和大小，其定义如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IMAGE RESOURCE  DATA  ENTRY STRUCT</span><br><span class="line">OffsetToData</span><br><span class="line">Size</span><br><span class="line">Code  Page</span><br><span class="line">DWORD  ?</span><br><span class="line">DWORD  ?</span><br><span class="line">DWORD  ?</span><br><span class="line">Reserved  DWORD  ?</span><br><span class="line">&#125; IMA GE  RESOURCE  DATA  ENTRY ENDS</span><br></pre></td></tr></table></figure><p>经过多层结构，此处的IMAGE_RESOURCE_DATA_ENTRY结构就是真正的资源数据了。结构中的OffsetToData指向资源数据的指针（其为RVA值）。</p><p><img src="/img/1571159898220.png" alt="1571159898220"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Window PE – 资源&lt;/p&gt;
&lt;h2 id=&quot;资源&quot;&gt;&lt;a href=&quot;#资源&quot; class=&quot;headerlink&quot; title=&quot;资源&quot;&gt;&lt;/a&gt;资源&lt;/h2&gt;&lt;p&gt;Windows程序的各种界面称为资源，包括加速键（Accelerator）、位图（Bitmap）
      
    
    </summary>
    
      <category term="Reverse" scheme="https://www.basicbit.cn/categories/Reverse/"/>
    
    
      <category term="PE" scheme="https://www.basicbit.cn/tags/PE/"/>
    
  </entry>
  
</feed>
