<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BasicBit</title>
  
  <subtitle>Learning is an endless process.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.basicbit.cn/"/>
  <updated>2019-10-15T17:18:01.064Z</updated>
  <id>https://www.basicbit.cn/</id>
  
  <author>
    <name>Bi Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vmp3.3.1 虚拟机分析</title>
    <link href="https://www.basicbit.cn/2019/01/01/2018-11-03-vmp3.3.1%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%86%E6%9E%90/"/>
    <id>https://www.basicbit.cn/2019/01/01/2018-11-03-vmp3.3.1 虚拟机分析/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-10-15T17:18:01.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟机概述"><a href="#虚拟机概述" class="headerlink" title="虚拟机概述"></a>虚拟机概述</h1><p><img src="/img/1564389415873.png" alt="1564389415873"></p><p>一个正常的二进制文件，假设为x，那么执行他的是Windows操作系统，也就是解释器，假设为A，</p><p>那么vmp加壳的时候，会根据加壳文件的代码，转化为自己的代码，但行为不变，假设push eax，的字节码为0x03，那么vmp就会修改这个值，假设为0x04，但实际执行的时候还是回执行push eax，现在出现了一个新的问题，push eax的字节码被修改了，解释器A，无法将0x04解释为push eax。在vmp将原字节码转换为vmp的字节码之后，vmp还会生成一个解释器，假设为B，解释器B就是来解释，经过vmp修改过后的代码，也就是上文中0x04这个字节码，实际的执行顺序如下</p><p><strong>解释器A – 执行 – 解释器B – 执行 – vmp修改过后的代码。</strong></p><p>当我们分析vmp代码的时候，实际上分析的是解释器B。</p><p>既然解释器B是在执行虚拟机的代码，而虚拟机代码是模拟的vmp加壳之前的代码，加壳之前的代码是需要寄存器来执行的，而我们在调试中看到的寄存器已经被解释器B使用了。</p><p>那么在堆栈中会出现一个结构体，我们称之为VMContext，下文会详细介绍。</p><p>还有就是vmcode有自己的堆栈地址，并不是保存在esp中。</p><h1 id="加密源码"><a href="#加密源码" class="headerlink" title="加密源码"></a>加密源码</h1><p><img src="/img/1564401836257.png" alt="1564401836257"></p><p>开启变态加密</p><p>未开启反调试</p><p>生成后文件</p><p><img src="/img/1564401897119.png" alt="1564401897119"></p><p>源文件3KB，加密后551KB，一个惊人的增长</p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><img src="/img/1564398341996.png" alt="1564398341996"><img src="/img/1564398356653.png" alt="1564398356653"><img src="/img/1564398371347.png" alt="1564398371347"><img src="/img/1564398418945.png" alt="1564398418945"></p><p>上图为vmp开始的代码，我们只关心push指令，它将所有的寄存器压入栈，最后将0压入堆栈，</p><p>此时堆栈保存的数据顺序如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">edx</span><br><span class="line">flags</span><br><span class="line">esi</span><br><span class="line">ecx</span><br><span class="line">ebp </span><br><span class="line">edi</span><br><span class="line">ebx</span><br><span class="line">eax</span><br><span class="line">key</span><br></pre></td></tr></table></figure><p>继续F7单步</p><p><img src="/img/1564398935939.png" alt="1564398935939"></p><p>上面这段代码，主要的作用，取出vmcontext中的key，进行计算，而这个key计算结束的值就是vmcode的代码位置。</p><p>还有两行代码我们需要注意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00429382    8BFC            mov edi,esp </span><br><span class="line">;将当前esp的值赋值给edi，这个edi就是vmcode的堆栈的栈顶</span><br><span class="line">;通过上文我们可以看出了栈顶的顺序就是上述堆栈的顺序</span><br><span class="line">;那么取出的值则为0</span><br><span class="line">00429384    8DA424 40FFFFFF lea esp,dword ptr ss:[esp-0xC0]</span><br><span class="line">;在堆栈开辟0xC0个字节的空间，这个空间就是vmcontext，它的首地址保存在esp中</span><br></pre></td></tr></table></figure><p>F7单步继续</p><p><img src="/img/1564399065949.png" alt="1564399065949"></p><p>上面这段代码中最重要的就是 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lea esi, dword ptr ds :[0x462ABD]</span><br></pre></td></tr></table></figure><p>这个地址是第一个handler的地址，这个handler指的是执行vmcode的代码，也就是在vmcode中取出代码，在handler中执行，在上图中jmp之前的代码就是在vmcode的地址中取出下一行要执行的代码。</p><p>继续单步</p><p><img src="/img/1564399507137.png" alt="1564399507137"></p><p>我们看到ebp进行了加4，可以看出虚拟机的代码是倒着走的。</p><p>单步一直走，走到带有ret的语句。</p><p><img src="/img/1564399608000.png" alt="1564399608000"></p><p>上图中的ecx是经过计算后的偏移，和esi相加就是第一个handler的地址。</p><p>在以前的版本中会有一个VMDispatcher，来决定下一次handler跳转的位置，而在新版本中，去掉了这个功能，很多脱壳神器也就都失效了，换而取代的是 push .. ret或者jmp esi 等等。</p><p>跳到第一个handler地址，继续单步。</p><p><img src="/img/1564400047871.png" alt="1564400047871"></p><p>上图为第一个handler的代码，执行到此，我们还需要说一下vmcode中的堆栈问题，vmcode的堆栈地址并不是固定保存在一个寄存器中的，vmcode的地址，和handler的地址也是一样，并不是固定在一个寄存器中的，它可能在某一个handler中就保存到其他的寄存器中了。</p><p>上图中的寄存器对应如下</p><ul><li><p>edi保存了vmcode的堆栈首地址</p></li><li><p>ebp保存了vmcode的首地址</p></li><li><p>handler的地址在esi中。</p></li><li>esp保存了vmcontext的首地址，vmcontext的地址将永远保存在esp中不会改变</li></ul><p>上图代码主要工作如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov edx,dword ptr ds:[edi]</span><br><span class="line">lea edi,dword ptr ds:[edi+0x4]</span><br><span class="line">;上面两行代码是一个标准的pop指令，将栈顶的值临时保存在edx中</span><br><span class="line">movzx ecx,byte ptr ss:[ebp]</span><br><span class="line">lea ebp,dword ptr ss:[ebp+0x1]</span><br><span class="line">;将vmcode的下一个指令取出来</span><br></pre></td></tr></table></figure><p>F7单步经过一个jmp之后的代码如下</p><p><img src="/img/1564401479169.png" alt="1564401479169"></p><p>上图中高亮代码，是将在栈顶取出来的值保存到vmcontext的偏移的位置中，我们刚有提过esp中保存的永远都是vmcontext的地址，上图中的ecx的值为0x10，edx为上一次在堆栈中取出的值为0。</p><p>而在这之后在ebp中取出4个字节的代码，并把ebp进行加4，然后edx解密得到偏移，加上esi就是下一个handler的地址。</p><p>在最后一行代码跳转过去的代码为jmp esi 跳转到下一个handler。</p><p><img src="/img/1564402444688.png" alt="1564402444688"><img src="/img/1564402703985.png" alt="1564402703985"></p><p>这个handler的代码作用与原理同上，在堆栈中取出内容保存到vmcontext，只是保存位置有变化，保存在0x4的偏移中，然后在ebp中取出代码经过计算通过jmp esi跳转到下一个handler。</p><p>后面的几个handler的都是在做这件事情(初始化vmcontext)，避免篇幅过大，就不贴出代码了。</p><p>初始化结束后的vmcontext如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[vmcontext + <span class="number">0x10</span>] = <span class="number">0</span></span><br><span class="line">[vmcontext + <span class="number">0x04</span>] = edx = <span class="number">00401000</span></span><br><span class="line">[vmcontext + <span class="number">0x28</span>] = FLAGS = <span class="number">00000246</span></span><br><span class="line">[vmcontext + <span class="number">0x38</span>] = esi = <span class="number">00401000</span></span><br><span class="line">[vmcontext + <span class="number">0x24</span>] = ecx = <span class="number">00401000</span></span><br><span class="line">[vmcontext + <span class="number">0x0C</span>] = ebp = <span class="number">0019F</span>F7B</span><br><span class="line">[vmcontext + <span class="number">0x20</span>] = edi = <span class="number">00401000</span></span><br><span class="line">[vmcontext + <span class="number">0x1C</span>] = ebx = <span class="number">0027</span>D000</span><br><span class="line">[vmcontext + <span class="number">0x2C</span>] = eax = <span class="number">0019F</span>FCC</span><br><span class="line">[vmcontext + <span class="number">0x08</span>] = 返回地址 = <span class="number">004650</span>CB</span><br><span class="line">[vmcontext + <span class="number">0x14</span>] = key = A6EC6D77</span><br></pre></td></tr></table></figure><p>至此 vmcontext初始化完毕。</p><h2 id="正式执行代码"><a href="#正式执行代码" class="headerlink" title="正式执行代码"></a>正式执行代码</h2><p><img src="/img/1564403874592.png" alt="1564403874592"></p><p>在上一行代码高亮的地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0044CAC5    8DBF FCFFFFFF   lea edi,dword ptr ds:[edi-0x4]</span><br><span class="line">;edi保存了vmcode堆栈的地址，进行减4，开辟4字节空间</span><br><span class="line">...</span><br><span class="line">0044CACF    8907            mov dword ptr ds:[edi],eax</span><br><span class="line">;eax的值为2019，将这个值放到edi中，也就是栈顶</span><br><span class="line">;上述代码可还原为 push 2019 也就是我们源代码的第一行代码</span><br></pre></td></tr></table></figure><p>继续F7单步走</p><p><img src="/img/1564404138745.png" alt="1564404138745"><img src="/img/1564404163486.png" alt="1564404163486"></p><p>每次压栈后，在跳转到下一个handler之前都会有一个当前vmcode栈空间的判断，如果当前栈顶超过了esp+60，就要进行栈空间分配。</p><p>分配的代码如下</p><p><img src="/img/1564404303275.png" alt="1564404303275"><img src="/img/1564404322967.png" alt="1564404322967"><img src="/img/1564404338065.png" alt="1564404338065"><img src="/img/1564404353276.png" alt="1564404353276"><img src="/img/1564404365073.png" alt="1564404365073"></p><p>混肴代码太多</p><p>上图代码总结</p><ul><li>开辟空间</li><li>edi esi eflags 寄存器保存</li><li>利用 esi 和 edi 寄存器，保存开辟空间之前，和开辟空间之后的位置</li><li>通过ecx 和 rep mosb 指令将vmcontext进行恢复</li><li>恢复 edi esi eglags寄存器</li><li>跳转到下一个handler</li></ul><p>到此基本上了解了虚拟机的执行流程。</p><p>接下来的代码就没那么幸运了，因为在vmcode中，包含了很多混肴代码，做一些无用的工作，大大浪费了分析的空间，我通过在栈地址中使用硬件断点跳过这些代码，直接看vmp调用call的过程。</p><p><img src="/img/1564407462138.png" alt="1564407462138"></p><p>将保存在vmcontext的值取出来赋值给原寄存器</p><p>此时的堆栈如下</p><p><img src="/img/1564407515176.png" alt="1564407515176"></p><p>执行完成API返回到401026继续虚拟机指令。</p><p>Good Job.</p><h1 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h1><ul><li>同样的应用程序生成进行两次vmp加壳，所生成的两个EXE，那么这两个EXE的代码不论是在初始化还是在其他地方代码都会有很多不同，但是他们的目的是一致的，假设在初始化部分之前的寄存器压栈，两个不同的exe的jmp指令的多少或者位置都会不同，但它们都是在做同一件事情，就是将key、寄存器、0压入栈。</li><li>在不同的handler中，除了vmcontext的地址是固定保存在esp中之外，其他的均不会固定保存在一个寄存器中，而是在不同的寄存器中进行轮询。</li><li>vmcontext的偏移位置在每次编译的时候也不同</li></ul><p><img src="/img/1571159879653.png" alt="1571159879653"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;虚拟机概述&quot;&gt;&lt;a href=&quot;#虚拟机概述&quot; class=&quot;headerlink&quot; title=&quot;虚拟机概述&quot;&gt;&lt;/a&gt;虚拟机概述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/1564389415873.png&quot; alt=&quot;1564389415873&quot;&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="Crack set" scheme="https://www.basicbit.cn/categories/Crack-set/"/>
    
    
      <category term="Windows" scheme="https://www.basicbit.cn/tags/Windows/"/>
    
      <category term="CTF" scheme="https://www.basicbit.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>微信结构分析</title>
    <link href="https://www.basicbit.cn/2018/11/16/2018-11-16-%E5%BE%AE%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%88%86%E6%9E%90/"/>
    <id>https://www.basicbit.cn/2018/11/16/2018-11-16-微信接口分析/</id>
    <published>2018-11-15T16:00:00.000Z</published>
    <updated>2019-10-23T16:40:00.677Z</updated>
    
    <content type="html"><![CDATA[<p>微信接口分析</p><p>之前搞过一次微信结构分析，想做一次记录，微信最近更新了，那就重新分析下吧。</p><p>微信版本号：</p><p><img src="/img/1571745519002.png" alt="1571745519002"></p><p>主要分析发送和接收消息。</p><p>用到的工具CE、x64dbg。</p><p>文中主要解决的点：</p><p>找到接收消息的关键点，实现可拦截，修改。</p><p>找到发送消息的关键点，实现可拦截，可外部调用。</p><p>先来分析接收消息吧，分析前先猜测下微信的消息处理流程。</p><p>我的过程查找如下：</p><ul><li>启动微信，并登录。</li><li>x64dbg附加进来(Alt + a)。</li><li>启动CE，并选择微信应用。</li></ul><p>做完上述内容后，用其他账号给当前账号发送消息，用CE搜索发送的消息内容（123）。</p><p>搜索结果如下：</p><p><img src="/img/1571745340960.png" alt="1571745340960"></p><p>336条太多了。</p><p>再次发送消息（2563），进行过滤：</p><p>最终出现两条结果：</p><p><img src="/img/1571745476665.png" alt="1571745476665"></p><p>经筛选最终选用05CA9185。</p><p>在x64dbg中下硬件写入断点。</p><p><img src="/img/1571745953091.png" alt="1571745953091"></p><p>为什么下写入而不是读取？因为出现新消息会写入这个地址呀。</p><p>在向电脑登陆的微信发送一条消息，由于x64dbg对中文支持不是很友好，建议发送字母或数字（567891234）。</p><p>发送消息后，程序断下，此时我们来看看调用堆栈。</p><p><img src="/img/1571746238446.png" alt="1571746238446"></p><p>函数调用还挺多的，当然这里的不一定全。</p><p>再来看看堆栈。</p><p><img src="/img/1571746278324.png" alt="1571746278324"></p><p>一直向下拉，看看有没有什么可用的信息。</p><p><img src="/img/1571746335556.png" alt="1571746335556"></p><p>看到上图中的我们发送的消息内容了吗？那么这附近的函数调用一定要着重观察。</p><p>各个call的分析我们就不说的，主要看call传递的参数信息是否有我们所需要的，最终找到的的call如下，地址：wechatwin:base + 0x2650F4，可能除了这个call还有其他call可以用，文中就用这个吧：</p><p><img src="/img/1571746692912.png" alt="1571746692912"></p><p>这个函数只压入了一个参数，消息内容就在  [[esp]] 的位置：</p><p><img src="/img/1571746763957.png" alt="1571746763957"></p><p>这里分别列出了微信ID和消息内容，这里的微信ID和我们在微信里看到的微信ID并不一样，具体我也不知道为什么。</p><p>这两个字符串后面跟随的4个字节就是字符串的长度，因此如修改内容需要将字符串长度一并修改。</p><p>这里实际上是一个结构体，包含的信息不止这两个内容，具体分析看文末。</p><p>接收消息搞定了，来看看发送消息吧，并且要进行。</p><p>在电脑端的微信中向文件传输助手中发送消息，发送结束后，在CE中搜索filehelper，这个就是文件传输助手的微信ID。</p><p><img src="/img/1571747328061.png" alt="1571747328061"></p><p>搜索出23条结果。</p><p>在向其他账号发送消息，观察CE变动的的数据。</p><p><img src="/img/1571747393910.png" alt="1571747393910"></p><p>变动的不多，经分析可以看出05CA814D保存的就是刚刚发送的消息的接收者的ID。</p><p>老规矩，对这个地址进行硬件写入断点：</p><p><img src="/img/1571747709507.png" alt="1571747709507"></p><p>再次向文件传输助手发送一条消息，断点断下。</p><p>向上文一样，找call，主要看传递的参数，再次不在赘述了。</p><p>最终找到了两个call，两个call描述如下：</p><ul><li>第一个call，传递了this指针，和其他参数，数量未知，看到this指针就把它pass了</li><li>第二个call，只压入了一个参数，并且未用到寄存器传参数。</li></ul><p>果断用第二个call，为什么？，难道会有人喜欢分析 类的结构吗？</p><p>call的地址：wechatwin:base + 0x4805FC</p><p>在此call的地址下断</p><p>再次发送消息，程序在这个call中断下。</p><p>来看看我们选中的call吧：</p><p><img src="/img/1571748204692.png" alt="1571748204692"></p><p>这个call传递的重要参数在[[esp] + c]中：</p><p><img src="/img/1571748871478.png" alt="1571748871478"></p><p>这里的参数并不是所有的都有用，有些是上层函数需要用到的。</p><p>我们自己调用这个call的话，就需要对内容进行分析，可以先将一些参数置0，然后运行，把无用的参数过滤掉，再来分析有用的参数分别代表了什么。</p><p>这个call和我上次分析的低版本用到的非常相似，我上次针对这两个接口写了个辅助工具，上次分析忘记参数位置了，好像和这次的差不多，改改还能用。</p><p>链接：<a href="https://pan.baidu.com/s/1NKz_IZqqQLy5OkUzWlEG7A" target="_blank" rel="noopener">https://pan.baidu.com/s/1NKz_IZqqQLy5OkUzWlEG7A</a><br>提取码：j0t4 </p><p>具体功能如下：</p><ul><li>接收消息拦截，消息类型分析，发送和接收分离。</li><li>发送消息</li></ul><p><strong>辅助编写步骤如下，未接触过win32编程的可以看下：</strong></p><p>可以使用dll注入技术，我没有使用dll注入。</p><p>技术栈：远程代码写入（WriteProcessMemory），进程间共享内存，远程函数调用（CreateRemoteProcess）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微信接口分析&lt;/p&gt;
&lt;p&gt;之前搞过一次微信结构分析，想做一次记录，微信最近更新了，那就重新分析下吧。&lt;/p&gt;
&lt;p&gt;微信版本号：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/1571745519002.png&quot; alt=&quot;1571745519002&quot;&gt;&lt;/p&gt;
&lt;p&gt;主要
      
    
    </summary>
    
      <category term="Crack set" scheme="https://www.basicbit.cn/categories/Crack-set/"/>
    
    
      <category term="Windows" scheme="https://www.basicbit.cn/tags/Windows/"/>
    
      <category term="CTF" scheme="https://www.basicbit.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Themida &amp; WinLicense 2.0 - 2.4.6 脱壳</title>
    <link href="https://www.basicbit.cn/2018/11/16/2018-11-16-Themida%20&amp;%20WinLicense%202.0%20-%202.4.6%20%E8%84%B1%E5%A3%B3/"/>
    <id>https://www.basicbit.cn/2018/11/16/2018-11-16-Themida &amp; WinLicense 2.0 - 2.4.6 脱壳/</id>
    <published>2018-11-15T16:00:00.000Z</published>
    <updated>2019-10-23T16:40:05.459Z</updated>
    
    <content type="html"><![CDATA[<p>碰上了这个壳，具体文件就不说了</p><p>百度查了一圈找不到相关文章？难道要手脱？</p><p>濒临绝望之前，看到了国外某大佬的文章，链接：<a href="https://zenhax.com/viewtopic.php?f=4&amp;t=1051Hello" target="_blank" rel="noopener">https://zenhax.com/viewtopic.php?f=4&amp;t=1051Hello</a></p><p>来看过程吧</p><p>PEID查壳</p><p><img src="/img/1571830112209.png" alt="1571830112209"></p><p>脱壳需要的文件如下：</p><p>OD</p><p>插件：</p><p>ODBGScript v1.82.6<br>StrongOD 0.4.8.892<br>PhantOm 1.79<br>ARImpRec.dll</p><p>脱壳脚本（Themida - Winlicense Ultra Unpacker 1.4）</p><p>文件会在文末留下链接</p><p>在使用脱壳脚本之前，需要修改一下ARImpRec.dll的路径。</p><p>打开脚本文件搜索HERE_ENTER_YOUR_DLL_PATH_TO_ARIMPREC_DLL:</p><p><img src="/img/1571830437147.png" alt="1571830437147"></p><p>在324行中修改为你存储此dll的绝对路径。</p><p>还有一点需要注意的就是，要使用英文版本的OD，下图中的OllyDBG.exe，然后备份OllyDBG.ini文件。</p><p>并创建一个新的OllyDBG.ini，使其文件内容为空</p><p><img src="/img/1571830775825.png" alt="1571830775825"></p><p>打开OllDBG.exe，加载待脱壳文件，然后加载脚本</p><p><img src="/img/1571831000405.png" alt="1571831000405"></p><p>运行脚本</p><p><img src="/img/1571831031397.png" alt="1571831031397"></p><p>点击是</p><p><img src="/img/1571831063517.png" alt="1571831063517"></p><p>点击否</p><p><img src="/img/1571831111781.png" alt="1571831111781"></p><p>脚本已经开始工作了</p><p><img src="/img/1571831144245.png" alt="1571831144245"></p><p>在运行几秒后，脚本暂停在了上图的位置，继续运行脚本即可</p><p><img src="/img/1571831251717.png" alt="1571831251717"></p><p>随后我们获得了如下图的弹窗，需要在OllyDBG.ini文件中，根据提示修改文件，并重新运行脚本，我在文末的打包文件中已经修改好了</p><p><img src="/img/1571831293135.png" alt="1571831293135"></p><p>关掉弹窗，继续运行</p><p><img src="/img/1571831409264.png" alt="1571831409264"></p><p>点击是，进行更多的检查</p><p><img src="/img/1571831485640.png" alt="1571831485640"></p><p>在这一步，点击否</p><p><img src="/img/1571832082751.png" alt="1571832082751"></p><p>如果你在虚拟机中运行点击时，真机的话点击否就好了</p><p><img src="/img/1571832196873.png" alt="1571832196873"></p><p>搞定了，现在可以进行dump了，点击是</p><p><img src="/img/1571832266301.png" alt="1571832266301"></p><p>按照上图说的去做，第一次看到这个弹窗，点击否，不是第一次点击是</p><p><img src="/img/1571832353478.png" alt="1571832353478"></p><p>文件大小可以接受，不需要压缩，点击是</p><p><img src="/img/1571832437892.png" alt="1571832437892">、</p><p>一些文件信息，点击是</p><p>OK，脱壳结束，脱壳的文件被命名为&lt;原文件名&gt;_DP。</p><p>再来查一下壳</p><p><img src="/img/1571832578604.png" alt="1571832578604"></p><p>搞定。</p><p>Themida &amp; WinLicense 2.0 - 2.4.6 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;碰上了这个壳，具体文件就不说了&lt;/p&gt;
&lt;p&gt;百度查了一圈找不到相关文章？难道要手脱？&lt;/p&gt;
&lt;p&gt;濒临绝望之前，看到了国外某大佬的文章，链接：&lt;a href=&quot;https://zenhax.com/viewtopic.php?f=4&amp;amp;t=1051Hello&quot; t
      
    
    </summary>
    
      <category term="Crack set" scheme="https://www.basicbit.cn/categories/Crack-set/"/>
    
    
      <category term="Windows" scheme="https://www.basicbit.cn/tags/Windows/"/>
    
      <category term="CTF" scheme="https://www.basicbit.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>我们聊聊继承吧，从继承的角度出发再来聊聊多态</title>
    <link href="https://www.basicbit.cn/2018/11/12/2018-11-12-%E4%BB%8E%E7%BB%A7%E6%89%BF%E7%9A%84%E8%A7%92%E5%BA%A6%E5%86%8D%E6%9D%A5%E8%81%8A%E8%81%8A%E5%A4%9A%E6%80%81%E5%90%A7/"/>
    <id>https://www.basicbit.cn/2018/11/12/2018-11-12-从继承的角度再来聊聊多态吧/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-10-15T17:32:07.887Z</updated>
    
    <content type="html"><![CDATA[<p>我们先通过一段代码来理解继承的底层实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBase</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CBase() &#123;&#125;;</span><br><span class="line">~CBase() &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetNumber</span><span class="params">(<span class="keyword">int</span> nNum)</span> </span>&#123; nNumber = nNum; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> nNumber;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CChild</span> :</span> CBase &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowNumber</span><span class="params">(<span class="keyword">int</span> nNum)</span> </span>&#123;</span><br><span class="line">SetNumber(nNum);</span><br><span class="line">nNumberChild = nNum + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, nNumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> nNumberChild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CChild cChild;</span><br><span class="line">cChild.ShowNumber(<span class="number">23</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中子类虽然没有写构造函数和析构函数，但是编译器还是自动生成了它们，子类构造函数、析构函数和父类的构造函数、析构函数调用顺序如下：</p><p>父类构造函数 -&gt; 子类构造函数 -&gt; 子类析构函数 -&gt; 父类析构函数</p><p>我们关注的重点并不在这里，而是子类对象和父类对象的关系。</p><p>走进ShowNumber函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">0099198D  mov         eax,dword ptr [ebp+8]  ;参数nNum</span><br><span class="line">00991990  push        eax  ;参数压栈</span><br><span class="line">00991991  mov         ecx,dword ptr [ebp-8]  ;获取this指针</span><br><span class="line">00991994  call        0099102D  ;调用父类的SetNumber</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>在子类调用父类函数时，直接传递了子类的this指针，我们走进这个SetNumber ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">0099192D  mov         eax,dword ptr [ebp-8]  ;获取this指针</span><br><span class="line">00991930  mov         ecx,dword ptr [ebp+8]  ;取出nNum的值</span><br><span class="line">00991933  mov         dword ptr [eax],ecx  ;将nNum赋值到this指针的前4个字节也就是代码中的nNumber变量</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>执行结束回到ShowNumber继续执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">00991994  call        0099102D  ;调用父类的SetNumber</span><br><span class="line"></span><br><span class="line">00991999  mov         eax,dword ptr [ebp+8]  ;取出参数nNum</span><br><span class="line">0099199C  add         eax,1  ;临时nNum + 1</span><br><span class="line">0099199F  mov         ecx,dword ptr [ebp-8]  ;获取this指针</span><br><span class="line">009919A2  mov         dword ptr [ecx+4],eax  ;赋值到nNumberChild</span><br><span class="line"></span><br><span class="line">009919A5  mov         eax,dword ptr [ebp-8]  ;取出this指针</span><br><span class="line">009919A8  mov         ecx,dword ptr [eax]  ;取出nNumber</span><br><span class="line">009919AA  push        ecx  ;压栈nNumber</span><br><span class="line">009919AB  push        998B30h  ;压栈字符串</span><br><span class="line">009919B0  call        00991050  ;调用printf</span><br><span class="line">009919B5  add         esp,8</span><br></pre></td></tr></table></figure><p>由此我们看出父类的nNumber赋值到this的前4个字节，而子类的nNumberChild赋值到this的第四个字节开始的后面四个字节。</p><p>那么此时this的内存结构如下图：</p><p><img src="/img/1571140201271.png" alt="1571140201271"></p><p>由此，我们可以总结出，父类对象在子类对象开始处，那么将上例中的CChild的类修改为下面的样子，则他们的内存结构时完全一样的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CChild</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowNumber</span><span class="params">(<span class="keyword">int</span> nNum)</span> </span>&#123;</span><br><span class="line">SetNumber(nNum);</span><br><span class="line">nNumberChild = nNum + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, nNumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CBase cBase;</span><br><span class="line"><span class="keyword">int</span> nNumberChild;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种内存结构的优势是什么？</p><p>很明显，子类对象调用父类的函数，直接传递子类的对象地址就可以了，那么子类对象指针可以强制转换为父类对象指针来使用，反之则不行。</p><p><strong>——————-&gt;分割线</strong></p><p>再来聊聊多态，上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cBase</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cBase() &#123;&#125;;</span><br><span class="line"><span class="keyword">virtual</span> ~cBase() &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"I am cBase\n"</span>); &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cChild0</span> :</span> cBase&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cChild0() &#123;&#125;;</span><br><span class="line"><span class="keyword">virtual</span> ~cChild0() &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"I am cChild0\n"</span>); &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cChild1</span> :</span> cBase&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cChild1() &#123;&#125;;</span><br><span class="line"><span class="keyword">virtual</span> ~cChild1() &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"I am cChild1\n"</span>); &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoPrint</span><span class="params">(cBase* pBase)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pBase-&gt;Print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cChild0 cCCHild0;</span><br><span class="line">cChild1 cCCHild1;</span><br><span class="line"></span><br><span class="line">GoPrint((cBase*)&amp;cCCHild0);</span><br><span class="line">GoPrint((cBase*)&amp;cCCHild1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看看输出：</p><p><img src="/img/1571141767552.png" alt="1571141767552"></p><p>是不是意料之中的结果？</p><p>来看看内部实现吧，先从cChild0的构造函数开始吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">00D7183F  pop         ecx  </span><br><span class="line">00D71840  mov         dword ptr [this],ecx  </span><br><span class="line">00D7184D  mov         ecx,dword ptr [this]  ;以上为this指针操作</span><br><span class="line">00D71850  call        cBase::cBase (0D713EDh)  ;调用父类构造函数</span><br><span class="line">00D71855  mov         eax,dword ptr [this]  ;取出this指针</span><br><span class="line">00D71858  mov         dword ptr [eax],offset cChild0::`vftable&apos; (0D78B54h) ;虚表赋值 </span><br><span class="line">00D7185E  mov         eax,dword ptr [this] ;返回this指针</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>首先调用了父类的构造函数，然后赋值虚表为本类（cChild0）的虚表。</p><p>走进cBase的构造函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">00D717DF  pop         ecx  </span><br><span class="line">00D717E0  mov         dword ptr [this],ecx  </span><br><span class="line">00D717ED  mov         eax,dword ptr [this]  ;以上为this指针操作</span><br><span class="line">00D717F0  mov         dword ptr [eax],offset cBase::`vftable&apos; (0D78B34h)  ;初始化虚表</span><br><span class="line">00D717F6  mov         eax,dword ptr [this] ;返回this指针</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>在构造函数中只做一件事，就是赋值虚表为本类（cBase）的虚表。</p><p>总结下，在cChild0的构造函数中做了以下的事情：</p><p>调用父类构造函数 -&gt; 在父类的构造函数中设置虚表为本类(cBase)的虚表 -&gt; 设置虚表为本类的（cChild0）虚表 </p><p><strong>需要注意的是，在上文中设置两次虚表都是cChild0 this指针的前四个字节。</strong></p><p>在cChild1中做了同样的事情，就不再次赘述了。</p><p>那么现在已经很清晰了，这两个子类对象在构造函数调用之后会将虚表都设成自己的虚表。</p><p>现在我们来看看GoPrint函数吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">00D725E8  mov         eax,dword ptr [pBase]  ;取出参数，传递进来的对象</span><br><span class="line">00D725EB  mov         edx,dword ptr [eax]  ;取出虚表</span><br><span class="line">00D725ED  mov         esi,esp  </span><br><span class="line">00D725EF  mov         ecx,dword ptr [pBase]  ;设置this指针</span><br><span class="line">00D725F2  mov         eax,dword ptr [edx+4]  ;根据虚表偏移取出虚函数</span><br><span class="line">00D725F5  call        eax  ;调用虚函数</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>GoPrint函数就很清晰了，直接取出虚表根据偏移调用虚函数，也就理解了程序上面的输出。</p><p>现在我们在说说在《我们来聊聊C++多态吧，理解它，并找到它》中我们没有说到的内容，为什么在虚构函数中，要对多态表重新赋值。</p><p>在上例中，析构函数的执行顺序如下：</p><p>子类析构函数 -&gt; 父类析构函数               </p><p>那么问题出现了，假设在这两个析构函数中同时调用虚函数，如果在析构函数中没有对虚函数表重新赋值，那么在父类的析构函数中就会调用子类的析构函数，而这个时候子类也许有一些资源已经释放了，那么问题就已经很清晰了，内存泄漏！</p><p><img src="/img/1571159873270.png" alt="1571159873270"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们先通过一段代码来理解继承的底层实现。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="C++" scheme="https://www.basicbit.cn/categories/C/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>多重继承？抽象类？C++的内存布局并不复杂</title>
    <link href="https://www.basicbit.cn/2018/11/12/2018-11-13-%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%EF%BC%8C%E6%8A%BD%E8%B1%A1%EF%BC%8C%E7%BB%88%E7%BB%93%E7%AF%87/"/>
    <id>https://www.basicbit.cn/2018/11/12/2018-11-13-多重继承，抽象，终结篇/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-10-16T14:04:54.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h1><p>先来看看多重继承吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cFa</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cFa() &#123;&#125;;</span><br><span class="line"><span class="keyword">virtual</span> ~cFa() &#123;  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cMo</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cMo() &#123;&#125;;</span><br><span class="line"><span class="keyword">virtual</span> ~cMo() &#123; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cChild</span> :</span> <span class="keyword">public</span> cFa, <span class="keyword">public</span> cMo &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">cChild() &#123;&#125;;</span><br><span class="line"><span class="keyword">virtual</span> ~cChild() &#123; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cChild cCh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">001917DD  pop         ecx  </span><br><span class="line">001917FC  mov         ecx,dword ptr [this]  ;取出this指针</span><br><span class="line">001917FF  call        cFa::cFa (01913B1h)  ;调用cFa构造函数</span><br><span class="line">00191804  mov         dword ptr [ebp-4],0  ;异常计数 可以忽略</span><br><span class="line">0019180B  mov         ecx,dword ptr [this]  ;获取this指针</span><br><span class="line">0019180E  add         ecx,4  ;this指针偏移</span><br><span class="line">00191811  call        cMo::cMo (0191302h) ;调用cMo的构造函数  </span><br><span class="line">00191816  mov         eax,dword ptr [this]  ;获取this指针</span><br><span class="line">00191819  mov         dword ptr [eax],offset cChild::`vftable&apos; (0198B4Ch)  ;设置虚函数表</span><br><span class="line">0019181F  mov         eax,dword ptr [this]  ;获取this指针</span><br><span class="line">00191822  mov         dword ptr [eax+4],offset cChild::`vftable&apos; (0198B58h)  ;设置第二个虚函数表</span><br><span class="line">00191829  mov         dword ptr [ebp-4],0FFFFFFFFh  </span><br><span class="line">00191830  mov         eax,dword ptr [this]  ;返回this指针</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>在上面的代码，我们看出构造函数的调用顺序是根据，从左到右的继承顺序来依次调用父类函数的</p><p>在调用cFa的构造函数时，直接传递了this指针，也就是cCh的地址，而在调用cMo的时候，传递的是this指针加4个字节的地址，也就是跳过了cFa所占的空间。</p><p>那么也就是说，父类对象在子类的内存布局的顺序和构造函数的调用顺序是一样的，那么现在cCh对象的内存结构如下图：</p><p><img src="/img/1571226517696.png" alt="1571226517696"></p><p>来看看这两个父类的构造函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">CFa:</span><br><span class="line">......</span><br><span class="line">001918AD  mov         eax,dword ptr [this]  </span><br><span class="line">001918B0  mov         dword ptr [eax],offset cFa::`vftable&apos; (0198B34h)  </span><br><span class="line">001918B6  mov         eax,dword ptr [this]  </span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cMo:</span><br><span class="line">......</span><br><span class="line">0019190D  mov         eax,dword ptr [this]  </span><br><span class="line">00191910  mov         dword ptr [eax],offset cMo::`vftable&apos; (0198B40h)  </span><br><span class="line">00191916  mov         eax,dword ptr [this]  </span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>过滤掉了一些无用的代码，构造函数和非多重继承无任何区别，只是将传进来的对象的虚表换成自己的虚表。</p><p> <strong>有营养的部分来了：</strong></p><p>两个构造函数结束后，出现了两个虚表赋值，为什么是两个虚表？</p><p>因为有两个父类，当调用父类函数的时候，需要通过偏移取得父类对象，传递指针，并调用函数。</p><p>这两个虚表在本例中意义不大，因为子类没有覆盖父类的虚函数，如果有覆盖的情况出现，这两个虚表中会保存子类覆盖的虚函数，和父类未覆盖的虚函数。那么调用就很简单了，虚表偏移。</p><p>析构函数就不上代码了，和构造函数的顺序恰巧相反。</p><p>如果在main函数中添加一行如下代码会发生什么？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cMo *pMo = (cMo*)&amp;cCh;</span><br></pre></td></tr></table></figure><p>编译器会找到cCh的地址，根据cCh父类中的cMo对象的偏移位置，获取到cCh父类中的cMo的地址，并返回赋值给pMo。</p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>上代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CAbstractBase</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CAbstractChild</span> :</span> <span class="keyword">public</span> CAbstractBase&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"show"</span>); &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CAbstractChild cAb;</span><br><span class="line">cAb.Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不说废话，直接进入子类的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">;CAbstractChild 构造函数</span><br><span class="line">......</span><br><span class="line">00A1198F  pop         ecx  </span><br><span class="line">00A11990  mov         dword ptr [this],ecx  </span><br><span class="line">00A11993  mov         ecx,dword ptr [this]  </span><br><span class="line">00A11996  call        CAbstractBase::CAbstractBase (0A11474h)  </span><br><span class="line">00A1199B  mov         eax,dword ptr [this]  ;获取this指针</span><br><span class="line">00A1199E  mov         dword ptr [eax],offset CAbstractChild::`vftable&apos; (0A18B40h)  ;虚函数表初始化</span><br><span class="line">00A119A4  mov         eax,dword ptr [this] ;返回this指针</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">;CAbstractBase 构造函数</span><br><span class="line">......</span><br><span class="line">00A118BF  pop         ecx  </span><br><span class="line">00A118C0  mov         dword ptr [this],ecx  </span><br><span class="line">00A118C3  mov         eax,dword ptr [this]  ;获取this指针</span><br><span class="line">00A118C6  mov         dword ptr [eax],offset CAbstractBase::`vftable&apos; (0A18B34h)  ;虚函数表初始化</span><br><span class="line">00A118CC  mov         eax,dword ptr [this]  ;返回this指针</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>看起来似乎和普通的继承没什么不同？</p><p>我们来看看CAbstractBase中的虚函数表（0A18B34h）指向的Show函数吧。</p><p><img src="/img/1571230318091.png" alt="1571230318091"></p><p>它的调用约定是__purecall （IDA会识别出来） ，这个函数实际上并不是CAbstractBase的Show函数，而是编译器生成一个函数，这个函数的主要作用就是调用 _amsg_exit函数来结束程序，并返回错误码 0x19。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里包含上篇文章的总结《我们聊聊继承吧，从继承的角度出发再来聊聊多态》</p><p><strong>单类继承：</strong></p><ul><li>在类对象占用的内存空间，只保留一份虚表指针，也就只有一个虚表</li><li>虚表中各项保存了类中各虚函数的首地址</li><li>构造函数先构造父类，在构造自身</li><li>析构函数先析构自身，在析构父类</li></ul><p><strong>多重继承：</strong></p><ul><li>在类对象所占用的内存空间中，根据继承父类的个数保存对应的虚表指针</li><li>根据所保存的虚表指针的个数，对应产生相应个数的虚表</li><li>转换父类指针时，需要调整到对象的首地址</li><li>构造时需要调用多个父类构造函数</li><li>构造时先构造继承列表中第一个父类，然后依次调用到最后一个继承的父类构造函数。</li><li>析构与构造顺序相反</li><li>当对象作为成员时，整个类对象的内存结构和多重继承很相似。当类中无虚函数时，整个类对象内存结构和多重继承完全一样，可按实际情况进行还原，当父类或成员对象存在虚函数，通过观察虚表指针的位置和构造函数、析构函数中填写虚表指针的数量及目标地址，来还原继承或成员关系。</li></ul><p><img src="/img/1571159873270.png" alt="1571159873270"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多重继承&quot;&gt;&lt;a href=&quot;#多重继承&quot; class=&quot;headerlink&quot; title=&quot;多重继承&quot;&gt;&lt;/a&gt;多重继承&lt;/h1&gt;&lt;p&gt;先来看看多重继承吧&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="C++" scheme="https://www.basicbit.cn/categories/C/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>局部静态变量只能初始化一次？它是怎么实现的</title>
    <link href="https://www.basicbit.cn/2018/11/12/2018-11-14-10%E5%88%86%E9%92%9F%E7%A0%B4%E8%A7%A3%E6%94%B6%E9%93%B6%E8%BD%AF%E4%BB%B6/"/>
    <id>https://www.basicbit.cn/2018/11/12/2018-11-14-10分钟破解收银软件/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-10-21T10:05:30.827Z</updated>
    
    <content type="html"><![CDATA[<p>一个朋友在理发店工作，需要一款收银软件，这种东西还用想？百度一大堆，我去百度Down了两个，在云沙箱上跑，都有恶意代码。</p><p>后来就有了这篇文章。</p><p>我在xxxx官网下载了一款试用版的，有限制，进入正文。</p><p>软件是这个样子的</p><p><img src="/img/1571567963572.png" alt="1571567963572"></p><p>我简单运行了一下，添加会员会有人数限制，一会再来说这些吧。</p><p>PEID查壳：</p><p><img src="/img/1571568122093.png" alt="1571568122093"></p><p>.Net ??  记得dnspy这款神器吗？ 没了解过没关系，2分钟后你就会见识到它的强大。</p><p> IntelliLock v.1.5.x.0 直接用d4dot来搞定，你可能不认识这款工具百度down下来就好了。</p><p>下载好之后，打开cmd，并进入这款软件的目录，d4dot的使用非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们采用第二种方法，d4dot -r “目录” 输出如下：</p><p><img src="/img/1571568768381.png" alt="1571568768381"></p><p>这款软件会将解密的文件，做一个备份，名字就是源文件名后面加一个clean，类似这样：</p><p><img src="/img/1571568831859.png" alt="1571568831859"></p><p>如果文件不需要解密，将不会产生这个文件。</p><p>现在我们把解密后的文件，和无需解密的文件复制出来，放在一个新的文件夹中，并将解密的文件名中多余的-cleaned删除掉，就把这个文件夹命名为Unpacked01吧。</p><p>现在我们针对Unpacked01文件夹，再次执行一遍上面的步骤，生成Unpacked02文件夹。</p><p>脱壳结束了？对就是这么easy。</p><p>轮到神器dnspy登场了，使用dnspy软件打开Unpacked02文件夹中的主程序文件，也就是INTMS.exe，如下图。</p><p><img src="/img/1571569395715.png" alt="1571569395715"></p><p>C#大佬可以关闭这个页面了。</p><p>这是什么？源码，没错，还支持源码调试呢。</p><p>还记得文首说的软件限制吗，先来看看限制的提示吧。</p><p><img src="/img/1571569764482.png" alt="1571569764482"></p><p>关键点怎么找？直接搜索添加会员Button的名字就行了，源码摆在那，随你怎么玩。</p><p><img src="/img/1571569880657.png" alt="1571569880657"></p><p>上图就是关键点，代码我已经修改过了，SoftType支持两个参数，一个是加密狗模式，一个是测试模式，运行的时候根据这个参数来进行不同的限制，如果不在二者其一，就会跳过限制代码。</p><p>只要将SoftType改为不在这两个模式中就可以了，我就随便改了个数字。</p><p>现在再去添加会员就看不到温馨提示了。</p><p>搞定。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个朋友在理发店工作，需要一款收银软件，这种东西还用想？百度一大堆，我去百度Down了两个，在云沙箱上跑，都有恶意代码。&lt;/p&gt;
&lt;p&gt;后来就有了这篇文章。&lt;/p&gt;
&lt;p&gt;我在xxxx官网下载了一款试用版的，有限制，进入正文。&lt;/p&gt;
&lt;p&gt;软件是这个样子的&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="C++" scheme="https://www.basicbit.cn/categories/C/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基于SEH二次封装的异常处理 - 之数据结构篇</title>
    <link href="https://www.basicbit.cn/2018/11/12/2018-11-14-C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/"/>
    <id>https://www.basicbit.cn/2018/11/12/2018-11-14-C++异常处理的二次封装/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-10-18T14:25:47.360Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/1571397583862.png" alt="1571397583862"></p><p>本文将围绕上图来介绍C++异常的数据结构。</p><p>在C++中如果函数中包含异常处理，将会在此函数中的开始部分注册一个异常回调函数，当函数中有异常抛出的时候，便会调用这个回调函数，也就是在SEH中注册一个函数（异常回调函数）。</p><p>这个异常回调函数指向的地址的汇编码通常是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00D963A4  mov         eax,0D9A064h  </span><br><span class="line">00D963A9  jmp         ___CxxFrameHandler3 (0D910FFh)</span><br></pre></td></tr></table></figure><p>很明显代码中的eax的值保存了关键信息。</p><p>这个0D9A064h所指向的地址就是上图中的FuncInfo结构体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FuncInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD magicNumber; <span class="comment">//编译器生成的固定数字</span></span><br><span class="line">    DWORD maxState; <span class="comment">//最大栈展开数的下标值</span></span><br><span class="line">    DWORD pUnwindMap; <span class="comment">//指向栈展开函数表的指针，指向UnwindMapEntry表结构</span></span><br><span class="line">    DWORD dwTryCount; <span class="comment">//try块的数量</span></span><br><span class="line">    DWORD pTryBlockMap; <span class="comment">//try块列表，指向TryBlockMapEntry结构体</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个struct包含了两个struct，分别为UnwindMapEntry和TryBlockMapEntry。</p><p>先来看看UnwindMapEntry，UnwindMapEntry表配合maxState项来使用。</p><p>maxState记录了异常发生时try块展开的次数，展开时执行的函数由UnwindMapEntry表结构记录，结构体信息如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在try块展开的过程中，可能存在多个对象，每个对象的析构信息会以数组的形式记录。</p><p>toState用来判断结构是否位于数组中，lpFuncAction保存析构函数所在的地址。</p><p>TryBlockMapEntry结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TryBlockMapEntry</span>&#123;</span></span><br><span class="line">    DWORD tryLow  ;<span class="comment">//try块的最小状态索引，用于范围检查</span></span><br><span class="line">    DWORD tryHigh ;<span class="comment">//try块的最大状态索引，用于范围检查</span></span><br><span class="line">    DWORD catchHigh ;<span class="comment">//catch块的最高状态索引，用域范围检查</span></span><br><span class="line">    DWORD dwCatchCount; <span class="comment">//catch块个数</span></span><br><span class="line">    DWORD pCatchHandlerArray ; <span class="comment">//catch块的描述，指向_msRttiDscr表结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个struct用于判断异常产生在哪个try块中。t</p><p>ryLow和tryHigh用于检查长生的异常是否来源于try块中。</p><p>catchHigh用于匹配catch块时的检查项。</p><p>每个catch块都会对应一个_msRttiDscr表结构，保存在pCatchHandlerArray指向的地址中（数组方式存放）。</p><p>再来看看_msRttiDscr吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">msRttiDscr</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD nFlag ;<span class="comment">//用域catch块的匹配检查</span></span><br><span class="line">    DWORD pType ;<span class="comment">//catch块要捕捉的类型，指向TypeDescriptor表结构</span></span><br><span class="line">    DWORD dispCatchObjOffset; <span class="comment">//同于定位异常对象在当前EBP中的偏移位置</span></span><br><span class="line">    DWORD CatchProc; <span class="comment">//catch块的首地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nFlag同来检查catch块匹配的类型，含义值如下：</p><ul><li>1：常量</li><li>2：变量</li><li>4：未知</li><li>8：引用</li></ul><p>此结构中的pType和CatchProc为关键数据，当抛出异常对象时，需要赋值抛出的异常对象信息，dispCatchObjOffset用于定位异常对象在当前EBP中的偏移位置。</p><p>CatchProc项中保存了异常处理catch块的首地址，这样在匹配异常后，就可以正确的执行catch语句块，异常的匹配信息记录在pType所指向的结构中，结构信息如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当异常发生时，就可以通过以上信息于抛出异常时的信息进行对比，得到对应表的结构，最后通过_msRttiDscr表中的CatchProc项得到catch块的首地址。从而走到正确的catch块中。</p><p>现在我们再来说说throw吧，抛出异常时的代码通常如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00D918BC  push        offset __TI1H (0D9A094h)  </span><br><span class="line">00D918C1  lea         eax,[ebp-0F0h]  </span><br><span class="line">00D918C7  push        eax  </span><br><span class="line">00D918C8  call        __CxxThrowException@8 (0D913A7h)</span><br></pre></td></tr></table></figure><p>在抛出一场函数时传递了一个全局参数__TI1H。</p><p>这个地址中指向就是抛出异常时需要的结构信息ThrowInfo：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述结构体包含了类型信息，用于匹配抛出的异常类型。</p><p>nFlag = 1= 常量类型异常</p><p>nFlag = 2 = 变量类型异常</p><p>由于在try块中发生异常后不会再反汇try块中，pDestructor的作用就是记录try块中的异常对象的析构函数地址，在异常处理完成后调用。</p><p>抛出异常所对应的catch块的类型信息就被记录在pCatchTableTypeArray所指向的结构中。</p><p>结构体CatchTableTypeArray如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ppCatchTableType指向指针数组，里面保存了CatchTableType的地址列表。</p><p>dwCount来描述数组中有多少个元素。</p><p>来看看CatchTableType里面有什么：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还记得上文中的TypeDescriptor结构吗，在异常处理的时候，可以与上述结构中的pTypeInfo进行对比，并找到正确的catch块。</p><p>flag标记用于判断异常对象属于那种类型，类如，指针、引用等。</p><p>标记值含义如下：</p><ul><li>0x1：简单类型复制</li><li>0x2：已被捕获</li><li>0x4：有虚表基类复制</li><li>0x8：指针和引用类型复制</li></ul><p>如果异常类型是对象，那么就会把他们的结构信息存储下来，存储在thisDisPlacement中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上就是C++异常处理所用到的所有的数据结构，建议读者阅读结束后，再看下文首中的图片加深记忆。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/1571397583862.png&quot; alt=&quot;1571397583862&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文将围绕上图来介绍C++异常的数据结构。&lt;/p&gt;
&lt;p&gt;在C++中如果函数中包含异常处理，将会在此函数中的开始部分注册一个异常回调函数，当函数中有异
      
    
    </summary>
    
      <category term="C++" scheme="https://www.basicbit.cn/categories/C/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基于SEH二次封装的异常流程与识别</title>
    <link href="https://www.basicbit.cn/2018/11/12/2018-11-14-C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E6%B5%81%E7%A8%8B%E4%B8%8E%E8%AF%86%E5%88%AB/"/>
    <id>https://www.basicbit.cn/2018/11/12/2018-11-14-C++异常处理的流程与识别/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-10-19T17:24:36.741Z</updated>
    
    <content type="html"><![CDATA[<p>在茫茫的汇编中，怎么来识别try结构呢？</p><p>在看代码之前我们先连简单的看下try的处理流程吧</p><ul><li>函数入口设置回调函数</li><li>函数的异常抛出使用了__CxxThrowException函数，此函数包含了两个参数，分别是抛出一场关键字的throw的参数的指针，另一个抛出信息类型的指针（ThrowInfo *）。</li><li>在异常回调函数中，可以得到异常对象的地址和对应ThrowInfo数据的地址以及FunInfo表结构的地址。根据记录的异常类型，进行try块的匹配工作</li><li>没找到try块怎么办？先调用异常对象的析构函数，然后反汇ExcetionContinueSearch，继续反回到SEH继续执行。</li><li>找到了try块？通过TryBlockMapEntry结构中的pCatch指向catch信息，用ThrowInfo结构中的异常类型遍历查找相匹配的catch块，比较关键字名称，找到有效的catch块。</li><li>然后进行栈展开。</li><li>析构try块中的对象</li><li>跳转到catch块中执行</li><li>调用_JumpToContinuation函数，返回catch语句块的结束地址。</li></ul><p>上面的步骤，就是典型的异常处理的顺序。</p><p>光看文字多无趣，上代码 - 实例分析，我们来跑一遍：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CExcepctionBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CExcepctionBase()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"CExcepctionBase() \r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~CExcepctionBase()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"~CExcepctionBase()\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CExcepctionDiv0</span> :</span> <span class="keyword">public</span> CExcepctionBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CExcepctionDiv0()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"CExcepctionDiv0()\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~CExcepctionDiv0()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"~CExcepctionDiv0()\r\n"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取错误码</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> * <span class="title">GetErrorInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"CExcepctionDiv0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_nErrorId ;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CExcepctionAccess</span> :</span> <span class="keyword">public</span> CExcepctionBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CExcepctionAccess()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"CExcepctionAccess()\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">virtual</span> ~CExcepctionAccess()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"~CExcepctionAccess()\r\n"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取错误码</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> * <span class="title">GetErrorInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"CExcepctionAccess"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestException</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="number">3.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">'3'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="number">3.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> CExcepctionDiv0();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> CExcepctionAccess();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">CExcepctionBase cExceptBase;</span><br><span class="line"><span class="keyword">throw</span> cExceptBase;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch int \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">float</span> f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch float \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">char</span> c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch char \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">double</span> d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch double \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(CExcepctionBase cBase)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch CExcepctionBase \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(CExcepctionAccess cAccess)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch int \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(...)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"catch ... \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">TestException(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看看函数开始的代码吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text:004011A5                 push    offset SEH_4011A0</span><br><span class="line">.text:004011AA                 mov     eax, large fs:0</span><br><span class="line">.text:004011B0                 push    eax</span><br><span class="line">.text:004011B1                 sub     esp, 40h</span><br><span class="line">.text:004011B4                 push    ebx</span><br><span class="line">.text:004011B5                 push    esi</span><br><span class="line">.text:004011B6                 push    edi</span><br><span class="line">.text:004011B7                 mov     eax, ___security_cookie</span><br><span class="line">.text:004011BC                 xor     eax, ebp</span><br><span class="line">.text:004011BE                 push    eax</span><br><span class="line">.text:004011BF                 lea     eax, [ebp+var_C]</span><br><span class="line">.text:004011C2                 mov     large fs:0, eax</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>函数开始将异常回调函数压栈，在上文结尾的部分将此函数加入SEH中，这里并不讲解SEH相关信息，除了设置异常回调函数，和参数压栈还设置了security_cookie，防止栈溢出的检查数据，在此同样不予讲述。</p><p>我们走进SEH_4011A0看下实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">.text:0040CAB1                 mov     eax, offset stru_40F53C</span><br><span class="line">.text:0040CAB6                 jmp     ___CxxFrameHandler3</span><br></pre></td></tr></table></figure><p>无疑此项就是编译器产生的异常回调函数。</p><p>继续看异常抛出的部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">.text:004011CE                 mov     [ebp+var_4], 0</span><br><span class="line">.text:004011D5                 cmp     eax, 1</span><br><span class="line">.text:004011D8                 jnz     short loc_4011EB</span><br><span class="line">.text:004011DA                 mov     [ebp+var_18], eax</span><br><span class="line">.text:004011DD                 push    offset __TI1H  ;ThrowInfo</span><br><span class="line">.text:004011E2                 lea     eax, [ebp+var_18];获取参数</span><br><span class="line">.text:004011E5                 push    eax;压栈参数</span><br><span class="line">.text:004011E6                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>熟悉的__CxxThrowException？没错他就是用来抛出异常的函数。</p><p>这里的__TI1H就是ThrowInfo结构，那么var_18也就是throw关键字后面跟随的数据。</p><p>后面连续的几个throw语句也差不多。</p><p>直到抛出对象的时候，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">......</span><br><span class="line">.text:0040123A loc_40123A:                             ; CODE XREF: sub_4011A0+81↑j</span><br><span class="line">.text:0040123A                 cmp     eax, 5</span><br><span class="line">.text:0040123D                 jnz     short loc_401255</span><br><span class="line">.text:0040123F                 lea     ecx, [ebp+var_34]</span><br><span class="line">.text:00401242                 call    sub_401030</span><br><span class="line">.text:00401247                 push    offset __TI2?AVCExcepctionDiv0@@ ;</span><br><span class="line">.text:0040124C                 lea     ecx, [ebp+var_34]</span><br><span class="line">.text:0040124F                 push    ecx</span><br><span class="line">.text:00401250                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>这里很在抛出异常之前调用了一个函数sub_401030，这个函数的作用就是设置var_34的值，后面与前面的基本相同。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">.text:00401048                 mov     dword ptr [esi], offset ??_7CExcepctionDiv0@@6B@ ; const CExcepctionDiv0::`vftable&apos;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>IDA友情提示，这是一个虚表。</p><p>这两个函数代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.text:004010A0 ; int __thiscall sub_4010A0(void *, char)</span><br><span class="line">.text:004010A0 sub_4010A0      proc near               ; DATA XREF: .rdata:const CExcepctionDiv0::`vftable&apos;↓o</span><br><span class="line">.text:004010A0</span><br><span class="line">.text:004010A0 arg_0           = byte ptr  8</span><br><span class="line">.text:004010A0</span><br><span class="line">.text:004010A0                 push    ebp</span><br><span class="line">.text:004010A1                 mov     ebp, esp</span><br><span class="line">.text:004010A3                 push    esi</span><br><span class="line">.text:004010A4                 mov     esi, ecx</span><br><span class="line">.text:004010A6                 push    offset aCexcepctiondiv ; &quot;~CExcepctionDiv0()\r\n&quot;</span><br><span class="line">.text:004010AB                 mov     dword ptr [esi], offset ??_7CExcepctionDiv0@@6B@ ; const CExcepctionDiv0::`vftable&apos;</span><br><span class="line">.text:004010B1                 call    _printf</span><br><span class="line">.text:004010B6                 push    offset aCexcepctionbas ; &quot;~CExcepctionBase()\r\n&quot;</span><br><span class="line">.text:004010BB                 mov     dword ptr [esi], offset ??_7CExcepctionBase@@6B@ ; const CExcepctionBase::`vftable&apos;</span><br><span class="line">.text:004010C1                 call    _printf</span><br><span class="line">.text:004010C6                 add     esp, 8</span><br><span class="line">.text:004010C9                 test    [ebp+arg_0], 1</span><br><span class="line">.text:004010CD                 jz      short loc_4010D8</span><br><span class="line">.text:004010CF                 push    esi             ; void *</span><br><span class="line">.text:004010D0                 call    ??3@YAXPAX@Z    ; operator delete(void *)</span><br><span class="line">.text:004010D5                 add     esp, 4</span><br><span class="line">.text:004010D8</span><br><span class="line">.text:004010D8 loc_4010D8:                             ; CODE XREF: sub_4010A0+2D↑j</span><br><span class="line">.text:004010D8                 mov     eax, esi</span><br><span class="line">.text:004010DA                 pop     esi</span><br><span class="line">.text:004010DB                 pop     ebp</span><br><span class="line">.text:004010DC                 retn    4</span><br><span class="line">.text:004010DC sub_4010A0      endp</span><br></pre></td></tr></table></figure><p>在004010C9地址处做了一个判断，根据传入参数来决定是否释放空间(标准的虚析构函数)，因为IDA载入了pdb文件，所以通过IDA的注释可以很清晰的理解这个函数是CExcepctionDiv0的析构函数。</p><p>另一个函数代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:00401090</span><br><span class="line">.text:00401090 sub_401090      proc near               ; DATA XREF: .rdata:0040D180↓o</span><br><span class="line">.text:00401090                 mov     eax, offset aCexcepctiondiv_1 ; &quot;CExcepctionDiv0&quot;</span><br><span class="line">.text:00401095                 retn</span><br><span class="line">.text:00401095 sub_401090      endp</span><br></pre></td></tr></table></figure><p>这个函数就很简单了直接返回字符串“CExcepctionDiv0”。</p><p>在以上的代码来看识别throw语句并不困难，只要找到__CxxThrowException函数就可以找到throw语句了，并根据throw传递的参数，可以断定抛出的数据类型。</p><p>来看看catch吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:00401295 loc_401295:                             ; DATA XREF: .rdata:0040F570↓o</span><br><span class="line">.text:00401295 ;   catch(float) // owned by 4011CE</span><br><span class="line">.text:00401295                 push   offset aCatchFloat ; &quot;catch float \n&quot;</span><br><span class="line">.text:0040129A                 call    _printf</span><br><span class="line">.text:0040129F                 add     esp, 4</span><br><span class="line">.text:004012A2                 mov     eax, offset loc_4012A8</span><br><span class="line">.text:004012A7                 retn</span><br><span class="line">.text:004012A7 ;   &#125; // starts at 4011CE</span><br><span class="line">.text:004012A7 ; &#125; // starts at 4011A0</span><br></pre></td></tr></table></figure><p>同样IDA通过pdb文件为我们做出了友好的注释，但是所有的catch语句都会具有以下特点：</p><ul><li>没有平衡函数开始的堆栈</li><li>返回时将eax赋值为一个地址</li></ul><p>通过这两个特点来找到catch语句块是不是很轻松呢，毕竟不平衡堆栈就返回的情况可以说是极少数了吧。</p><p>其他的catch我们就不看了，代码都是类似的，那么赋值给eax的地址里面保存了何方神圣？</p><p>来看一看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.text:004012A8 loc_4012A8:                             ; CODE XREF: sub_4011A0+107↑j</span><br><span class="line">.text:004012A8                                         ; DATA XREF: sub_4011A0+102↑o</span><br><span class="line">.text:004012A8                 mov     ecx, [ebp+var_C]</span><br><span class="line">.text:004012AB                 mov     large fs:0, ecx</span><br><span class="line">.text:004012B2                 pop     ecx</span><br><span class="line">.text:004012B3                 pop     edi</span><br><span class="line">.text:004012B4                 pop     esi</span><br><span class="line">.text:004012B5                 pop     ebx</span><br><span class="line">.text:004012B6                 mov     esp, ebp</span><br><span class="line">.text:004012B8                 pop     ebp</span><br><span class="line">.text:004012B9                 retn</span><br></pre></td></tr></table></figure><p>这样看起来是不是合理多了，没错这个地址的代码就是用来恢复函数开始压入到堆栈的数据（平衡堆栈）。</p><p>我们也可以通过以下的规则来找出catch语句块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CATCH0_BEGIN: //IDA中的地址标号</span><br><span class="line">....  //CATCH实现代码</span><br><span class="line">mov eax, CATCH_END ; 函数平衡堆栈的代码</span><br><span class="line">retn</span><br><span class="line"></span><br><span class="line">PS:如果同一个函数包含多个catch语句块，那么后面他们一定时挨着的。</span><br></pre></td></tr></table></figure><p>避免篇幅庞大，将不在列出后续catch代码。</p><p><strong>结构体一揽？从ThrowInfo开始看起吧：</strong></p><p>还记得上文中提过的__TI1H吗，这是IDA为我们生成的名字，他就是我们要找的ThrowInfo，双击进去看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__TI1H          ThrowInfo &lt;0, 0, 0, 40F5D0h&gt;</span><br></pre></td></tr></table></figure><p>这个结构体是我自己创建的，为了方便观察。</p><p>根据ThrowInfo的定义（具体请看我的上一篇文章），第四个参数也就是40F5D0h便是CatchTableTypeArray。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.rdata:0040F5D0 __CTA1H         dd 1                    ; count of catchable type addresses following</span><br><span class="line">.rdata:0040F5D4                 dd offset __CT??_R0H@8 ; catchable type &apos;int&apos;</span><br></pre></td></tr></table></figure><p>这个结构体的第二项是pTypeInfo，指向异常类型结构TypeDescriptor，双击进去看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.rdata:0040F5D8 __CT??_R0H@8    dd CT_IsSimpleType      ; DATA XREF: .rdata:0040F5D4↑o</span><br><span class="line">.rdata:0040F5D8                                         ; attributes</span><br><span class="line">.rdata:0040F5DC                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor&apos;</span><br></pre></td></tr></table></figure><p>上面代码的第二个dd是识别错误，它实际上是.H代表的是int类型，IDA为ThrowInfo命名的最后一个字母对应的就是这个类型，当然除了.H还有其他字母例如：</p><ul><li>.M = float</li><li>.D = char</li><li>.N = double</li><li>……</li></ul><p><strong>从catch块入手，得到catch语句的信息</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:00401295 loc_401295:                             ; DATA XREF: .rdata:0040F570↓o</span><br><span class="line">.text:00401295                 push    offset aCatchFloat ; &quot;catch float \n&quot;</span><br><span class="line">.text:0040129A                 call    _printf</span><br><span class="line">.text:0040129F                 add     esp, 4</span><br><span class="line">.text:004012A2                 mov     eax, offset loc_4012A8</span><br><span class="line">.text:004012A7                 retn</span><br></pre></td></tr></table></figure><p>在loc_401295的右侧我们看到IDA给我们标出来的注释，这个注释代表此地址的引用位置，双击进去看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.rdata:0040F570                 HandlerType &lt;0, offset ??_R0M@8, -60, offset loc_401295&gt; ; float `RTTI Type Descriptor&apos;</span><br></pre></td></tr></table></figure><p>这个HandlerType实际就是_msRttiDscr，根据结构定义，最后一项就是CatchProc，也就是catch语句块起始处的地址。</p><p>实际上在0040F570附近定义了此函数中所有的catch块，可以通过这一个_msRttiDscr找到此函数中所有_msRttiDscr的信息，也就可以找到所有的catch语句块了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在茫茫的汇编中，怎么来识别try结构呢？&lt;/p&gt;
&lt;p&gt;在看代码之前我们先连简单的看下try的处理流程吧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数入口设置回调函数&lt;/li&gt;
&lt;li&gt;函数的异常抛出使用了__CxxThrowException函数，此函数包含了两个参数，分别是抛出一场关
      
    
    </summary>
    
      <category term="C++" scheme="https://www.basicbit.cn/categories/C/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>局部静态变量只能初始化一次？它是怎么实现的</title>
    <link href="https://www.basicbit.cn/2018/11/12/2018-11-14-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/"/>
    <id>https://www.basicbit.cn/2018/11/12/2018-11-14-静态变量/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-10-18T10:36:47.863Z</updated>
    
    <content type="html"><![CDATA[<p>静态变量可以分为全局静态变量，和局部静态变量，先来说说全局的吧</p><p>全局静态变量和全局变量的区别并不大，只是全局静态变量只能在当前文件中使用，而在反汇编中二者并无区别，只可以在当前文件中使用，不过是编译器做出的限制。</p><p>局部静态变量，会有些特殊，它不会随着作用域结束而消失，在未进入作用于之前就已经存在。</p><p>局部静态变量和全局变量都保存在二进制文件的数据区，而在代码中的限制，不过是编译器限制而已。</p><p>那么当某个函数频繁调用局部静态变量时，C++的语法规定局部静态变量只能初始化一次，那么编译器是怎么做到的呢。</p><p>来看代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowStatic</span><span class="params">(<span class="keyword">int</span> nNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> gnNumber = nNum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, gnNumber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00E51738  mov         eax,dword ptr ds:[00E5A148h]  </span><br><span class="line">00E5173D  and         eax,1  </span><br><span class="line">00E51740  jne         ShowStatic+47h (0E51757h)  </span><br><span class="line">00E51742  mov         eax,dword ptr ds:[00E5A148h]  </span><br><span class="line">00E51747  or          eax,1  </span><br><span class="line">00E5174A  mov         dword ptr ds:[00E5A148h],eax  </span><br><span class="line">00E5174F  mov         eax,dword ptr [nNum]  </span><br><span class="line">00E51752  mov         dword ptr [gnNumber (0E5A144h)],eax</span><br></pre></td></tr></table></figure><p>可以看出，静态变量的赋值比普通变量赋值多了很多步骤，我们来分析下。</p><p>首先在地址00E5A148h中保存了局部静态变量的标志，这个标志占1个字节。通过位运算，将标志中的一位数据置1，来判断局部静态变量是否初始化过。而这个标志可以同时保存8个局部静态变量的初始状态。</p><p>通常这个标志出现在最先定义的局部静态变量的附近，例如此例局部变量应出现在 00E5A144h 或 00E5A14Ch中。当同一个作用域内超过了8个静态局部变量，下一个标记将会除了现在第9个定义的局部静态变量地址的附近。</p><p>现在再来看上面的汇编代码就很清晰了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00E51738  mov         eax,dword ptr ds:[00E5A148h]  </span><br><span class="line">00E5173D  and         eax,1  </span><br><span class="line">00E51740  jne         ShowStatic+47h (0E51757h)</span><br></pre></td></tr></table></figure><p>判断是否已经初始化，如果已经初始化就跳转到printf输出内容，否则不跳转继续执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00E51742  mov         eax,dword ptr ds:[00E5A148h]  </span><br><span class="line">00E51747  or          eax,1  </span><br><span class="line">00E5174A  mov         dword ptr ds:[00E5A148h],eax  </span><br><span class="line">00E5174F  mov         eax,dword ptr [nNum]  </span><br><span class="line">00E51752  mov         dword ptr [gnNumber (0E5A144h)],eax</span><br></pre></td></tr></table></figure><p>未初始化的情况，将标志位置位为1，并初始化gnNumber。</p><p>结束了？并没有</p><p>还有这样一个问题，编译器让其他作用域对局部静态变量不可见，这是怎么做到的？</p><p>在编译的过程中，编译器会对变量，函数等进行名称粉碎，也就是静态变量被重新命名了。</p><p>读者可将上面的代码编译链接，然后找到编译期结束后生成的obj文件，在这个文件中搜索静态变量的名字(本文用HxD软件打开obj文件)，搜索结果如下图：</p><p><img src="/img/1571316371117.png" alt="1571316371117"></p><p>名称粉碎后，在原有名称中加加入了一些额外信息，入作用域，类型等。</p><p>像C++重载也是名称粉碎的原理。</p><p>下面的汇编是在C++11中编译的结果，显然和上文的有些差距：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">static int gnNumber = nNum;</span><br><span class="line">00C11818  mov         eax,dword ptr [_tls_index (0C1B190h)]  </span><br><span class="line">00C1181D  mov         ecx,dword ptr fs:[2Ch]  </span><br><span class="line">00C11824  mov         edx,dword ptr [ecx+eax*4]  </span><br><span class="line">00C11827  mov         eax,dword ptr ds:[00C1B150h]  </span><br><span class="line">00C1182C  cmp         eax,dword ptr [edx+104h]  </span><br><span class="line">00C11832  jle         ShowStatic+6Fh (0C1185Fh)  </span><br><span class="line">00C11834  push        0C1B150h  </span><br><span class="line">00C11839  call        __Init_thread_header (0C110DCh)  </span><br><span class="line">00C1183E  add         esp,4  </span><br><span class="line">00C11841  cmp         dword ptr ds:[0C1B150h],0FFFFFFFFh  </span><br><span class="line">00C11848  jne         ShowStatic+6Fh (0C1185Fh)  </span><br><span class="line">00C1184A  mov         eax,dword ptr [nNum]  </span><br><span class="line">00C1184D  mov         dword ptr [gnNumber (0C1B14Ch)],eax  </span><br><span class="line">00C11852  push        0C1B150h  </span><br><span class="line">00C11857  call        __Init_thread_footer (0C11177h)  </span><br><span class="line">00C1185C  add         esp,4</span><br></pre></td></tr></table></figure><p>前三行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00C11818  mov         eax,dword ptr [_tls_index (0C1B190h)]  </span><br><span class="line">00C1181D  mov         ecx,dword ptr fs:[2Ch]  </span><br><span class="line">00C11824  mov         edx,dword ptr [ecx+eax*4]</span><br></pre></td></tr></table></figure><p>TLS？怎么还多了两个函数？<code>__Init_thread_header</code>和<code>_Init_thread_footer</code>   </p><p>这两个函数是用来保证局部的静态对象的初始化线程安全。</p><p>但局部变量的互斥还是老样子，只不过被封装进上述的两个函数之中了。</p><p>有兴趣的读者可以自己上机调试一番。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;静态变量可以分为全局静态变量，和局部静态变量，先来说说全局的吧&lt;/p&gt;
&lt;p&gt;全局静态变量和全局变量的区别并不大，只是全局静态变量只能在当前文件中使用，而在反汇编中二者并无区别，只可以在当前文件中使用，不过是编译器做出的限制。&lt;/p&gt;
&lt;p&gt;局部静态变量，会有些特殊，它不会
      
    
    </summary>
    
      <category term="C++" scheme="https://www.basicbit.cn/categories/C/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>我们来聊聊C++多态吧，理解它，并找到它</title>
    <link href="https://www.basicbit.cn/2018/11/11/2018-11-11-%E6%88%91%E4%BB%AC%E6%9D%A5%E8%81%8A%E8%81%8AC++%E5%A4%9A%E6%80%81%E5%90%A7%EF%BC%8C%E7%90%86%E8%A7%A3%E5%AE%83%EF%BC%8C%E5%B9%B6%E6%89%BE%E5%88%B0%E5%AE%83/"/>
    <id>https://www.basicbit.cn/2018/11/11/2018-11-11-我们来聊聊C++多态吧，理解它，并找到它/</id>
    <published>2018-11-10T16:00:00.000Z</published>
    <updated>2019-10-16T13:54:31.171Z</updated>
    
    <content type="html"><![CDATA[<p>我们通过一段代码，先来了解多态的底层实现 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cVirtual</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func0</span><span class="params">()</span> </span>&#123;&#125;;  </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    cVirtual cv;  </span><br><span class="line">    cv.func0();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常简单的类，如果这里没有多态函数的话这个类对象实际只占1个字节（占位字节），有了多态函数后类对象里会保存一张多态函数的地址表，那么这个对象就会占4个字节。</p><p>来看反汇编。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cVirtual cv;</span><br><span class="line">005719B3  lea         ecx,[ebp-0Ch];分配对象占用内存</span><br><span class="line">005719B6  call        005713C5;调用构造函数</span><br></pre></td></tr></table></figure><p>​             </p><p>CALL指令调用的就是编译器为这个类生成的构造函数，这么简单的类也要有构造函数？？，猜的没错，就是用来初始化多态表的，走进去看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......  </span><br><span class="line">0057179F  pop         ecx  ;恢复this指针</span><br><span class="line">005717A0  mov         dword ptr [ebp-8],ecx ;保存this指针</span><br><span class="line">005717A3  mov         eax,dword ptr [ebp-8]  ;取出this指针</span><br><span class="line">005717A6  mov         dword ptr [eax],577BF8h  ;多态表初始化</span><br><span class="line">005717AC  mov         eax,dword ptr [ebp-8]  ;返回this指针</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>我把多余的代码删掉了，构造函数只做了这一件事情，就是把多态表的指针赋值到对象地址中，也就是文中的this指针。</p><p>由上面的代码可以看出，此类对象的内存应该如下图：</p><p><img src="/img/1571234058141.png" alt="1571234058141"></p><p>我们看下 0x577BF8 中保存的内容：</p><p><img src="/img/1571234067497.png" alt="1571234067497"></p><p>整理一下是这样的，0x005713C0，0x005713BB，0x0000000。</p><p>那么这两个有效地址就是我们代码中的两个多态函数，我们来验证下。</p><p><img src="/img/640.png" alt="img"></p><p>so，我们可以总结出，<strong>对象的虚表指针在以对象为基址的前4个字节中，虚表指针指向的是一个地址表，地址表中的每一个地址对应这个类中的每一个虚函数。</strong></p><p>在上例中，析构函数中做了和构造函数一模一样的事情，因为在构造函数中已经对虚表赋值了，在析构函数中是不是有点多此一举？并不是，析构函数中重新赋值是防止读取的虚表不是自己的虚表，读者可以从继承的角度出发，来思考这个问题。</p><p>搞不懂去看我写的继承的文章吧，可能还没更。</p><p><strong>重点来了：</strong></p><ul><li><strong>虚表信息是在编译后会被链接到二进制文件中，so 虚表是一个固定地址。</strong></li><li><strong>虚表中的虚函数地址排序顺序依据虚函数在类中的声明顺序而定。</strong></li><li><strong>当虚函数被访问时，会根据对象的首地址，取出虚表地址，在取出虚表元素，需要多次寻址才能完成。</strong></li><li><strong>通过间接寻址访问虚表，只发生在使用对象的指针或者引用调用虚函数的时候才会发生，当使用对象调用虚函数，不需要查表访问。（调用自身的函数，未构成多态，查虚表只会降低效率）</strong></li></ul><p><strong>——————————-&gt;找到它</strong></p><p>在茫茫汇编代码中找到多态需要关注以下几点：</p><ul><li>类中隐式定义了一个数据成员</li><li>该数据成员在首地址处，并占4个字节</li><li>构造函数会将此数据成员初始化为某个数组的首地址</li><li>这个地址属于数据区，是固定地址</li><li>在这个数组内，每个元素都是函数指针</li><li>这些函数它们被调用时，第一个参数一定是this指针，注意调用约定</li><li>在这些函数内部，很有可能会对this指针使用相对间接的访问方式</li></ul><p>虚表初始化特征码（在构造或析构函数中出现）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;下面这段代码出现的函数，需要具有成员函数特征，传递对象首地址作为this指针</span><br><span class="line">lea ecx,[ebp - 8];获取对象首地址</span><br><span class="line">call xxxxxxxxh ;函数调用</span><br><span class="line">mov reg,this ;某寄存器得到对象首地址</span><br><span class="line">mov dword ptr[eax], xxxxxxxxh</span><br><span class="line">; 向对象首地址写入4字节数据，查看并确认这4字节是否为函数地址表的首地址</span><br></pre></td></tr></table></figure><p>如果上述代码出现，应该高度怀疑此函数是一个构造或析构函数。</p><p>Good job.</p><p><img src="/img/1571160018433.png" alt="1571160018433"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们通过一段代码，先来了解多态的底层实现 &lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
      <category term="C++" scheme="https://www.basicbit.cn/categories/C/"/>
    
    
      <category term="C++" scheme="https://www.basicbit.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Window PE -- 资源</title>
    <link href="https://www.basicbit.cn/2018/11/01/2018-11-01-Windows%20PE%20%E8%B5%84%E6%BA%90/"/>
    <id>https://www.basicbit.cn/2018/11/01/2018-11-01-Windows PE 资源/</id>
    <published>2018-10-31T16:00:00.000Z</published>
    <updated>2019-10-15T17:18:19.443Z</updated>
    
    <content type="html"><![CDATA[<p>Window PE – 资源</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>Windows程序的各种界面称为资源，包括加速键（Accelerator）、位图（Bitmap）、光标（Cursor）、对话框（DialogBox）、图标（Icon）、菜单（Menu）、串表（StringTable）、工具栏（Toolbar）和版本信息（VersionInformation）等。在PE文件的所有结构中，资源部分是最复杂的。</p><h2 id="资源结构"><a href="#资源结构" class="headerlink" title="资源结构"></a>资源结构</h2><p>资源用类似于磁盘目录结构的方式保存，目录通常包含3层。第l层目录类似于一个文件系统的根目录，每个根目录下的条目总是在它自己权限下的一个目录。第2层目录中的每一个都对应于一个资源类型（字符串表、菜单、对话框、菜单等）。每个第2层资源类型目录下是第3层目录。</p><p><img src="/img/1554868326942.png" alt="1554868326942"></p><h2 id="资源目录结构"><a href="#资源目录结构" class="headerlink" title="资源目录结构"></a>资源目录结构</h2><p>数据目录表中的IMAGEDIRECTORY_ENTRY_RESOURCE条目包含资源的RVA和大小。资源目录结构中的每一个节点都是由IMAGE_RESOURCE_DIRECTORY结构和紧随其后的数个IMAGE_RESOURCE_DIRECTORY_ENTRY结构组成的，这两种结构组成了一个目录块。</p><p>IMAGE_RESOURCE_DIRECTORY结构长度为16字节，共有6个字段，其定义如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _IMAGE_RESOURCE_DIRECTORY &#123;</span><br><span class="line">    ULONG   Characteristics;</span><br><span class="line">    ULONG   TimeDateStamp;</span><br><span class="line">    USHORT  MajorVersion;</span><br><span class="line">    USHORT  MinorVersion;</span><br><span class="line">    USHORT  NumberOfNamedEntries;</span><br><span class="line">    USHORT  NumberOfIdEntries;</span><br><span class="line">&#125; IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;</span><br></pre></td></tr></table></figure><p>这个结构中让人感兴趣的字段是NumberOfNamedEntries和NumberOfldEntries，它们说明了本目录中目录项的数量。umberOfNamedEntries字段是以字符串命名的资源数量，NumberOfldEntries字段是以整型数字命名的资源数量，两者加起来是本目录中的目录项总和，即紧随其后的IMAGE_RESOURCE_DIRECTORY_ENTRY结构的数量。</p><h2 id="资源目录入口结构"><a href="#资源目录入口结构" class="headerlink" title="资源目录入口结构"></a>资源目录入口结构</h2><p>紧跟资源目录结构的就是资源目录入口（ResourceDirEntries）结构，此结构长度为8字节，包含2个字段。IMAGE_RESOURCE_DIRECTORY_ENTRY结构定义如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY</span><br><span class="line">&#123;</span><br><span class="line">Name  DWORD  ?</span><br><span class="line">OffsetToData  DWORD  ?</span><br><span class="line">&#125;IMAGE_RESOURCE_DIRECTORY_ENTRY,*PIMAGE_RESOURCE_DIRECTORY_ENTRY;</span><br></pre></td></tr></table></figure><p>根据不同的情况，这2个字段的含义有所不同。</p><ul><li><p>Name字段：定义目录项的名称或ID。当结构用于第1层目录时，定义的是资源类型；当结构用于第2层目录时，定义的是资源的名称；当结用于第3层目录时，定义的是代码页编号。当最高位为0时，表示字段的值作为ID使用；当最高位为1时，表示字段的低位作为指针使用，资源名称字符串使用Unicode编码，这个指针不直接指向字符串，而指向一个IMAGE_RESOURCE_DIR_STRING_U结构。Name字段定义如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IMAGE RESOURCE  DIR  STRING  U STRUCT</span><br><span class="line">Length</span><br><span class="line">NameStr in g</span><br><span class="line">WORD  ?</span><br><span class="line">WCHAR  ?</span><br><span class="line">IMAGE RESOURCE  DIR  STRING  U ENDS</span><br></pre></td></tr></table></figure></li><li><p>OffsetToData字段：一个指针当最高位（位31）为1时，低位数据指向下一层目录块的起始地址；当最高位为0时，指针指向IMAGE_RESOURCE_DATA_ENTRY结构。在将Name和OffsetToData作为指针时需要注意，该指针从资源区块开始处计算偏移量，并非从RVA（根目录的起始位置）开始处计算偏移量。</p></li></ul><p>有一点要说明的是，当IMAGE_RESOURCE_DIRECTORY_ENTRY在第1层目录中，它的Name字段作为资源类型使用。当资源类型以ID定义且数值在1到16之间时，表示是系统预定义的类型，具体如下表所示。</p><p><img src="/img/1554868630997.png" alt="1554868630997"></p><h2 id="资源数据入口"><a href="#资源数据入口" class="headerlink" title="资源数据入口"></a>资源数据入口</h2><p>经过3层IMAGE_RESOURCE_DIRECTORY_ENTRY（一般是3层，也有可能更少，第1层是资源类型，第2层是资源名，第3层是资源的Language），第3层录结构中的OffsetToData将指向IMAGE_RESOURCE_DATA_ENTRY结构。该结构描述了资、源数据的位置和大小，其定义如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IMAGE RESOURCE  DATA  ENTRY STRUCT</span><br><span class="line">OffsetToData</span><br><span class="line">Size</span><br><span class="line">Code  Page</span><br><span class="line">DWORD  ?</span><br><span class="line">DWORD  ?</span><br><span class="line">DWORD  ?</span><br><span class="line">Reserved  DWORD  ?</span><br><span class="line">&#125; IMA GE  RESOURCE  DATA  ENTRY ENDS</span><br></pre></td></tr></table></figure><p>经过多层结构，此处的IMAGE_RESOURCE_DATA_ENTRY结构就是真正的资源数据了。结构中的OffsetToData指向资源数据的指针（其为RVA值）。</p><p><img src="/img/1571159898220.png" alt="1571159898220"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Window PE – 资源&lt;/p&gt;
&lt;h2 id=&quot;资源&quot;&gt;&lt;a href=&quot;#资源&quot; class=&quot;headerlink&quot; title=&quot;资源&quot;&gt;&lt;/a&gt;资源&lt;/h2&gt;&lt;p&gt;Windows程序的各种界面称为资源，包括加速键（Accelerator）、位图（Bitmap）
      
    
    </summary>
    
      <category term="Windows" scheme="https://www.basicbit.cn/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://www.basicbit.cn/tags/Windows/"/>
    
      <category term="PE" scheme="https://www.basicbit.cn/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的CTF小DEMO</title>
    <link href="https://www.basicbit.cn/2018/11/01/2018-11-02%20%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84CTF%E5%B0%8Fdemo/"/>
    <id>https://www.basicbit.cn/2018/11/01/2018-11-02 一个简单的CTF小demo/</id>
    <published>2018-10-31T16:00:00.000Z</published>
    <updated>2019-10-21T12:33:52.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个简单的CTF小DEMO"><a href="#一个简单的CTF小DEMO" class="headerlink" title="一个简单的CTF小DEMO"></a>一个简单的CTF小DEMO</h1><p>不说废话 ，开始看代码</p><p><img src="/img/1563290467065.png" alt="1563290467065"></p><p>main函数的开始提示输入FLAG</p><p><img src="/img/1563290577373.png" alt="1563290577373"></p><p>输入完FLAG之后进行长度判断 上图中的jnb跳转到跳转到失败输出代码，也就是说FLAG的长度小于0x1E，下面ja跳转到FLAG判断代码。</p><p>这两个cmp转换为c代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">4</span> &lt; flag &lt; <span class="number">0x1E</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/1563290874171.png" alt="1563290874171"></p><p>上图为jnb跳转的位置，输出Sorry，keep trying!，跳转到return</p><p><img src="/img/1563291020325.png" alt="1563291020325"></p><p>上图为ja跳转的位置loc_401093。</p><p>for循环判断输入的 FLAG的前四个字节是否为EIS{，上图中的变量register_header保存的ASSCII码“EIS{”，循环跳出条件为register_header的长度。</p><p><img src="/img/1563291253721.png" alt="1563291253721"></p><p>​    for循环结束又是一个判断，判断FLAG的第0x1C字节处的ASCII码是否为‘}’，如果不是输出Sorry ，keep trying !并跳转到return，那么0x1C + 1就是FLAG的长度，去掉EIS{}，真正参与计算的代码的长度为24。</p><p><img src="/img/1563291427190.png" alt="1563291427190"></p><p>上图为ja跳转的位置，传入FLAG，调用calc_register_code，判断其返回值，calc_register_code也就是真正的计算函数。</p><p><img src="/img/1563291512011.png" alt="1563291512011"></p><p>进入calc_register_code</p><p>首先判断FLAG是否大于4，如果小于等于4跳转到return。</p><p><img src="/img/1563291610231.png" alt="1563291610231"></p><p>紧接着又是一个for循环，把FLAG+4之后的数据拷贝一份拷贝到back_str</p><p><img src="/img/1563291796614.png" alt="1563291796614"></p><p>上图中黄色部分把拷贝出来的back_str最后一个字节赋值为0，也就是将 ‘}’ 修改为0，此时的back_str保存了EIS{….}，括号里的内容长度为24字节。</p><h2 id="计算部分"><a href="#计算部分" class="headerlink" title="计算部分"></a>计算部分</h2><p><img src="/img/1563292006037.png" alt="1563292006037"></p><p>for循环部分，如果循环次数大于back_str的长度跳出循环</p><p><img src="/img/1563292026464.png" alt="1563292026464"></p><p>if判断，在两个cmp中看到如果back_str[i]不是小写字母，则跳到loc_4012FF处，如果是小写字母，将这个字节进行减掉0x20转换为大写字母。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C伪代码</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">'a'</span> &lt;= back_str[i] &lt;= <span class="string">'z'</span>)</span><br><span class="line">back_str[i] -= <span class="number">0x20</span></span><br></pre></td></tr></table></figure><p>字母转换结束后，在上图的最后一行代码，将var_B0赋值为（var_B0为DWORD类型）1。</p><p><img src="/img/1563292351121.png" alt="1563292351121"></p><p>紧接着又是一个if判断，这个if判断，首先判断var_B0是否为0，不为0跳转到loc_401340处，然后判断back_str[i]是否为大写字母，如果是大写字母进行加0x20，转换为小写字母。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C伪代码</span></span><br><span class="line"><span class="keyword">if</span>(var_B0 != <span class="number">0</span> &amp;&amp; <span class="string">'A'</span> &lt;= back_str[i] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">back_str[i] += <span class="number">0x20</span></span><br></pre></td></tr></table></figure><p><img src="/img/1563292555155.png" alt="1563292555155"></p><p>字母转换之后将转换之后的字节传入到char_calc进行计算。</p><p><img src="/img/1563292601289.png" alt="1563292601289"></p><p>char_calc将传入的字节进行异或0x55，后在加上0x48返回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//c伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">char_calc</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ch |= <span class="number">0x55</span>;</span><br><span class="line">ch += <span class="number">0x48</span></span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/1563292724261.png" alt="1563292724261"></p><p>char_calc计算之后，将计算的结果和calc_code[i]进行异或计算，最后结果保存到var_AC[i]中。</p><p>calc_code 的内容如下</p><p><img src="/img/1563292853691.png" alt="1563292853691"></p><p>保存完成之后进行第二次for循环。</p><p><img src="/img/1563292932569.png" alt="1563292932569"></p><p>for循环结束后，将计算出来的结果和<img src="/img/1563295477991.png" alt="1563295477991">进行比较，如果一样返回1，否则返回0。</p><p>Good Job.</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p><img src="/img/1563293861722.png" alt="1563293861722"></p><p><img src="/img/1563293876622.png" alt="1563293876622"></p><h3 id="最终的注册码"><a href="#最终的注册码" class="headerlink" title="最终的注册码"></a>最终的注册码</h3><p><img src="/img/1563293808998.png" alt="1563293808998"></p><p>上图中的done_code为注册码。</p><p><img src="/img/1571159884917.png" alt="1571159884917"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一个简单的CTF小DEMO&quot;&gt;&lt;a href=&quot;#一个简单的CTF小DEMO&quot; class=&quot;headerlink&quot; title=&quot;一个简单的CTF小DEMO&quot;&gt;&lt;/a&gt;一个简单的CTF小DEMO&lt;/h1&gt;&lt;p&gt;不说废话 ，开始看代码&lt;/p&gt;
&lt;p&gt;&lt;img sr
      
    
    </summary>
    
      <category term="Crack set" scheme="https://www.basicbit.cn/categories/Crack-set/"/>
    
    
      <category term="Windows" scheme="https://www.basicbit.cn/tags/Windows/"/>
    
      <category term="CTF" scheme="https://www.basicbit.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Window PE -- 区块</title>
    <link href="https://www.basicbit.cn/2018/11/01/2018-11-01-Windows%20PE%20%E5%8C%BA%E5%9D%97/"/>
    <id>https://www.basicbit.cn/2018/11/01/2018-11-01-Windows PE 区块/</id>
    <published>2018-10-31T16:00:00.000Z</published>
    <updated>2019-10-15T17:18:32.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Window-PE-–-区块"><a href="#Window-PE-–-区块" class="headerlink" title="Window PE – 区块"></a>Window PE – 区块</h1><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>在PE件头与原始数据之间存在一个区块表（SectionTable）。区块表中包含每个块在映像中的信息，分别指向不同的区块实体。</p><h3 id="区块表"><a href="#区块表" class="headerlink" title="区块表"></a>区块表</h3><p>跟IMAGE_NT_HEADERS的是区块表，它是一个IMAGE_SECTION_HEADER结构数组。每个IMAGE_SECTION_HEADER结构包含了它所关联的区块的信息，例如位置、长度、属性，该数组的数目由MAGE_NT_HEADERS.FileHeader.NumberOfSections指出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">  BYTE  Name[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">    DWORD PhysicalAddress;</span><br><span class="line">    DWORD VirtualSize;</span><br><span class="line">  &#125; Misc;</span><br><span class="line">  DWORD VirtualAddress;</span><br><span class="line">  DWORD SizeOfRawData;</span><br><span class="line">  DWORD PointerToRawData;</span><br><span class="line">  DWORD PointerToRelocations;</span><br><span class="line">  DWORD PointerToLinenumbers;</span><br><span class="line">  WORD  NumberOfRelocations;</span><br><span class="line">  WORD  NumberOfLinenumbers;</span><br><span class="line">  DWORD Characteristics;</span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure><p>为了便于理解，我们假设PE.exe的区块表含有3个块的描述，分别是.text、.rdata和.data。每个块对应于一个MAGE_SECTION_HEADER结构，用十六进制工具查看块表，如下表。表中的标号对应于第1个IMAGE_SECTION_HEADER结构的以下字段。</p><p><img src="/img/1554724992303.png" alt="1554724992303"></p><ol><li><p>Name：块名。这是一个8位ASCII码名（不是Unicode内码），用来定义块名。多数块名以－个“．”开始（例如.text），这个“．”实际上不是必需的。值得注意的是，如果块名超过8字节，则没有最后的终止标志“NULL”字节。带有一个“$”的区块名会被链接器特殊对待，前面有“$”的同名区块会被合并。这些区块是按“$”后面的字符的字母顺序合并的。</p></li><li><p>VirtualSize：指出实际被使用的区块的大小，是在进行对齐处理前区块的实际大小。如果VirtualSize的值大于SizeOfRawData值，那么SizeOfRawData表示来自可执行文件初始化数据的大小，与VirtualSize相差的字节用填充。这个字段在OBJ文件中是被设置为0的。</p></li><li><p>VirtualAddress：该块装载到内存中的RVA。这个地址是按照内存页对齐的，它的数值总是SectionAlignr阳It的整数倍。在Microsoft工具中，第1个块的默认RVA值为lOOOh。在OBJ中，该字段没有意义，并被设置为0</p></li><li><p>SizeOfRawData：该块在磁盘中所占的空间。在可执行文件中，该字段包含经FileAlignment调整的块的长度。例如，指定FileAlignment的值为200h，如果VirtualSize中的块长度为19Ah字节，该块应保存的长度为200h字节。</p></li><li><p>PointerToRawData：该块在磁盘文件中的偏移。程序经编译或汇编后生成原始数据，这个字段用于给出原始数据在文件中的偏移。如果程序自装载PE或COFF文件（而不是由操作系统载入的），这一字段将比Vi山alAddress还重要在这种状态下，必须完全使用线性映像的方法载入文件，所以需要在该偏移处找到块的数据，而不是VirtualAddress段中的RVA地址。</p></li><li><p>PointerToRelocations：在EXE件中无意义。在OBJ文件中，表示本块重定位信息的偏移量在OBJ文件中，如果该值不是0，会指向一个IMAGE_RELOCATION结构数组。</p></li><li><p>PointerToLineNumbers：行号表在文件中的偏移量，这是文件调试信息。</p></li><li><p>NumberOfRelocations：在EXE文件中元意义。在OBJ文件中，表示本块在重定位表中的重定位数目。</p></li><li><p>NumberOfLinenur由巳rs：该块在行号表中的行号数目。</p></li><li><p>Chacteristics：块属性。该字段是一指出块属性（例如代码／数据、可读／可写等）的标志比较重要的标志如表11.5所示，多个标志值求或即为Characteristics的值。这些标志中的很多都可以通过链接器的／SECTION开关设置。例如，“E0000020h=20000000hI40000000hI80000000hI00000020h”表示该块包含执行代码，可读、可写、可执行，“C00000040h=40000000hI80000000hI00000040h”表示该块可读、可写，包含已初始化的数据，“60000020h=20000000hI40000000hI00000020h”表示该块包含执行代码，可读、可执行。</p><p><img src="/img/1554725224302.png" alt="1554725224302"><img src="/img/1554725236875.png" alt="1554725236875"></p></li></ol><h3 id="常见区块与区块合并"><a href="#常见区块与区块合并" class="headerlink" title="常见区块与区块合并"></a>常见区块与区块合并</h3><p>区块中的数据逻辑通常是关联的。PE文件一般至少有两个区块，一个是代码块，另一个是数据块。每个区块都有特定的名字，这个名字用于表示区块的用途。例如，一个块叫作.rdata，表明它是一个只读区块。区块在映像中是按起始地址（RVA）排列的，而不是按字母表顺序排列的。使用区块名只是为了方便，它对操作系统来说是无关紧要的。微软给这些区块分别取了有特色的名字，但这不是必需的。Borland链接器使用的是像“CODE”和“ATA”这样的名字。</p><p>EXE和OBJ文件的一些常见区块如表11.6所示。非另外声明，表中的区块名称来自微软的定义。</p><p><img src="/img/1554725317252.png" alt="1554725317252"><img src="/img/1554725336273.png" alt="1554725336273"></p><p>虽然编译器自动产生一系列标准的区块，但这没有什么不可思议的读者可以创建和命名自己的区块。在VisualC＋＋中用#pragma来声明，告诉编译器将数据插入一个区块，代码如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span>  data_seg  ( <span class="meta-string">"MY_DATA"</span> )</span></span><br></pre></td></tr></table></figure><p>这样，所有被VisualC＋＋处理的数据都将放到一个叫作MY_DATA的区块内，而不是默认.data区块内。大部分程序只使用编译器产生的默认区块，但偶尔可能有－些特殊的需求，需要将代码或数据放到一个单独的区块里，例如建立一个全局共享块。</p><p>区块并非全部在链接时形成，更准确地说，它们一般是从OBJ文件开始被编译器放置的。链接器的工作就是合并所有OBJ和库中需要的块，使其最终成为一个合适的区块。例如，工程中的每一个OBJ至少有一个包含代码的.text区块，链接器把这些区块合并成一个.text区块。链接器遵循一套完整的规则，以判断哪些块需要合并及如何合并。OBJ件中的一个区块可能是为链接器准备，不会放入最后的可执行文件中（这样的区块主要用于编译器向链接器传递信息）。</p><p>接器的一个有趣的特征就是能够合并区块。如果两个区块有相似或一致的属性，那么它们在链接时能合并成一个区块，这取决于是否使用／MERGE开关。如下链接器选项将.rdata与.text区块合并为一个.text区块。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/MERG E:  .rdata =.text</span><br></pre></td></tr></table></figure><p>合并区块优点是节省磁盘和内存空间。个区块至少占用1个内存，如果能将可执行文件内的区块数从4个减少到3个，就可能少用1个内存页。当然，这依颇于两个合并区块结尾的未用空间加起来是否能达到l个内存页。</p><p>当合并区块时，事情将变得有趣，因为这没有什么硬性规定。例如，把.rdata合并到.text里不会有问题，但不应该将.rsre、.reloc或.rdata合并到其他区块里。在VisualStudio.NET出现之前，可以将.idata合并到其他区块里，但在VisualStudio.NET中就不允许进行这样的操作了。不过，在制作发行版本时，链接器经常将.idata的一部分合并到其他区块里，例如.rdata。</p><p>为部分输入数据是在载入内存时由Windows加载器写人的，所以读者可能会对它们如何被放入只读区块感到疑惑。这是由于在加载时，系统会临时修改那些包含输入数据的页属性为可读、可写，初始化完成后恢复为原来的属性。</p><h3 id="区块的对齐值"><a href="#区块的对齐值" class="headerlink" title="区块的对齐值"></a>区块的对齐值</h3><p>区块的大小是要对齐的。有两种对齐值，一种用于盘文件内，另一种用于内存中。PE文件头指出了这两个值，它们可以不同。</p><p>PE文件头里，FileAlignment定义了磁盘区块的对齐值。每一个区块从对齐值的倍数的偏移位置开始，而区块的实际代码或数据的大小不一定刚好是这么多，所以在不足的地方一般以OOh来填充，这就是区块的间隙。例如，在PE文件中，一个典型的对齐值是200h，这样每个区块从200h的倍数的文件偏移位置开始。假设区块的第1个节在400h处，长度为90h，那么00h～490h为这一区块的内容，而文件对齐值是200h，为了使这一节的长度为FileAlignment的整数倍，490h～600h会被0填充，这段空间称为区块间隙，下一个区块的开始地址为600h。</p><p>PE文件头里，SectionAlignment义了内存中区块的对齐值。当PE文件被映射到内存中时，区块总是至少从一个页边界处开始。也就是说，当一个PE文件被映射到内存中时，每个区块的第l个字节对应于某个内存页。在x86系列CPU中，内存页是按4KB(1000h）排列的；在x64中，内存页是按8KB(2000h排列的。所以，在x86系统中，PE文件区块的内存对齐值一般为1000h,每个区块从1000h的倍数的内存偏移位置开始。</p><p>非使用／OPT:OWIN98或／ALIGN开关，否则VisualStudio6.0中的默认值都是4KB，VisualStudio.NET链器依然使用默认的10町：WIN98开关，但如果文件大小小于特定值，就会以200h为对齐值。另一种对齐方式来自.NET文件的规定。.NET文件的内存对齐值为8KB，而不是普通x86平台上的4KB，这样就保证了在x86平台上编译的程序可以在x64平台上运行。如果内存对齐值为4KB，那么x64加载器就不能载入这个程序了，因为64位Windows中的内存页大小是8KB。</p><p>可以建立一个区块在文件中的偏移与在内存中的偏移相同的PE文件。虽然这样做会使可执行文件变大，但是可以提高载入速度VisualStudio6.0的默认选项／OPT:WIN98将使PE文件按照这种方式来创建。在VisualStudio.NET中，链接器可以不使用/OPT:NOWIN98开关，这取决于文件是否足够小。</p><h3 id="文件偏移与虚拟地址的转换"><a href="#文件偏移与虚拟地址的转换" class="headerlink" title="文件偏移与虚拟地址的转换"></a>文件偏移与虚拟地址的转换</h3><p>一些PE文件为减小体积磁盘对齐值不是一个内存页1000h而是200h。当这类文件被映射到内存中后，同一数据相对于文件头的偏移量在内存中和磁盘文件中是不同的，这偏移地址与虚拟地址的转换问题。而那些磁盘对齐值（1000h）与内存页相同的区块，同一数据在磁盘文件中的偏移与在内存中的偏移相同，因此不需要转换。</p><p>区块显示了实例文件在磁盘与内存中各区块的地址、大小等信息。虚拟地址和虚拟大小是指该区块在内存中的地址和大小。物理地址和物理大小是指该区块在磁盘文件中的地址和大小。由于其磁盘对齐值为200h，与内存对齐值不同，故其磁盘｜泱像和内存映像不同。</p><p><img src="/img/1554725645315.png" alt="1554725645315"></p><p>可以看出，文件被映射到内存中时，MS-DOS头部、PE文件头和块表的偏移位置与大小均没有变化，而当各区块被映射到内存中后，其偏移位置就发生了变化。例如，磁盘文件中.text块起始端与文件头的偏移量为add1，映射到内存后，.text块起始端与文件头（基地址）的偏移量为add2。同时，.text块与块表之间形成了一大段空隙，这部分数据全是以0填充的。在这里，addl的值就是文件偏移地址（FileOffset),add2的值就是相对虚拟地址（RVA）。假设它们的差值为此，则文件偏移地址与虚拟地址的关系如下。</p><p><img src="/img/1554725718474.png" alt="1554725718474"></p><p>在同一区块中，各地址的偏移量是相等的，可用上面的公式对此区块中的任意FileOffset与VA进行转换。但请不要错误地认为在整个文件里FileOffset与VA的差值是Δk</p><p>，因为各区块在内存中是以一个页边界开始的，从第l个区块的结束到第2个区块的开始（1000h对齐处）全以数据0填充，所以不同区块在磁盘与内存中的差值不同。如下表所示是该实例文件各区块在磁盘与内存中的起始地址差值。</p><p><img src="/img/1554725752993.png" alt="1554725752993"></p><p>例如，假设某一虚拟地址（VA）为401112h，要计算它的文件偏移地址。401112h在.text块中，此时D,.k=0C00h，故</p><p>Fi le Offset=  VA  - ImageBase  - Δk  = 401l12h - 400000h - 0C00h  = 512h</p><p>再来看一看虚拟地址4020D2h的转换。4020D站在.rdata块中，此时Δk=IA00h，故</p><p>File  Offset  =  VA  - ImageBase - Δk  = 4020D2h - 400000h - IA00h  = 6D2h</p><p>实际操作中，建议使用RVA-Offset类的转换工具。</p><p><img src="/img/1571159911481.png" alt="1571159911481"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Window-PE-–-区块&quot;&gt;&lt;a href=&quot;#Window-PE-–-区块&quot; class=&quot;headerlink&quot; title=&quot;Window PE – 区块&quot;&gt;&lt;/a&gt;Window PE – 区块&lt;/h1&gt;&lt;h2 id=&quot;区块&quot;&gt;&lt;a href=&quot;#区块&quot;
      
    
    </summary>
    
      <category term="Windows" scheme="https://www.basicbit.cn/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://www.basicbit.cn/tags/Windows/"/>
    
      <category term="PE" scheme="https://www.basicbit.cn/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>Window PE -- 文件头</title>
    <link href="https://www.basicbit.cn/2018/11/01/2018-11-01-Windows%20PE%20%E6%96%87%E4%BB%B6%E5%A4%B4/"/>
    <id>https://www.basicbit.cn/2018/11/01/2018-11-01-Windows PE 文件头/</id>
    <published>2018-10-31T16:00:00.000Z</published>
    <updated>2019-10-15T17:18:28.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Window-PE-–-文件头"><a href="#Window-PE-–-文件头" class="headerlink" title="Window PE – 文件头"></a>Window PE – 文件头</h1><h2 id="PE文件头"><a href="#PE文件头" class="headerlink" title="PE文件头"></a>PE文件头</h2><p>紧跟着DOSstub的是PE文件头（PEHeader）。“PEHeader，，是PE关结构NT映像头（IMAGE_NT_HEADERS）的简称，其中包含许多PE装载器能用到的重要字段。当执行体在支持PE文件结构的操作系统中执行时，PE装载器将从IMAGE_DOS_HEADER结构的e_lfanew字段里找到PEHeader的起始偏移量，用其加上基址，得到PE文件头的指针。</p><p>PNTHeader = lmageBase + dosHeader-&gt;e_Ifanew</p><p>实际上有两个版本的IMAGENT_HEADER结构，一个是为PE32(32位版本）可执行文件准备的，另一个是PE32+(64位版本）。因为它们几乎没有区别，所以在以后的讨论中将不作区分。</p><p>IMAGE_NT_HEADER是由3个字段（左边的数字是到PE文件头的偏移量）组成的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PE32＋的IMAGE_NT_HEADER64结构如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Signature字段"><a href="#Signature字段" class="headerlink" title="Signature字段"></a>Signature字段</h2><p>在一个有效的PE文件里，Signature字段被设置为Ox00004550,ASCII码字符是“PE\0\0。”，“#define IMAGE_NT_SIGNATURE”定义了这个值，示例如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_NT_SIGNATURE   0x00004550</span></span><br></pre></td></tr></table></figure><p>PE\0\0”是PE文件头的开始，MS一DOS头部的ιlianew字段正是指向“PE\0\0”的。</p><h2 id="IMAGE-FILE-HEADER结构"><a href="#IMAGE-FILE-HEADER结构" class="headerlink" title="IMAGE_FILE_HEADER结构"></a>IMAGE_FILE_HEADER结构</h2><p>lMAGE_FILE_HEADER（映像文件头）结构包含PE文件的一些基本信息，最重要的是，其中的一个域指出了IMAGE_OPTIONAL_HEADER的大小。下面介绍IMAGE_FILE_HEADER结构的各个字段，并对这些字段进行说明。这个结构也能在COFF格式的OBJ文件的开始处找到，因此也称其为“COFF File Header”注释中的偏移量是基于PE文件头（IMAGE_NT_HEADERS）的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">  WORD  Machine;</span><br><span class="line">  WORD  NumberOfSections;</span><br><span class="line">  DWORD TimeDateStamp;</span><br><span class="line">  DWORD PointerToSymbolTable;</span><br><span class="line">  DWORD NumberOfSymbols;</span><br><span class="line">  WORD  SizeOfOptionalHeader;</span><br><span class="line">  WORD  Characteristics;</span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure><p>用十六进制工具查看IMAGE_FILE_HEADER结构的情况，如图所示，图中的标号对应于以下字段。</p><p><img src="/img/1554716150866.png" alt="1554716150866"></p><ol><li>Machine：可执行文件的目标CPU类型。PE文件可以在多种机器上使用，不同平台上指令的机器码不同。如表是几种典型的机器类型标志。<img src="/img/1554716220204.png" alt="1554716220204"></li><li>NumberOfSections：区块（Section）的数目，块表紧跟在IMAGE_NT_HEADERS后面。</li><li>TimeDateStamp：表示文件的创建时间。这个值是自1970年l月1日以来用格林威治时间(GMT）计算的秒数，是一个比文件系统的日期／时间更精确的文件创建时间指示器。将这个值翻译为易读的字符串需要使用＿clime函数（它是时区敏感型的）。另一个对此字段计算有用的函数是gmtime。</li><li>PointerToSymbolTable:COFF符号表的文件偏移位置（参见Microsoft规范的5.4节）。因为采用了较新的debug格式，所以COFF符号表在PE文件中较为少见。在VisualStudio.NET出现之前，COFF符号表可以通过设置链接器开关（/DEBUGTYPE:COFF）来创建。COFF符号表几乎总能在目标文件中找到，若没有符号表存在，将此值设置为0。</li><li>NumberOISymbols：如果有COFF符号表，它代表其中的符号数目。COFF符号是一个大小固定的结构，如果想找到COFF符号表的结束处，需要使用这个域。</li><li>SizeOfOptionalHeader：紧跟IMAGEFILE_HEADER，表示数据的大小。在PE文件中，这个数据结构叫作IMAGE_O阿IONAL_HEADER，其大小依赖于当前文件是32位还是64位文件。对32位PE文件，这个域通常是OOEOh；对64位PE32＋文件，这个域是OOFOh。不管怎样，这些是要求的最小值，较大的值也可能会出现。</li><li>Characteristics：文件属性，有选择地通过几个值的运算得到。这些标志的有效值是定义于winnt.h内的IMAGE_FILE_xxx值，具体如表l1.2所示。普通EXE文件的这个字段的值一般是010仙，DLL文件的这个字段的值一般是2102h。</li></ol><p><img src="/img/1554716339696.png" alt="1554716339696"></p><h2 id="IMAGE-OPTIONAL-HEADER结构"><a href="#IMAGE-OPTIONAL-HEADER结构" class="headerlink" title="IMAGE_OPTIONAL_HEADER结构"></a>IMAGE_OPTIONAL_HEADER结构</h2><p>尽管可选映像头（IMAGE_OPTIONAL_HEADER）是一个可选的结构，但IMAGE_FILE_HEADER结构不足以定义PE文件属性，因此可选映像头中定义了更多的数据，完全不必考虑两个结构的区别在哪里，将两者连起来就是一个完整的“PE文件头结构飞IMAGE_OPTIONAL_HEADER32结构如下，字段前的数字标出了字段相对于PE文件头的偏移量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">  WORD                 Magic;</span><br><span class="line">  BYTE                 MajorLinkerVersion;</span><br><span class="line">  BYTE                 MinorLinkerVersion;</span><br><span class="line">  DWORD                SizeOfCode;</span><br><span class="line">  DWORD                SizeOfInitializedData;</span><br><span class="line">  DWORD                SizeOfUninitializedData;</span><br><span class="line">  DWORD                AddressOfEntryPoint;</span><br><span class="line">  DWORD                BaseOfCode;</span><br><span class="line">  DWORD                BaseOfData;</span><br><span class="line">  DWORD                ImageBase;</span><br><span class="line">  DWORD                SectionAlignment;</span><br><span class="line">  DWORD                FileAlignment;</span><br><span class="line">  WORD                 MajorOperatingSystemVersion;</span><br><span class="line">  WORD                 MinorOperatingSystemVersion;</span><br><span class="line">  WORD                 MajorImageVersion;</span><br><span class="line">  WORD                 MinorImageVersion;</span><br><span class="line">  WORD                 MajorSubsystemVersion;</span><br><span class="line">  WORD                 MinorSubsystemVersion;</span><br><span class="line">  DWORD                Win32VersionValue;</span><br><span class="line">  DWORD                SizeOfImage;</span><br><span class="line">  DWORD                SizeOfHeaders;</span><br><span class="line">  DWORD                CheckSum;</span><br><span class="line">  WORD                 Subsystem;</span><br><span class="line">  WORD                 DllCharacteristics;</span><br><span class="line">  DWORD                SizeOfStackReserve;</span><br><span class="line">  DWORD                SizeOfStackCommit;</span><br><span class="line">  DWORD                SizeOfHeapReserve;</span><br><span class="line">  DWORD                SizeOfHeapCommit;</span><br><span class="line">  DWORD                LoaderFlags;</span><br><span class="line">  DWORD                NumberOfRvaAndSizes;</span><br><span class="line">  IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure><p>IMAGE_OPTIONAL_HEADER64结构有少许变化，PE32中的BaseOfData不存在于PE32＋中，在PE32＋中Magic的值是020Bh。IMAGE_OPTIONAL_HEADER64结构如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER64</span> &#123;</span></span><br><span class="line">  WORD                 Magic;</span><br><span class="line">  BYTE                 MajorLinkerVersion;</span><br><span class="line">  BYTE                 MinorLinkerVersion;</span><br><span class="line">  DWORD                SizeOfCode;</span><br><span class="line">  DWORD                SizeOfInitializedData;</span><br><span class="line">  DWORD                SizeOfUninitializedData;</span><br><span class="line">  DWORD                AddressOfEntryPoint;</span><br><span class="line">  DWORD                BaseOfCode;</span><br><span class="line">  ULONGLONG            ImageBase;</span><br><span class="line">  DWORD                SectionAlignment;</span><br><span class="line">  DWORD                FileAlignment;</span><br><span class="line">  WORD                 MajorOperatingSystemVersion;</span><br><span class="line">  WORD                 MinorOperatingSystemVersion;</span><br><span class="line">  WORD                 MajorImageVersion;</span><br><span class="line">  WORD                 MinorImageVersion;</span><br><span class="line">  WORD                 MajorSubsystemVersion;</span><br><span class="line">  WORD                 MinorSubsystemVersion;</span><br><span class="line">  DWORD                Win32VersionValue;</span><br><span class="line">  DWORD                SizeOfImage;</span><br><span class="line">  DWORD                SizeOfHeaders;</span><br><span class="line">  DWORD                CheckSum;</span><br><span class="line">  WORD                 Subsystem;</span><br><span class="line">  WORD                 DllCharacteristics;</span><br><span class="line">  ULONGLONG            SizeOfStackReserve;</span><br><span class="line">  ULONGLONG            SizeOfStackCommit;</span><br><span class="line">  ULONGLONG            SizeOfHeapReserve;</span><br><span class="line">  ULONGLONG            SizeOfHeapCommit;</span><br><span class="line">  DWORD                LoaderFlags;</span><br><span class="line">  DWORD                NumberOfRvaAndSizes;</span><br><span class="line">  IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;</span><br></pre></td></tr></table></figure><p>用十六进制工具查看IMAGE_OPTIONAL_HEADER32结构，如下图，图中的标号对应于以下字段。</p><p><img src="/img/1554723046973.png" alt="1554723046973"></p><ol><li><p>Magic：这是一个标记字，说明文件是ROM映像（0107h）还是普通可执行的映像（010Bh),一般是010Bh,如果是PE32＋，则是020Bh。</p></li><li><p>MajorLinkerVersion：链接程序的主版本号。</p></li><li><p>MinorLinkerVersion：链接程序的次版本号。</p></li><li><p>SizeOfCode：有IMAGE_SCN_CNT_CODE属性的区块的总大小（只入不舍），这个值是向上对齐某一个值的整数倍。例如，本例是200h，即对齐的是一个磁盘扇区字节数（200h）的整数倍。在通常情况下，多数文件只有1个Code块，所以这个字段和.text块的大小匹配。</p></li><li><p>SizeOflnitializedData：已初始化数据块的大小，即在编译时所构成的块的大小（不包括代码段）。但这个数据不太准确。</p></li><li><p>SizeOfUninitializedData：未初始化数据块的大小，装载程序要在虚拟地址空间中为这些数据约定空间。这些块在磁盘文件中不占空间，就像“UninitializedData”这一术语所暗示的一样，这些块在程序开始运行时没有指定值。未初始化数据通常在.bss块中。</p></li><li><p>AddressOfE川ryPoint：程序执行人口RVA。对于DLL，这个人口点在进程初始化和关闭时及线程创建和毁灭时被调用。在大多数可执行文件中，这个地址不直接指向Main、WinMain或DllMain函数，而指向运行时的库代码井由它来调用上述函数。在DLL中，这个域能被设置为0，此时前面提到的通知消息都无法收到。链接器的/NOENTRY开关可以设置这个域为0。</p></li><li><p>BaseOfCode：代码段的起始RVA。在内存中，代码段通常在PE文件头之后，数据块之前。在Microsoft链接器生成的可执行文件中，RVA的值通常是lOOOh。Borland的白ink32用lrnageBase加第l个CodeSection的RVA，并将结果存入该字段。</p></li><li><p>BaseOfData：数据段的起始RVA。数据段通常在内存的末尾，即PE文件头和CodeSection之后。可是，这个域的值对于不同版本的Microsoft链接器是不一致的，在64位可执行文件中是不会出现的。</p></li><li><p>lmageBase：文件在内存中的首选载入地址。如果有可能（也就是说，如果目前没有其他文件占据这块地址，它就是正确对齐的并且是一个合法的地址），加载器会试图在这个地址载入PE文件。如果PE文件是在这个地址载人的，那么加载器将跳过应用基址重定位的步骤。</p></li><li><p>SectionAlignment：载入内存时的区块对齐大小。每个区块被载入的地址必定是本字段指定数值的整数倍。默认的对齐尺寸是目标CPU的页尺寸。对运行在Windows9x/Me下的用模式可执行文件，最小的对齐尺寸是每页1000h(4KB）。这个字段可以通过链接器的/ALIGN开关来设置。在IA-64上，这个字段是按8KB排列的。</p></li><li><p>FileAlignment：磁盘上PE文件内的区块对齐大小，组成块的原始数据必须保证从本字段的倍数地址开始。对于x86可执行文件，这个值通常是200h或1000h，这是为了保证块总是从磁盘的扇区开始，这个字段的功能等价于NE格式文件中的段／资源、对齐因子使用不同版本的Microsoft链接器，默认值会改变。这个值必须是2的幕，其最小值为200h而且，如果SectionAlignment小于CPU的页尺寸，这个域就必须与SectionA!ignment匹配。链器开关/OPT:WIN98设置x86可执行文件的对齐值为1000h,/OPT:NOWIN98设置对齐值为200h。</p></li><li><p>MajorOperatingSystemVersion：要求操作系统的最低版本号的主版本号。随着这么多版本的Windows的出现，这个字段显然变得不切题了</p></li><li><p>MinorOperatingSystemVersion：要求操作系统的最低版本号的次版本号。</p></li><li><p>MajorOperatingSystemVersion：该可执行文件的主版本号，由程序员定义。它不被系统使用，并可以设置为0，可以通过链接器的NERSION开关来设置。</p></li><li><p>MinorlmageVersion：该可执行文件的次版本号，由程序员定义。</p></li><li><p>MajorSubsystemVersion：要求最低子系统版本的主版本号。这个值与下一个字段一起，通常被设置为4，可以通过链接器开关／SUBSYSTEM来设置。</p></li><li><p>MinorSubsystemVersion：要求最低子系统版本的次版本号。</p></li><li><p>Win32VersionValue：另一个从来不用的字段，通常被设置为0。</p></li><li><p>SizeOflmage：映像载入内存后的总尺寸，是指载入文件从Irr吨eBase到最后一个块的大小。最后一个块根据其大小向上取整。</p></li><li><p>SizeOfHeaders:MS-DOS头部、PE文件头、区块表的总尺寸。这些项目出现在PE文件中的所有代码或数据区块之前，域值四舍五入至文件对齐值的倍数。</p></li><li><p>CheckSum：映像的校验和。IMAGEHLP.DLL中的CheckSumMappedFile函数可以计算该值。一般的EXE文件该值可以是0，但一些内核模式的驱动程序和系统DLL必须有一个校验和。当链接器的／RELEASE开关被使用时，校验和被置于文件中。</p></li><li><p>Subsystem：一个标明可执行文件所期望的子系统（用户界面类型）的枚举值。这个值只对EXE重要，如下表</p><p><img src="/img/1554723738509.png" alt="1554723738509"></p></li><li><p>DllCharacteristics:DllMain()函数何时被调用。默认值为0。</p></li><li><p>SizeOfStackReserve：在EXE文件里为线程保留的拢的大小。它在一开始只提交其中一部，只有在必要时才提交剩下的部分。</p></li><li><p>SizeOfStackCommit：在EXE文件里，一开始即被委派给拢的内存，默认值是4KB。</p></li><li><p>SizeOfHeapReserve：在EXE文件里，为进程的默认堆保留的内存，默认值是1MB。</p></li><li><p>SizeOfHeapCommit：在EXE文件里，委派给堆的内存，默认值是4KB 。</p></li><li><p>LoaderFlags：与调试有关，默认值为0。</p></li><li><p>NumberOfRvaAndSizes：数据目录的项数。这个字段的值从WindowsNT发布以来一直是16。</p></li><li><p>DataDirect01y[l6］：数据目录表，由数个相同的IMAGE_DATA_DIRECTORY结构组成，指向输出表、输入表、资源块等数据。IMAGE_DATADIRECTORY的结构定义如下。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据目录表成员的结构如下表所示，各项成员含义后面会详细介绍。</p><p><img src="/img/1554723877710.png" alt="1554723877710"></p><p>PE文件定位输出表、输入表和资源等重要数据时，就是从IMAGE_DATA_DIRECTORY结构开始的。</p><p>例PE.exe的数据目录表位于128h～1A7h，每个成员占8字节，分别指向相关的结构，如图11.6所示。128h数据目录表的第1项，其值为0，即这个实例的输出表地址与大小皆为0，表示无输出表。130h是第2项，表示输入表地址为2040h(RVA），大小为3Ch。</p><p><img src="/img/1554723908440.png" alt="1554723908440"></p><p>PE编辑工具（例如LordPE）查看实例PE.exe文件的E结构。单LordPE的“PEEditor”按钮，打开E_Offset文件，在面板上会直接显示PE结构中的主要字段，如图11.7所示。单击“Directories”按钮，可以打开数据目录表查看面板，如图</p><p><img src="/img/1554723928180.png" alt="1554723928180"></p><p><img src="/img/1571159906781.png" alt="1571159906781"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Window-PE-–-文件头&quot;&gt;&lt;a href=&quot;#Window-PE-–-文件头&quot; class=&quot;headerlink&quot; title=&quot;Window PE – 文件头&quot;&gt;&lt;/a&gt;Window PE – 文件头&lt;/h1&gt;&lt;h2 id=&quot;PE文件头&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Windows" scheme="https://www.basicbit.cn/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://www.basicbit.cn/tags/Windows/"/>
    
      <category term="PE" scheme="https://www.basicbit.cn/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>Window PE -- 输入表</title>
    <link href="https://www.basicbit.cn/2018/11/01/2018-11-01-Windows%20PE%20%E8%BE%93%E5%85%A5%E8%A1%A8/"/>
    <id>https://www.basicbit.cn/2018/11/01/2018-11-01-Windows PE 输入表/</id>
    <published>2018-10-31T16:00:00.000Z</published>
    <updated>2019-10-15T17:18:16.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Window-PE-–-输入表"><a href="#Window-PE-–-输入表" class="headerlink" title="Window PE – 输入表"></a>Window PE – 输入表</h1><h2 id="输入表"><a href="#输入表" class="headerlink" title="输入表"></a>输入表</h2><p>可执行文件使用来自其他DLL的代码或数据的动作称为输入。当PE文件被载入时，Windows加载器的工作之一就是定位所有被输入的函数和数据，并让正在入的文件可以使用那些地址。这个过程是通过PE文件的输入表（Impo1tTable，简称“IT”，也称导人表）完成的。输入表中保存的是函数名和其驻留的DLL名等动态链接所需的信息。输入表在软件外亮技术中的地位非常重要，读者在研究与外壳相关的技术时一定要彻底掌握这部分知识。</p><h2 id="输入表的调用"><a href="#输入表的调用" class="headerlink" title="输入表的调用"></a>输入表的调用</h2><p>在代码分析或编程中经常会遇到输入函数（ImportFunctions，或称导人函数）。输入函数就是被程序调用但其执行代码不在程序中的函数，这些函数的代码位于相关的DLL文件中，在调用者程序中只保留相关的函数信息，例如函数名、DLL文件名等。对磁盘上的PE文件来说，它无法得知这些输入函数在内存中的地址。只有当PE文件载入内存后，Windows加载器才将相关DLL载人，并将调用输入函数的指令和函数实际所处的地址联系起来。</p><p>当应用程序调用一个DLL的代码和数据时，它正在被隐式地链接到DLL，这个过程完全由Windows加载器完成。另一种链接是运行期的显式链接，这意味着必须确定目标DLL已经被加载，然后寻找API的地址，这几乎总是通过调用LoadLibra巧和GetProcAddress完成的。</p><p>当隐含地链接一个API时，类似LoadLibrary和GetProcAddress的代码始终在执行，只不过这是由Windows加载器自动完成的。Windows加载器还保证了PE文件所需的任何附加的DLL都巳载入例如，Windows2000/XP上每个由VisualC＋＋创建的正常程序都要链接KERNEL32.DLL，而它又从NTDLL.DLL中输入函数。同样，如果链接了GDI32.DLL，它又依赖USER32、ADVAPI32、NTDLL和KERNEL32等DLL的函数，那么都要由Windows加载器来保证载入并解决输入问题。</p><p>在PE文件内有一组数据结构，它们分别对应于被输入的DLL。每一个这样的结构都给出了被输入的DLL的名井指向一组函数指针。这组函数指针称为输入地址表（ImportAddressTable,IAT）。每一个被引人的API在IAT里都有保留的位置，在那里它将被Windows加载器写人输入函数的地址。最后一点特别重要：一旦模块被载入，IAT中将包含所要调用输入函数的地址。</p><p>把所有输入函数放在IAT中的同一个地方是很有意义的。这样，无论在代码中调用一个输入函数多少次，都会通过IAT中的同一个函数指针来完成。</p><p>现在看看怎样调用一个输入函数。需要考虑两种情况，即高效和低效。最好的情况是像下面这样，直接调用00402010h处的函数，00402010h位于IAT中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL  DWORD  PTR  [00402010]</span><br></pre></td></tr></table></figure><p>而实际上，对一个被输入的API的低效调用像下面这样（实例PE.exe中调用LoadlconA函数的代码）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Call  00401164</span><br><span class="line">...</span><br><span class="line">:00401164</span><br><span class="line">Jmp  dword  ptr  [00402010]</span><br></pre></td></tr></table></figure><p>这种情况下，CALL令把控制权转交给一个子程序，子程序中的JMP指令跳转到IAT中的00402010h。简单地说就是：使用5字节的额外代码；由于使用了额外的JMP指令，将花费更多的执行时间。</p><p>有人可能会问：为什么要采用此种低效的方法？对这个问题有一很好的解释：编译器元法区分输入函数调用和普通函数调用。对每个函数调用，编译器使用同样形式的CALL指令，示例如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL  XXXXXXXX</span><br></pre></td></tr></table></figure><p>“xxxxxxxx”是一个由链接器填充的实际地址。注意，这条指令不是从函数指针来的，而是从代码中的实际地址来的。为了实现因果平衡，链接器必须产生一块代码来取代“xxxxxxxx”，简单的方法就是像上面一样调用一个JMPstub。</p><p>JMP指令来自为输入函数准备的输入库。如果读者检查过输入库，在输入函数名字的关联处就会发现与上面的JMPstub相似的指令，即在默认情况下，对被输入API的调用将使用低效的形式。</p><p>如何得到优化的形式？答案来自一个给编译器的提示形式。可以使用修饰函数的＿declspec(dllimport）来告诉编译器，这个函数来自另一个DLL，这样编译器就会产生指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL  DWORD  PTR  [XXXXXXXX]</span><br></pre></td></tr></table></figure><p>而不是指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL  XXXXXXXX</span><br></pre></td></tr></table></figure><p>此外，编译器将给函数加上“＿imp＿＂前缀，然后将函数送给链接器，这样就可以直接把一imp_xxx送到IAT中，而不需要调用JMPstub了。</p><p>如果要编写一个输出函数，井为它们提供一个头文件，不要忘了在函数的前面加上修饰符“_declspec(dllimport）”，在winnt.h等系统头文件中就是这样做的，示例如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_declspec(dllimport) void Foo(void)</span><br></pre></td></tr></table></figure><h3 id="输入表结构"><a href="#输入表结构" class="headerlink" title="输入表结构"></a>输入表结构</h3><p>PE文件头的可选映像头中，数据目录表的第2个成员指向输入表。入表以一个IMAGE_IMPORT_DESCRI凹、OR(IID）数组开始。每个被PE文件隐式链接的DLL都有一个IID。在这个数组中，没有字段指出该结构数组的项数，但它的最后一个单元是“NULL”，由此可以计算出该数组的项数。如，某个PE文件从两个DLL文件中引人函数，因此存在两个IID结构来描述这些DLL文件，并在两个IID结构的最后由一个内容全为0的IID结构作为结束。IID的结构如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _IMAGE_IMPORT_DESCRIPTOR &#123;</span><br><span class="line">union &#123;</span><br><span class="line">DWORD Characteristics;</span><br><span class="line">DWORD OriginalFirstThunk;//INT(Import Name Table) address (RVA)</span><br><span class="line">&#125;;</span><br><span class="line">DWORD TimeDateStamp;</span><br><span class="line">DWORD ForwarderChain;</span><br><span class="line">DWORD Name;//library name string address (RVA)</span><br><span class="line">DWORD FirstThunk;//IAT(Import Address Table) address (RVA)</span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure><ul><li>OriginalFirstThunk(Characte1istics）：包含指向输入名称表（INT）的RVA。INT是一个IMAGETHUNK_DATA结构的数组，数组中的每个MAGE_THUNK_DATA结构都指向IMAGEIMPORT_BY_NAME构，数组以一个内容为0的IMAGE_THUNK_DATA结构结束。</li><li>TimeDateStamp：一个32位的时间标志，可以忽略。</li><li>ForwarderChain：这是第l个被转向的A凹的索引，一般为0，在程序引用一个DLL中的API,而这个API又在引用其他DLL的API时使用（但这样的情况很少出现）。</li><li>Name:DLL名字的指针。它是一个以“00”结尾的ASCII字符的RVA地址该字符串包含输入的DLL名，例如“KERNEL32.DLL”USER32.DLL”。</li><li>FirstThunk：包含指向输入地址表（IAT）的RVA。IAT是一个IMAGE_THUNK_DATA结构的数、</li></ul><p>OriginalFirst 和 FirstThunk结构类似。他们分别指向两个本质上相同的数组IMAGE_THUNK_DATA，这些数组有好几种叫法，最常见的是输入名称表（ImportNameTable,INT）和输入地址表（lmpot Address Table,IAT）。如下图所示为一个可执行文件正在从USER32DLL里输入一些API。</p><p><img src="/img/1554866976205.png" alt="1554866976205"></p><p>两个数组中都有IMAGE_THUNK_DATA结构类型的元素，它是一个指针大小的联合（union）。每个IMAGE_THUNK_DATA元素对应于一个从可执行文件输入的函数。两个数组的结束都是由一个值为0的IMAGE_THUNK_DATA元素表示的。IMAGE_THUNK_DATA结构实际上是一个双字，该结构在不同时刻有不同的含义，具体如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _IMAGE_THUNK_DATA32 &#123;</span><br><span class="line">    union &#123;</span><br><span class="line">        DWORD ForwarderString;      // PBYTE  指向一个转向者字符串的RVA</span><br><span class="line">        DWORD Function;             // PDWORD 被输入的函数的内存地址</span><br><span class="line">         DWORD Ordinal;              // 被输入的 API 的序数值</span><br><span class="line">         DWORD AddressOfData;        // PIMAGE_IMPORT_BY_NAME   指向 IMAGE_IMPORT_BY_NAME</span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br><span class="line">typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</span><br></pre></td></tr></table></figure><p>IMAGE_THUNK_DATA值的最高位为1时，表示函数以序号方式输入，这时低31位（或者一个64位可执行文件的低63位）被看成一个函数序号。当双字的最高位为0时，表示函数以字符串类型的函数名方式输入，这时双字的值是一个RVA，指向一个IMAGE_lMPORT_BY_NAME结构。</p><p>IMAGE_IMPORT_BY_NAME结构仅有1个字大小，存储了一个输入函数的相关信息，结构如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　IMAGE_IMPORT_BY_NAME STRUCT</span><br><span class="line">　　Hint WORD ?</span><br><span class="line">　　Name BYTE ?</span><br><span class="line">　　IMAGE_IMPORT_BY_NAME ENDS</span><br></pre></td></tr></table></figure><ul><li>Hint：本函数在其所驻留DLL的输出表中的序号。该域被PE装载器用来在DLL的输出表里快速查询函数。该值不是必需的，一些链接器将它设为0。</li><li>Name：含有输入函数的函数名。函数名是一个ASCII字符串，以“NULL”结尾。注意，这里虽然将Name的大小以字节为单位进行定义，但其实它是一个可变尺寸域，由于没有更好的表示方法，只好在上面的定义中写成“BYTE”。</li></ul><h2 id="输入地址表"><a href="#输入地址表" class="headerlink" title="输入地址表"></a>输入地址表</h2><p>为什么会有两个并行的指针数组指向IMAGE_IMPORT_BY_NAME结构呢？第1个数组（由OriginalFirstThunk所指向）是单独的一项，不可改写，称为INT，有时也称为提示名表（Hint-nameTable）。第2个数组（由FirstThunk所指向）是由PE装载器重写的。PE装载器先搜索OriginalFirstThunk，如果找到，加载程序就迭代搜索数组中的每个指针，找出每个IMAGE_IMPORT_BY_NAME结构所指向的输入函数的地址。然后，加载器用函数真正的人口地址来替代由FirstThunk指向的IMAGE_THUNK_DATA数组里元素的值。“Jmpdwordptr[xxxxxxxx］”语句中的“［口xxxxxx］”是指FirstThunk数组中的一个人口，因此称为输入地址表（Import Address Table,IAT）。所以，当PE文件装载内存后准备执行时，图11.13己转换成如图11.14所示的状态，所有函数人口地址排列在一起。此时，输入表中的其他部分就不重要了，程序依靠IAT提供的函数地址就可以正常运行。</p><p><img src="/img/1554867171146.png" alt="1554867171146"></p><p>在某些情况下，一些函数仅由序号引出。也就是说，不能用函数名来调用它们，只能用它们的位置来调用它们。此时，IMAGE_THUNK_DATA值的低位字指示函数序数，最高有效位（MSB）设为1。微软提供了一个方便的常量IMAGE_ORDINAL_FLAG32来测试DWORD值的M钮，其值为80000000h（在PE32＋中是IMAGE_ORDINAL_FLAG64，其值为8000000000000000h）。</p><p>另一种情况是程序OrignalFirstThunk的值为0。在初始化时，系统根据FirstThunk的值找到指向函数名的地址串，根据地址串找到函数名，再根据函数名得到人口地址，然后用入口地址取代FirstThunk指向的地址串中的原值。</p><p><img src="/img/1571159894317.png" alt="1571159894317"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Window-PE-–-输入表&quot;&gt;&lt;a href=&quot;#Window-PE-–-输入表&quot; class=&quot;headerlink&quot; title=&quot;Window PE – 输入表&quot;&gt;&lt;/a&gt;Window PE – 输入表&lt;/h1&gt;&lt;h2 id=&quot;输入表&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Windows" scheme="https://www.basicbit.cn/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://www.basicbit.cn/tags/Windows/"/>
    
      <category term="PE" scheme="https://www.basicbit.cn/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>Window PE -- 输出表 基址重定位</title>
    <link href="https://www.basicbit.cn/2018/11/01/2018-11-01-Windows%20PE%20%E8%BE%93%E5%87%BA%E8%A1%A8/"/>
    <id>https://www.basicbit.cn/2018/11/01/2018-11-01-Windows PE 输出表/</id>
    <published>2018-10-31T16:00:00.000Z</published>
    <updated>2019-10-15T17:18:11.455Z</updated>
    
    <content type="html"><![CDATA[<p>Window PE – 输出表 基址重定位</p><h1 id="输出表"><a href="#输出表" class="headerlink" title="输出表"></a>输出表</h1><p>创建一个DLL时，实际上创建了一组能让XE或其他DLL调用的函数，此时PE装载器根据DLL文件中输出的信息修正被执行文件的IAT。当一个LL函数能被EXE或另一个DLL文件使用时，它就被“输出了”（Exported）。其中，输出信息被保存在输出表中，DLL文件通过输出表向系统提供输出函数名、序号和人口地址等信息。</p><p>EXE文件中一般不存在输出表，而大部分DLL文件中存在输出表。当然，这也不是绝对的，有些EE文件中也存在输出函数。</p><h2 id="输出表结构"><a href="#输出表结构" class="headerlink" title="输出表结构"></a>输出表结构</h2><p>输出表（ExportTable）主要内容是一个表格，其中包括函数名称、输出序数等。序数是指定DLL中某个函数的16位数字，在所指向的DLL里是独一无二的。在此不提倡仅通过序数引出函数，这会带来DLL维护上的问题。一旦DLL升级或被修改，调用该DLL的程序将无法工作。</p><p>输出表是数据目录表的第I个成员，指向IMAGE_EXPORT_DIRECTORY（简称“IED”）结构。IED结构定义如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_EXPORT_DIRECTORY STRUCT【导出表，共40字节】</span><br><span class="line">&#123;</span><br><span class="line">+00 h DWORD Characteristics ; 未使用，总是定义为0</span><br><span class="line">+04 h DWORD TimeDateStamp ; 文件生成时间</span><br><span class="line">+08 h WORD MajorVersion     ; 未使用，总是定义为0</span><br><span class="line">+0A h WORD MinorVersion ; 未使用，总是定义为0</span><br><span class="line">+0C h DWORD Name     ; 模块的真实名称</span><br><span class="line">+10 h DWORD Base     ; 基数，加上序数就是函数地址数组的索引值</span><br><span class="line">+14 h DWORD NumberOfFunctions ; 导出函数的总数</span><br><span class="line">+18 h DWORD NumberOfNames ; 以名称方式导出的函数的总数</span><br><span class="line">+1C h DWORD AddressOfFunctions ; 指向输出函数地址的RVA</span><br><span class="line">+20 h DWORD AddressOfNames ; 指向输出函数名字的RVA</span><br><span class="line">+24 h DWORD AddressOfNameOrdinals ; 指向输出函数序号的RVA</span><br><span class="line">&#125;;IMAGE_EXPORT_DIRECTORY ENDS</span><br></pre></td></tr></table></figure><ul><li>Characteristics：输出属性的旗标。前还没有定义，总是为0。</li><li>TimeDateStamp：输出表创建的时间（GMT时间）。</li><li>MajorVersion：输出表的主版本号未使用，设置为0。</li><li>MinorVersion：输出表的次版本号。未使用，设置为。</li><li>Name：指向一个ASCII字符串的RVA。这个字符串是与这些输出函数相关联的DLL的名字（例如KERNEL32.DLL）。</li><li>Base：这个字段包含用于这个PE文件输出表起始序数值（基数）。在正常情况下这个值是1，但并非必须如此。当通过序数来查询一个输出函数时，这个值从序数里被减去，其结果将为进入输出地址表（EAT）的索引。</li><li>NumberOfFunctions:EAT中的条目数量。注意，一些条目可能是0，这个序数值表明没有代码或数据被输出。</li><li>NumberOfNames：输出函数名称表（ENT）里的条目数量。NumberOlNames的值总是小于或等于NumberOfFunctions的值，小于的情况发生在符号只通过序数输出的时候。另外，当被赋值的序数里有数字间距时也会是小于的情况，这个值也是输出序数表的长度。</li><li>AddressOfFunctions:EAT的RVA。EAT是一个RVA数组，数组中的每一个非零的RVA都对应于一个被输出的符号。</li><li>AddressOlNames:ENTRVA。ENT一个指向ASCII字符串的RVA组。每一个ASCII字符串对应于一个通过名字输出的符号。因为这个表是要排序的，所以ASCII字符串也是按顺序排列的。这允许加载器在查询一个被输出的符号时使用进制查找方式，名称的排序是二进制的（就像C++RTL中strcmp函数提供的一样），而不是一个环境特定的字母顺序。</li><li>AddressOfNameOrdinals：输出序数表的RVA。这个表是字的数组。个表将ENT中的数组索引映射到相应的输出地址表条目。</li></ul><p>设计输出表是为了方便PE装载器工作。首先，模块必须保存所有输出函数的地址，供PE装载器查询。块将这些息保存在AddressOfFunctions域所指向的数组中，而数组元素数目存放在NumberOfFunctions域中。如果模块引出了40个函数，那么在AddressOfFunctions指向的数组中必定有40个元素，NumberOfFunctions的值为40。如果有些函数是通过名字引出的，那么模块必定也在文件中保留了这些信息。这些名字的RVA值存放在一个数组中，供PE装载器查询。该数组由AddressOfNames指向，NumberOfNames中包含名字数目。PE装载知道函数名，并想、以此获取这些函数的地址。目前已有两个模块，分别是名字数组和地址数组，但两者之还没有联系的纽带，需要一些联系函数名及其地址为它们建立联系。PE文档指出，可以使用指向地址数组的索引作为连接，因此PE装载器在名字数组中找到匹配名字的同时，也获了指向地址表中对应元素的索引。这些索引保存在由AddressOfNameOrdinals域所指向的另一个数组（最后一个）中。由于该数组起联系名字和地址的作用，其元素数目一定与名字数组相同。例如，每个名字有且仅有1个相关地址，反过来则不一定（一个地址可有好几个名字来对应）因此，需要给同一个地址取“别名”。为了发挥连接作用，名字数组和索引数组必须并行成对使用，例如索引数组的第1个元素必定含有第1个名字的索引，依此推。</p><p><img src="/img/1554867753098.png" alt="1554867753098"></p><h1 id="基址重定位"><a href="#基址重定位" class="headerlink" title="基址重定位"></a>基址重定位</h1><p>当链接器生成一个PE文件时，会假设这个文件在执行时被装载到默认的基地址处，并把code和data的相关地址都入PE文件。如果载入时将默认的值作为基地址载入，则不需要重定位。但是，如果PE文件被装载到虚拟内存的另一个地址中，链接器登记的那个地址就是错误的，这时就需要用重定位表来调整。在PE文件中，重定位表往往单独作为一块，用“.reloc”表示。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>和NE格式的重定位方式不同，PE格式的做法十分简单。PE格式不参考外部DLL或模块中的其区块，而是把文件中所有可能需要修改的地址放在一个数组里。如果PE文件不在首选的地址载入，那么文件中的每一个定位都需要被修正。对加载器来说，它不需要知道关于地址使用的任何细节，只要知道有一系列的数据需要以某种一致的方式来修正就可以了。下面以实例DllDemo.DLL为例讲述其重定位过程。如下代码中两个加粗的地址指针就是需要重定位的数据。</p><p><img src="/img/1554867886934.png" alt="1554867886934"></p><p>分析一下0040100Eh处，其作用是将一个指针压人枝，00402000h是某一字符串的指针。这句指令有5字节长，第l个字节（68h）是指令的操作码，后4个字节用来保存一个DWORD大小的地址（00402000h）。在这个例子中，指令来自－个基址为00400000h的DLL文件，因此这个字符串的RVA值是2000h。如果PE文件确实在00400000h处载人，指令就能够按照现在的样子正确执行。但是，当DLL执行时，Windows加载器决定将其映射到00870000h处（映射基址由系统决定），加载器就会比较基址和实际的载入地址，计算出一个差值。在这个例子中，差值是470000h，这个差值能被加载到DWORD大小的地址里以形成新地址。在前面的例子中，地址0040100Fh是指令中双字的定位，对它将有一个基址重定位，实际上字符串的新地址就是00872000h。为了让Windows有能力进行这样的调整，可执行文件中有多个“基址重定位数据”。本例中的Windows加载器应把470000h加给00402000h，并将结果00872000h写回原处。这个过程如下图所示。</p><p><img src="/img/1554867929435.png" alt="1554867929435"></p><p>DllDemo.DLL在内存中进行重定位处理后的代码如下。</p><p><img src="/img/1554867947723.png" alt="1554867947723"></p><p>对EXE文件来说，每个文件总是使用独立的虚拟地址空间，所以EXE总是能够按照这个地址载人，这意味着EXE文件不再需要重定位信息。对DLL来说，因为多个DLL文件使用宿主EXE文件的地址空间，不能保证载入地址没有被其他DLL使用，所以DLL文件中必须包含重定位信息，除非用一个/FIXED开关来忽略它们。在VisualStudio.NET中，链接器会为Debug和Release模式的EXE文件省略基址重定位，因此，在不同系统中跟踪同一个DLL文件时，其虚拟地址是不同的，也就是说，在读者的机器里运行DllDemo.DLL,Windows加载器映射的基址可能不是00870000h，而是其他地址。</p><h2 id="重定位表的结构"><a href="#重定位表的结构" class="headerlink" title="重定位表的结构"></a>重定位表的结构</h2><p>基址重定位表（BaseRelocationTable）位于一个.reloc区块内，找到它们的正确方式是通过数据目录表的IMAGE_DIRECTORY_ENTRY_BASERELOC条目查找。基址重定位数据采用类似按页分割的方法组织，是由许多重定位块串接成的，每个块中存放4KB(lOOOh）的重定位信息，每个重定位数据块的大小必须以DWORD(4字节）对齐。它们以一个IMAGE_BASE_RELOCATION结构开始，格式如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_BASE_RELOCATION STRUC 【基址重定位位于数据目录表的第六项，共8+N字节】</span><br><span class="line">&#123;</span><br><span class="line">+00 h DWORD VirtualAddress ;重定位数据开始的RVA 地址</span><br><span class="line">+04 h DWORD SizeOfBlock ;重定位块得长度，标识重定向字段个数</span><br><span class="line">+08 h WORD TypeOffset ;重定项位数组相对虚拟RVA,个数动态分配</span><br><span class="line">&#125;;</span><br><span class="line">IMAGE_BASE_RELOCATION ENDS</span><br></pre></td></tr></table></figure><ul><li>Virtua!Address：这组重定位数据的开始RVA地址。各重定位项的地址加这个值才是该重定位项的完整RVA地址。</li><li>SizeOfBlock：当前重定位结构的大小。因为Virtua!Address和SizeOfBlock的大小都是固定的4字节，所以这个值减8就是TypeOffset数组的大小。</li><li>TypeOffset：一个数组。数组每项大小为2字节，共16位。这16位分为高4位和低12位。高4位代表重定位类型；低12位是重定位地址，它与VirtualAddress相加就是指向PE映像中需要修改的地址数据的指针。</li></ul><p>常见的重定位类型如下表所示。虽然有多种重定位类型，但对x86可执行文件来说，所有的基址重定位类型都是IMAGE_REL_BASED_HIGHLOW。在一组重定位结束的地方会出现一个类型是IMAGE_REL_BASED_ABSOLUTE的重定位，这些重定位什么都不做，只用于填充，以便下一个IMAGE_BASE_RELOCATION按4字节分界线对齐。所有重定位块以一个V川ua!Address段为0的IMAGE_BASE_RELOCATION结构结束。</p><p><img src="/img/1554868151561.png" alt="1554868151561"></p><p>重定位表的结构如下图所示，它由数个IMAGE_BASE_RELOCATION结构组成，每个结构由VirtualAddress、SizeOfBlock和TypeOffset3部分组成。</p><p><img src="/img/1554868174075.png" alt="1554868174075"></p><p>对于IA-64可执行文件，重定位类型似乎总是IMAGE_REL_BASED_DIR64。就像x86重定位，也用IMAGE_REL_BASED_ABSOLUTE重定位类型进行填充有趣的是，尽管IA-64的EE页大小是8KB，但基址重定位仍是4KB的块。</p><p><img src="/img/1571159890689.png" alt="1571159890689"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Window PE – 输出表 基址重定位&lt;/p&gt;
&lt;h1 id=&quot;输出表&quot;&gt;&lt;a href=&quot;#输出表&quot; class=&quot;headerlink&quot; title=&quot;输出表&quot;&gt;&lt;/a&gt;输出表&lt;/h1&gt;&lt;p&gt;创建一个DLL时，实际上创建了一组能让XE或其他DLL调用的函数，此时PE
      
    
    </summary>
    
      <category term="Windows" scheme="https://www.basicbit.cn/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://www.basicbit.cn/tags/Windows/"/>
    
      <category term="PE" scheme="https://www.basicbit.cn/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>Window SEH异常 -- 异常基础</title>
    <link href="https://www.basicbit.cn/2018/10/31/2018-10-31-Window%20SEH%20%E5%8E%9F%E7%90%86/"/>
    <id>https://www.basicbit.cn/2018/10/31/2018-10-31-Window SEH 原理/</id>
    <published>2018-10-30T16:00:00.000Z</published>
    <updated>2019-10-15T17:18:57.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Window-SEH异常-–-异常基础"><a href="#Window-SEH异常-–-异常基础" class="headerlink" title="Window SEH异常 – 异常基础"></a>Window SEH异常 – 异常基础</h1><h2 id="SEH数据结构"><a href="#SEH数据结构" class="headerlink" title="SEH数据结构"></a>SEH数据结构</h2><h3 id="TIB-结构"><a href="#TIB-结构" class="headerlink" title="TIB 结构"></a>TIB 结构</h3><p>TIB(ThreadInformatio它位于TEB(ThreadEnvironmentBlock，线程环境块）的头部，而TEB是操作系统为了保存每个线程的私有数据创建的，每个线程都有自己的TEB。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     PEXCEPTION_REGISTRATION_RECORD ExceptionList;</span><br><span class="line">     PVOID StackBase;</span><br><span class="line">     PVOID StackLimit;</span><br><span class="line">     PVOID SubSystemTib;</span><br><span class="line">     <span class="keyword">union</span></span><br><span class="line">     &#123;</span><br><span class="line">          PVOID FiberData;</span><br><span class="line">          ULONG Version;</span><br><span class="line">     &#125;;</span><br><span class="line">     PVOID ArbitraryUserPointer;</span><br><span class="line">     PNT_TIB Self;</span><br><span class="line">&#125; NT_TIB, *PNT_TIB;</span><br></pre></td></tr></table></figure><p>然Windows系统经历了多次更新换代，但是从Windows 2000到Windows10,TIB结构都没有变化。其中，与异常处理相关的项是指向EXCEPTION_REGISTRATION_RECORD结构的指针ExceptionList，它位于TIB的偏移0处，同时在TEB的偏移0处。在x86平台的用户模式下，Windows将FS段选择器指向当前线程的TEB据，即TEB总是由fs:[O］指向的（在x64平台上，这个指向关系变成了gs:[O］。关于x64平台上的异常处理，会在8.5节详细讲述）。而当线程运行在内核模式下时，Windows将FS段选择器指向内核中的KPCRB结构（Processor Control Region Block ，处理器控制块），该结构的头部同样是上述的NT_TIB构。</p><h3 id="EXCEPTION-REGISTRATION-RECORD结构"><a href="#EXCEPTION-REGISTRATION-RECORD结构" class="headerlink" title="EXCEPTION_REGISTRATION_RECORD结构"></a>EXCEPTION_REGISTRATION_RECORD结构</h3><p>TEB移量为0的＿EXCEPTION_REGISTRATION_RECORD主要用T描述线程异常处理程的地址，多个该结构的链表描述了多个线程异常处理过程的嵌套层次关系，其定义如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     PEXCEPTION_REGISTRATION_RECORD Next;</span><br><span class="line">     PEXCEPTION_DISPOSITION Handler;</span><br><span class="line">&#125; EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure><p>其中，“Next”是指向下一个＿EXCEPTIONREGISTRATION_RECORD（简称“ERR”）的指针，形成一链状结构，而链表头就存放在也：［O］指向的TEE中；＂Handler”指向异常处理回调函数，如下图。</p><p><img src="/img/1554693090658.png" alt="1554693090658"></p><p>当程序运行过程中产生异常时，系统的异常分发器就会从fs:[0］处取得异常处理的链表头，然后查找异常处理链表并依次调用各个链表节点中的异常处理回调函数。由于TEE是线程的私有数据结构，相应地，钱程也都有自己的异常处理链表，即SEH机制的作用范围仅限于当前线程。从数据结构的角度来讲，SEH链就是一个只允许在链表头部进行增加和删除节点操作的单向链表，且链表头部永远保存在fs:[0］处的TEB结构中。</p><h3 id="EXCEPTION-POINTERS结构"><a href="#EXCEPTION-POINTERS结构" class="headerlink" title="EXCEPTION_POINTERS结构"></a>EXCEPTION_POINTERS结构</h3><p>一个异常发生时，在没有调试器干预的情况下，操作系统会将异常信息转交给用户态的异常处理过程。实际上，由于同一个线程在用户态和内核态使用的是两个不同的拢，为了让用户态的常处理程序能够访问与异常相关的数据，操作系统必须把与本次异常相关联的EXCEPTION_RECORD结构和CONTEXT结构放到用户态战中，同时在党中放置一个＿EXCEPTION_POINTERS结构，它包含两个指针，一指向EXCEPTION_RECORD锚构，另一个指向CONTEXT结构，示例如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样，用户态的异常处理程序就能够取得异常的具体信息和发生异常时线程的状态信息，并根据具体情况进行处理了。</p><h2 id="SEH处理程序的安装与卸载"><a href="#SEH处理程序的安装与卸载" class="headerlink" title="SEH处理程序的安装与卸载"></a>SEH处理程序的安装与卸载</h2><p>由于fs:[0］总是指向当前异常处理程序的链表头，当程序中需要安装一个新的SEH异常处理程序时，只要填写一个新的EXCEPTION_REGISTRATION_RECORD结构，并将其插入该链表的头部即可。根据SEH的设计要求，它的作用范围与安装它的函数相同，所以通常在函数头部安装SEH异常处理程序，在函数返回前卸载可以说，SEH是基于战帧的异常处理机制。</p><p>在安装SEH理程序之前，需要准备一个符合SEH标准的回调函数，然后使用如下代码进行SEH异常处理程序的安装。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assume fs:nothing</span><br><span class="line">push offset SEHandler</span><br><span class="line">push fs:[<span class="number">0</span>]</span><br><span class="line">mov fs:[<span class="number">0</span>],esp</span><br></pre></td></tr></table></figure><p>“assume fs:nothing”是MASM编译器的特殊要求，若不满足该要求将出现编译错误，后面3行则是注册回调函数。“push offset SEHandler”和“push fs:[0］”相继向棋中压入了Handler和当前的SEH链表头，这两个元素构成了一个新的_EXCEPTION_REGISTRATION_RECORD结构，此时它的位置就在桔顶，即esp指向的位置。然后，esp（也就是最新的链表头）保存到fs:[0］中也就是修改TIB结中的ExceptionList，相当于向链表中插入了一个新节点。该操作前后SEH链表的变化如下图。</p><p><img src="/img/1554693437750.png" alt="1554693437750"></p><p>理解了SEH的安装过，再看SEH的卸载就比较简单了，只要把刚才保存的fs:[O］的原始值填回并恢复栓的平衡即可，相当于从链表头部删掉了一个节点，示例如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov esp,dword ptr fs:[<span class="number">0</span>]</span><br><span class="line">pop dword ptr fs:[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><img src="/img/1571159936722.png" alt="1571159936722"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Window-SEH异常-–-异常基础&quot;&gt;&lt;a href=&quot;#Window-SEH异常-–-异常基础&quot; class=&quot;headerlink&quot; title=&quot;Window SEH异常 – 异常基础&quot;&gt;&lt;/a&gt;Window SEH异常 – 异常基础&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="Windows" scheme="https://www.basicbit.cn/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://www.basicbit.cn/tags/Windows/"/>
    
      <category term="SEH" scheme="https://www.basicbit.cn/tags/SEH/"/>
    
  </entry>
  
  <entry>
    <title>Window SEH异常 -- 异常初识</title>
    <link href="https://www.basicbit.cn/2018/10/31/2018-10-31-Windows%20Seh%20%E5%88%9D%E8%AF%86/"/>
    <id>https://www.basicbit.cn/2018/10/31/2018-10-31-Windows Seh 初识/</id>
    <published>2018-10-30T16:00:00.000Z</published>
    <updated>2019-10-15T17:18:46.217Z</updated>
    
    <content type="html"><![CDATA[<p> Window SEH异常 – 异常初识</p><h2 id="异常处理的基本概念"><a href="#异常处理的基本概念" class="headerlink" title="异常处理的基本概念"></a>异常处理的基本概念</h2><p>所谓异常就是在应用程序正常执行过程中发生的不正常事件。由CPU引发的异常称为硬件异常，例如访问一个无效的内存地址由操作系统或应用程序引发的异常称为软件异常。</p><p>常见的异常见下表</p><p><img src="/img/1554688283899.png" alt="1554688283899"></p><h2 id="异常处理的基本过程"><a href="#异常处理的基本过程" class="headerlink" title="异常处理的基本过程"></a>异常处理的基本过程</h2><p>Windows常启动后，将运行在保护模式下，当有中断或异常发生时，CPU会通过中断描述柯：表(IDT）来寻找处理函数。因此，IDT表是CPU（硬件）和操作系统（软件）交接中和异常的关口。</p><h3 id="IDT"><a href="#IDT" class="headerlink" title="IDT"></a>IDT</h3><p>IDT是一张位于物内存中的线性表，共有256项。在32位模式下每个IDT项的长度是8字节，在64位模式下则为64字节。</p><p>操作系统在启动阶段会初始化这个表，系统中的每个CPU都有一份IDT的拷贝。下面主要讨论32位模式下的IDT。IDT的位置和长度是由CPU的IDTR寄存器描述的。IDTR寄存器共有48位，其中高32位是表的基址，低16位是表的长度。尽管可以使用SIDT和LIDT令来读写该寄存器，但LIDT是特权指令，只能在Ring 0特权级下运行。</p><p>IDT的每一项是一个门结构，它是发生中断或异常时CPU转移控制权的必经之路，包括如下3种门描述符。</p><ul><li>任务门（Task-gate）描述符，主要用于CPU的任务切换（TSS功能）。</li><li>中断门（Interrupt-gate）描述符，主要用于描述中断处理程序的人口。</li><li>陷阱门（Trap-gate）描述符，主要用于描述异常处理程序的人口。</li></ul><p>使用WinDbg的本地内核调试模式可以比较方便地观察IDT。</p><p><img src="/img/1554688741507.png" alt="1554688741507"></p><p><img src="/img/1554688751713.png" alt="1554688751713"></p><p>可以看到，02、08和12项就是任务门的处理过程，其他项是陷阱门的处理过程，在一些没有显示的内容中包含了中断门的处理过程。</p><h3 id="异常处理的准备工作"><a href="#异常处理的准备工作" class="headerlink" title="异常处理的准备工作"></a>异常处理的准备工作</h3><p>当有中断或异常发生时，CPU会根据中断类型号（这里其实把异常也视为一种中断）转而执行对应的中断处理程序，对异常来说就是上面看到的KiTrapXX函数。例如，中断号03对应于一个断点异常，当该异常发生时，CPU就会执行nt!KiTrap03函数来处理该异常。各个异常处理函数除了针对本异常的特定处理之外，通常会将异常信息进行封装，以便进行后续处理。</p><p>封装的内容主要有两部分。一部分是异常记录，包含本次异常的信息，该结构定义如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_RECORD</span> &#123;</span></span><br><span class="line">  DWORD                    ExceptionCode;</span><br><span class="line">  DWORD                    ExceptionFlags;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_RECORD</span> *<span class="title">ExceptionRecord</span>;</span></span><br><span class="line">  PVOID                    ExceptionAddress;</span><br><span class="line">  DWORD                    NumberParameters;</span><br><span class="line">  ULONG_PTR                ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];</span><br><span class="line">&#125; EXCEPTION_RECORD;</span><br></pre></td></tr></table></figure><p>其中，ExceptionCode字段定义了异常的产生原因，下表列出了一些常见的异常产生原因。当然，也可以定义自己的Excer廿ExceptionCode，自定义代码可在API函数RaiseException中使用。</p><p><img src="/img/1554688974585.png" alt="1554688974585"></p><p>一部分被封装的内容称为陷阱帧，它精确描述了发生异常时线程的状态（Windows的任务调度是基于线程的）。该结构与处理器高度相关，因此在不同的平台上（Intel x86/x64、MIPS、Alpha和PowerPC处理器等）有不同的定义。在常见的x86平台上，该结构定义如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KTRAP_FRAME</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     ULONG DbgEbp;</span><br><span class="line">     ULONG DbgEip;</span><br><span class="line">     ULONG DbgArgMark;</span><br><span class="line">     ULONG DbgArgPointer;</span><br><span class="line">     WORD TempSegCs;</span><br><span class="line">     UCHAR Logging;</span><br><span class="line">     UCHAR Reserved;</span><br><span class="line">     ULONG TempEsp;</span><br><span class="line">     ULONG Dr0;</span><br><span class="line">     ULONG Dr1;</span><br><span class="line">     ULONG Dr2;</span><br><span class="line">     ULONG Dr3;</span><br><span class="line">     ULONG Dr6;</span><br><span class="line">     ULONG Dr7;</span><br><span class="line">     ULONG SegGs;</span><br><span class="line">     ULONG SegEs;</span><br><span class="line">     ULONG SegDs;</span><br><span class="line">     ULONG Edx;</span><br><span class="line">     ULONG Ecx;</span><br><span class="line">     ULONG Eax;</span><br><span class="line">     ULONG PreviousPreviousMode;</span><br><span class="line">     PEXCEPTION_REGISTRATION_RECORD ExceptionList;</span><br><span class="line">     ULONG SegFs;</span><br><span class="line">     ULONG Edi;</span><br><span class="line">     ULONG Esi;</span><br><span class="line">     ULONG Ebx;</span><br><span class="line">     ULONG Ebp;</span><br><span class="line">     ULONG ErrCode;</span><br><span class="line">     ULONG Eip;</span><br><span class="line">     ULONG SegCs;</span><br><span class="line">     ULONG EFlags;</span><br><span class="line">     ULONG HardwareEsp;</span><br><span class="line">     ULONG HardwareSegSs;</span><br><span class="line">     ULONG V86Es;</span><br><span class="line">     ULONG V86Ds;</span><br><span class="line">     ULONG V86Fs;</span><br><span class="line">     ULONG V86Gs;</span><br><span class="line">&#125; KTRAP_FRAME, *PKTRAP_FRAME;</span><br></pre></td></tr></table></figure><p>可以看到，上述结构中包含每个寄存器的状态，但该结构一般仅供系统内核自身或者调试系统使用。当需要把控制权交给用户注册的异常处理程序时，会将上述结构情换成一个名为CONTEXT的结构，它包含线程运行时处理器各主要寄存器的完整镜像，用于保存全程运行环境。</p><p>x86平台上的CONTEXT结构如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">CONTEXT</span> &#123;</span></span><br><span class="line">  DWORD64 P1Home;</span><br><span class="line">  DWORD64 P2Home;</span><br><span class="line">  DWORD64 P3Home;</span><br><span class="line">  DWORD64 P4Home;</span><br><span class="line">  DWORD64 P5Home;</span><br><span class="line">  DWORD64 P6Home;</span><br><span class="line">  DWORD   ContextFlags;</span><br><span class="line">  DWORD   MxCsr;</span><br><span class="line">  WORD    SegCs;</span><br><span class="line">  WORD    SegDs;</span><br><span class="line">  WORD    SegEs;</span><br><span class="line">  WORD    SegFs;</span><br><span class="line">  WORD    SegGs;</span><br><span class="line">  WORD    SegSs;</span><br><span class="line">  DWORD   EFlags;</span><br><span class="line">  DWORD64 Dr0;</span><br><span class="line">  DWORD64 Dr1;</span><br><span class="line">  DWORD64 Dr2;</span><br><span class="line">  DWORD64 Dr3;</span><br><span class="line">  DWORD64 Dr6;</span><br><span class="line">  DWORD64 Dr7;</span><br><span class="line">  DWORD64 Rax;</span><br><span class="line">  DWORD64 Rcx;</span><br><span class="line">  DWORD64 Rdx;</span><br><span class="line">  DWORD64 Rbx;</span><br><span class="line">  DWORD64 Rsp;</span><br><span class="line">  DWORD64 Rbp;</span><br><span class="line">  DWORD64 Rsi;</span><br><span class="line">  DWORD64 Rdi;</span><br><span class="line">  DWORD64 R8;</span><br><span class="line">  DWORD64 R9;</span><br><span class="line">  DWORD64 R10;</span><br><span class="line">  DWORD64 R11;</span><br><span class="line">  DWORD64 R12;</span><br><span class="line">  DWORD64 R13;</span><br><span class="line">  DWORD64 R14;</span><br><span class="line">  DWORD64 R15;</span><br><span class="line">  DWORD64 Rip;</span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">    XMM_SAVE_AREA32 FltSave;</span><br><span class="line">    NEON128         Q[<span class="number">16</span>];</span><br><span class="line">    ULONGLONG       D[<span class="number">32</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">      M128A Header[<span class="number">2</span>];</span><br><span class="line">      M128A Legacy[<span class="number">8</span>];</span><br><span class="line">      M128A Xmm0;</span><br><span class="line">      M128A Xmm1;</span><br><span class="line">      M128A Xmm2;</span><br><span class="line">      M128A Xmm3;</span><br><span class="line">      M128A Xmm4;</span><br><span class="line">      M128A Xmm5;</span><br><span class="line">      M128A Xmm6;</span><br><span class="line">      M128A Xmm7;</span><br><span class="line">      M128A Xmm8;</span><br><span class="line">      M128A Xmm9;</span><br><span class="line">      M128A Xmm10;</span><br><span class="line">      M128A Xmm11;</span><br><span class="line">      M128A Xmm12;</span><br><span class="line">      M128A Xmm13;</span><br><span class="line">      M128A Xmm14;</span><br><span class="line">      M128A Xmm15;</span><br><span class="line">    &#125; DUMMYSTRUCTNAME;</span><br><span class="line">    DWORD           S[<span class="number">32</span>];</span><br><span class="line">  &#125; DUMMYUNIONNAME;</span><br><span class="line">  M128A   VectorRegister[<span class="number">26</span>];</span><br><span class="line">  DWORD64 VectorControl;</span><br><span class="line">  DWORD64 DebugControl;</span><br><span class="line">  DWORD64 LastBranchToRip;</span><br><span class="line">  DWORD64 LastBranchFromRip;</span><br><span class="line">  DWORD64 LastExceptionToRip;</span><br><span class="line">  DWORD64 LastExceptionFromRip;</span><br><span class="line">&#125; CONTEXT, *PCONTEXT;</span><br></pre></td></tr></table></figure><p>结构的大部分域是不言自明的。需要解释的是，其第1个域ContextFlags表示该结构中的哪些域有效，当需要用CONTEXT结构保存的信息恢复执行时可对应更新，这为有选择地更新部分域而非全部域提供了有效的手段。</p><p>包装完毕，异常处理函数会进一步调用系统内核的nt!KiDispatchException函数来处理异常。因此，只有深入分析KiDispatchException函数的执行过程，才能理解异常是如何被处理的。该函数原型及各参数的含义如下，其第i个和第3个参数正是上面封装的两个结构。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VOID </span><br><span class="line">KiDispatchException(</span><br><span class="line">IN PEXCEPTION RECORD ExceptionRecord,<span class="comment">//异常结构信息</span></span><br><span class="line">IN PKEXCEPTION_FRAME ExceprionFrame,<span class="comment">//对NT386系统总是为NULL，未使用INPKTRAP_FRAMETrapFrame,发生异常时的陷阱帧</span></span><br><span class="line">IN KPROCESSOR_MODE PreviousMode,<span class="comment">//发生异常时的CPU模式是内核模式还是用户模式</span></span><br><span class="line">IN BOOLEAN FirstChance／／是否第<span class="number">1</span>次处理该异常</span><br></pre></td></tr></table></figure><p>在该函数中，系统会根据是否存在内核调试器、用户态调试器及调试器对异常的干预结果完成不同的处理过程。</p><h3 id="内核态的异常处理过程"><a href="#内核态的异常处理过程" class="headerlink" title="内核态的异常处理过程"></a>内核态的异常处理过程</h3><p>当PreviousMode为KernelMocle时，表示是内核模式下产生的异常，此时KiDispatchException会按以下步骤分发异常。</p><ol><li>检测当前系统是否正在被内核调试器调试。如果内接调试器不存在，就跳过本步骤。如果内核i式器存在，系统就会把异常处理的控制权转交给内核调试器，并注明是第l次处理机会(FirstChance）内核调试器取得控制权之，会根据用户对异常处理的设置来确定是否要处理该异常。如果无法确定该异常是否需要处理，就会发生中断，把控制权交给用户，由用户决定是否处理。</li><li>如果不存在内核调试器，或者在第l次处理机会出现时调试器选悔不处理该异常，系统就会调用nt!RtlDispatchException函数，根据统程注册的结构化异常处理过程来处理该异常。</li><li>如果nt!RtlDispatchException函数没有处理该异常，系统会给调试器第2次处理机会（SecondChance），此时调试器可以再次取得对异常的处理权。</li><li>如果不存在内核调试器，或者在第2次机会调试器仍不处理，系统就认为在这种情况下不能继续运行了。为了避免引起更加严重的、不可预知的错误，系统会直接调用KeBugCheckEx产生一个错误码为“KERNEL_MODE_EXCEPTION_NOT_HANDLED”（其值为Ox0000008E）的BSOD（俗称蓝屏错误）。</li></ol><p>可以看到，在上述异常处理过程中，只有在某一步骤中异常未得到处理，才会进行下一处理过程。在任何时候，只要异常被处理了，就会终止整个异常处理过程。</p><h3 id="用户态的异常处理过程"><a href="#用户态的异常处理过程" class="headerlink" title="用户态的异常处理过程"></a>用户态的异常处理过程</h3><p>当PreviousMode为UserMocle时，表示是用户模式下产生的异常。此时KiDispatchException函数仍然会检测内核调试器是否存在。如果内核调试器存在，会优先把控制权交给内核调试器进行处理。所以，使用内核调试器调试用户态程序是完全可行的，并且不依赖进程的调试端口。在大多数情况下，内核调试器对用户态的异常不感兴趣，也就不会去处理它，比时nt!KiDispatchException函数仍然像处理内核态异常一样按两次处理机会进行分发，主要过程如下。</p><ol><li><p>如果发生异常的程序正在被调试，那么将异常信息发送给正在调试它的用户态调试器，给调试器第l次处理机会；如果没有被调试，跳过本步。</p></li><li><p>如果不存在用户态调试器或调试器未处理该异常，那么在枝上放置EXCEPTION_RECORD和CONTEXT两个结构，并将控制权返回用户态ntdll.dll中的KiUserExceptidnDspatcher函数，由它调用ntdll!RtlDispatchException函数进行用户态的异常处理。这一部分涉及SEH和VEH两种异常处理机制。中，SEH部分包括应用程序调用API函数SetUnhandleExceptionFilter但如果有调试器存在，顶级异常处理会被跳过，进入下一阶段的处理，居则将由顶级异常处理程序进行终结处理（通常是显示一个应用程序错误对话框并根据用户的选择快定是终止程序还是附加到调试器）。如果没有调试器能附加于其上或调试器还是处理不了异常，系统就调用ExitProcess函数来终结程序。</p></li><li><p>如果ntdll!RtlDispatchException函数在调用用户态的异常处理过程中未能处理该异常，那么异常处理过程会再次返回nt!KiDispatchException，它将再次把异常信息库送给用户态的调试器，给调试器第2次处理机会。如果没有调试器存在，则不会进行第次分发，而是直接结束进程。</p></li><li><p>如果第2次机会调试器仍不处理，nt!KiDispatchException会再次尝试把异常分发给进程的异常端口进行处理。该端口通常由子系统进程csrss.exe进行监听。子系统监听到该错误后，通常会显示一个“应用程序错误”对话框，用户可以单击“确定”按钮或者最后将其附加到调试器上的“取消”按钮。如果没有调试器能附加于其上，或者调试器还是处理不了异常，系统就调用ExitProcess函数来终结程序。</p><p><img src="/img/1554690873141.png" alt="1554690873141"></p></li><li><p>在终结程序之前，系统会再次调用发生异常的线程中的所有异常处理过程，这是线程异常’处理过程所获得的清理未释放资源的最后机会，此后程序就终结了。</p></li></ol><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p><img src="/img/1571159924755.png" alt="1571159924755"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; Window SEH异常 – 异常初识&lt;/p&gt;
&lt;h2 id=&quot;异常处理的基本概念&quot;&gt;&lt;a href=&quot;#异常处理的基本概念&quot; class=&quot;headerlink&quot; title=&quot;异常处理的基本概念&quot;&gt;&lt;/a&gt;异常处理的基本概念&lt;/h2&gt;&lt;p&gt;所谓异常就是在应用程序正常执
      
    
    </summary>
    
      <category term="Windows" scheme="https://www.basicbit.cn/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://www.basicbit.cn/tags/Windows/"/>
    
      <category term="SEH" scheme="https://www.basicbit.cn/tags/SEH/"/>
    
  </entry>
  
  <entry>
    <title>Window PE -- 初识</title>
    <link href="https://www.basicbit.cn/2018/10/31/2018-10-31-Windows%20PE%20%E5%88%9D%E8%AF%86/"/>
    <id>https://www.basicbit.cn/2018/10/31/2018-10-31-Windows PE 初识/</id>
    <published>2018-10-30T16:00:00.000Z</published>
    <updated>2019-10-15T17:18:54.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Window-PE-–-初识"><a href="#Window-PE-–-初识" class="headerlink" title="Window PE – 初识"></a>Window PE – 初识</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>PE文件使用的是一个平面地址空间，所有代码和数据都合并在一起，组成了一个很大的结构。文件的内容被分割为不同的区块（Section，又称区段、节等，在本章中不区分“区块”与“块”），区块中包含代码或数据，各个区块按页边界对齐。区块没有大小限制，是一个连续结构。每个块都有它自己在内存中的一套属性，例如这个块是否包含代码、是否只读或可读／写等。</p><p>认识到PE文件不是作为单一内存映射文件被载入内存是很重要的。Windows加载器（又称PE装载器）遍历PE文件并决定文件的哪一部分被映射，这种映射方式是将文件较高的偏移位置映射到较高的内存地址中。盘文件一旦被载入内存，磁盘上的数据结构布局和内存中的数据结构布局就是一致的。这样，如果在磁盘的数据结构中寻找一些内容，那么几乎都能在被载人的内存映射文件中找到相同的信息，但数据之间的相对位置可能会改变，某项的偏移地址可能区别于原始的偏移位置。</p><p>不管怎样，对所有表现出来的信息，都允许进行从磁盘文件偏移到内存偏移的转换。</p><h3 id="基地址"><a href="#基地址" class="headerlink" title="基地址"></a>基地址</h3><p>当PE文件通过Windows加载器载入内存后，内存中的版本称为模块（Module）。映射文件的起始地址称为模块句柄（hModule），可以通过模块句柄访问内存中的其他数据结构。这个初始内存地址也称为基地址（ImageBase）。准确地说，对于WindowsCE，这是不成立的，一个模块句辆在WindowsCE下井不等同于安装的起始地址。</p><p><img src="/img/1554714173177.png" alt="1554714173177"></p><p>内存中的模块代表进程将这个可执行文件所需要的代码、数据、资源、输入表、输出表及其他有用的数据结构所使用的内存都放在一个连续的内存块中，程序员只要知道装载程序文件映像到内存后的基地址即可。PE文件的剩余部分可以被读人，但可能无法被映射。例如，在将调试信息放到文件尾部时，PE的一个字段会告诉系统把文件映射到内存时需要使用多少内存，不能被映射的数据将被放置在文件的尾部。方便起见，WindowNT或Windows95将Modul的基地址作为Module的实例句柄（InstanceHandle，即Hinstance）。</p><p>在32位Windows系统中，因为InstanceHandle来源于16位的Windows3.1，其中每执行实例都有自己的数据段并以此来互相区分（这就是InstanceHandle的来历）。在32位Windows系统中，因为不存在共享地址空间，所以应用程序无须加以区别。当然，16位Windows系统和32位Windows系统中的Hinstance还有些联系：在32位Windows系统中可以直接调用GetModuleHandle以取得指向DLL的指针，通过指针访问该DLLModule的内容，示例如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用该函数时会传递一个可执行文件或DLL文件名字符串，如果系统找到文件，则返回该可执行文件或DLL文件映像所加载的基地址。也可以调用GetModuleHandle来传递NULL参数，此时将返回调用的可执行文件的基地址。</p><p>基地址的值是由PE文件本身设定的。按照默认设置，用VisualC＋＋建立的EXE文件的基地址是400000h、DLL文件的基地址是10000000h。可以在创建应用程序的EXE文件时改变这个地址，方法是在链接应用时使用链接程序的/BASE选项，或者在链接后通过REBASE应用程序进行设置。</p><h3 id="虚拟地址"><a href="#虚拟地址" class="headerlink" title="虚拟地址"></a>虚拟地址</h3><p>在Windows系统中，PE文件被系统加载器映射到内存中。每个程序都有自己的虚拟空间，这个虚拟空间的内存地址称为虚拟地址（VirtualAddress,VA）</p><h3 id="相对虚拟地址"><a href="#相对虚拟地址" class="headerlink" title="相对虚拟地址"></a>相对虚拟地址</h3><p>在可执行文件中，有许多地方需要指定内存中的地址。例如，引用全局变量时需要指定它的地址。PE文件尽管有一个首选的载入地址（基地址），但是它们可以载入进程空间的任何地方，所以不能依赖PE的载入点。因此必须有一个方法来指定地址（不依赖PE载入点的地址）。</p><p>为了避免在E文件中出现绝对内存地址引人了相对虚拟地址（RelativeVirtualAddress,RVA)的概念。RVA只是内存中的一个简单的、相对于PE件载入地址的偏移位置，它是一个“相对”地址（或称偏移量）。例如，假设一个EXE文件从400000h处载人，而且它的代码区块开始于401000h处，代码区块的RVA计算方法如下：</p><p>目标地址401000h - 载入地址400000h=RVA 1000h</p><p>将一个VA转换成真实的地址只是简单地翻转这个过程，即用实际的载入地址加RVA得到实际的内存地址。它们之间的关系如下：</p><p>虚拟地址（VA）＝基地址（ImageBase)＋相对虚拟地址（RVA)</p><h2 id="文件虚拟地址"><a href="#文件虚拟地址" class="headerlink" title="文件虚拟地址"></a>文件虚拟地址</h2><p>当PE文件储存在磁盘中时，某个数据的位置相对于文件头的偏移量称为文件偏移地址（FileOffset）或物理地址（RAWOffset）。文件偏移地址从PE文件的第1个字节开始计数，起始值为0。用十六进制工具（例如HexWorkshopWinHex等）打开文件时所显示的地址就是文件偏移地址。</p><h2 id="MS-DOS头部"><a href="#MS-DOS头部" class="headerlink" title="MS-DOS头部"></a>MS-DOS头部</h2><p>每个PE文件都是以一个DOS程序开始的，有了它，一旦程序在DOS下执行，DOS就能识别出这是一个有效的执行体，然后运行紧随MZ header的DOS stub(DOS块）。DOSstub实际上是一个有效的EXE，在不支持PE文件格式的操作系统中它将单地显示一个错误提示，类似于字符串“This program cannot be rnn in MS-DOS mode”。程序员也可以根据自己的意图实现完整的DOS代码。用户通常对DOSstub不太感兴趣，因为在大多数情况下它是由汇编器／编译器自动生成的。我们通常把DOS MZ头与DOS stub合称为DOS文件头。</p><p>PE件的第个字节位于一个传统的MS-DOS头部，称作IMAGE_DOS_HEADER，其结构如下（左边的数字是到文件头的偏移量）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span>  <span class="comment">// DOS .EXE header</span></span><br><span class="line">    USHORT e_magic;         <span class="comment">// Magic number</span></span><br><span class="line">    USHORT e_cblp;          <span class="comment">// Bytes on last page of file</span></span><br><span class="line">    USHORT e_cp;            <span class="comment">// Pages in file</span></span><br><span class="line">    USHORT e_crlc;          <span class="comment">// Relocations</span></span><br><span class="line">    USHORT e_cparhdr;       <span class="comment">// Size of header in paragraphs</span></span><br><span class="line">    USHORT e_minalloc;      <span class="comment">// Minimum extra paragraphs needed</span></span><br><span class="line">    USHORT e_maxalloc;      <span class="comment">// Maximum extra paragraphs needed</span></span><br><span class="line">    USHORT e_ss;            <span class="comment">// Initial (relative) SS value</span></span><br><span class="line">    USHORT e_sp;            <span class="comment">// Initial SP value</span></span><br><span class="line">    USHORT e_csum;          <span class="comment">// Checksum</span></span><br><span class="line">    USHORT e_ip;            <span class="comment">// Initial IP value</span></span><br><span class="line">    USHORT e_cs;            <span class="comment">// Initial (relative) CS value</span></span><br><span class="line">    USHORT e_lfarlc;        <span class="comment">// File address of relocation table</span></span><br><span class="line">    USHORT e_ovno;          <span class="comment">// Overlay number</span></span><br><span class="line">    USHORT e_res[<span class="number">4</span>];        <span class="comment">// Reserved words</span></span><br><span class="line">    USHORT e_oemid;         <span class="comment">// OEM identifier (for e_oeminfo)</span></span><br><span class="line">    USHORT e_oeminfo;       <span class="comment">// OEM information; e_oemid specific</span></span><br><span class="line">    USHORT e_res2[<span class="number">10</span>];      <span class="comment">// Reserved words</span></span><br><span class="line">    LONG   e_lfanew;        <span class="comment">// File address of new exe header</span></span><br><span class="line">  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure><p>其中有两个字段比较重要，分别是e_magic和e_lfanew 。e_magic字段（1个字大小）的值需要被设置为5A4Dh。这个值有一个＃define，名为IMAGE_DOS_SIGNATURE，在ASCII表示法里它的ASCII值为“MZ”，是MS-DOS的创建者之一MarkZbikowski名字的缩写。e_lfanew字段是真正的PE文件头的相对偏移（RVA），指出真正的PE头的文件偏移位置，占用4字节，位于从文件开始偏移3Ch字节处。</p><p>用十六进制编辑器（WinHex,HexWorkshop等带偏移量显示功能的尤佳）打开随书文件中的示例程序PE.exe定位在文件起始位置，此处就是MS-DOS头部，如图11.3所示。文件的第l个字柯：“MZ”就是e_magic字段；偏移量3Ch就是e_lfanew的值，在这里显示为“B000000。”。为IntelCPU属于Little-Endian类，字符储存时低位在前，高位在后，所以，将次序恢复后，e_lfanew的值为000000b0h，这个值就是真正的PE文件头偏移量。</p><p><img src="/img/1554715138941.png" alt="1554715138941"></p><h1 id><a href="#" class="headerlink" title></a><img src="/img/1571159929511.png" alt="1571159929511"></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Window-PE-–-初识&quot;&gt;&lt;a href=&quot;#Window-PE-–-初识&quot; class=&quot;headerlink&quot; title=&quot;Window PE – 初识&quot;&gt;&lt;/a&gt;Window PE – 初识&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基
      
    
    </summary>
    
      <category term="Windows" scheme="https://www.basicbit.cn/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://www.basicbit.cn/tags/Windows/"/>
    
      <category term="PE" scheme="https://www.basicbit.cn/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>静态变量底层实现</title>
    <link href="https://www.basicbit.cn/2018/10/20/2018-10-20-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <id>https://www.basicbit.cn/2018/10/20/2018-10-20-静态变量底层实现/</id>
    <published>2018-10-19T16:00:00.000Z</published>
    <updated>2019-10-15T17:19:03.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态变量底层实现"><a href="#静态变量底层实现" class="headerlink" title="静态变量底层实现"></a>静态变量底层实现</h1><p>静态变量有局部静态变量（作用域内的静态变量），全局静态变量，然而他们的实现和全局变量是一样的，而局部静态变量只能在作用域访问是C语言的优化。</p><p>局部静态变量不会随作用域结束而销毁，并且在未进入作用域之前就已经存在，其生命周期也与全局变量相同。局部静态变量和全局变量都保存在执行文件中的数据区中。</p><p>局部静态变量会预先被作为全局变量处理，而它的初始化部分，只是在做赋值操作而已。</p><p>在C++语法中局部静态变量只能被初始化一次，编译器的内部实现如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void Static(int nNum)</span><br><span class="line">&#123;</span><br><span class="line">    static int g_nNum = nNum;</span><br><span class="line">    xor eax,eax</span><br><span class="line">    mov al,byte ptr[&apos;Static&apos;::&apos;2&apos;::$$1 (004257cc)]</span><br><span class="line">    and eax,1</span><br><span class="line">    test eax,eax</span><br><span class="line">    jne pp</span><br><span class="line">    mov cl,byte ptr[&apos;Static&apos;::&apos;2&apos;::$$1 (004257cc)]</span><br><span class="line">    or cl,1</span><br><span class="line">    mov byte ptr[&apos;Static&apos;::&apos;2&apos;::$$1 (004257cc)], cl</span><br><span class="line">    mov edx,[ebp + 8]</span><br><span class="line">    mov [_sbh_sizeHeaderList+4 (004257c8)],edx</span><br><span class="line">pp:</span><br><span class="line">    printf(&quot;%d&quot;, g_nNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码首先从004257cc处取出1字节内容进行判断，这个byte的内容实际上就是局部静态变量初始状态的一个标志，这个标志占1字节，通过位运算，将标志的一位置1，而1个字节占8位，so这个标志可以同时表示8个局部静态变量的初始状态。</p><p>标志坐在的内存地址在最先定义的局部静态变量地址的附近，如最先定义的整型局部静态变量在地址0x004257C0处，那么标记位地址通常在0x004257C4或0x004257BC处。当同一作用域内超过8个局部静态变量时，下一个标记位将会在第9个定义的局部静态变量地址附近。</p><p>当局部静态变量为数组时，那么只检查数组的第1个字节是否进行过初始化，其他位将不进行检查。</p><p><img src="/img/1571159941863.png" alt="1571159941863"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;静态变量底层实现&quot;&gt;&lt;a href=&quot;#静态变量底层实现&quot; class=&quot;headerlink&quot; title=&quot;静态变量底层实现&quot;&gt;&lt;/a&gt;静态变量底层实现&lt;/h1&gt;&lt;p&gt;静态变量有局部静态变量（作用域内的静态变量），全局静态变量，然而他们的实现和全局变量是一样的
      
    
    </summary>
    
      <category term="Windows" scheme="https://www.basicbit.cn/categories/Windows/"/>
    
    
      <category term="随书笔记" scheme="https://www.basicbit.cn/tags/%E9%9A%8F%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C++ Primer" scheme="https://www.basicbit.cn/tags/C-Primer/"/>
    
  </entry>
  
</feed>
